// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: librarian/sephirah/v1/porter/sephirah_porter_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Librarian.Sephirah.V1.Porter {
  public static partial class LibrarianSephirahPorterService
  {
    static readonly string __ServiceName = "librarian.sephirah.v1.porter.LibrarianSephirahPorterService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Librarian.Sephirah.V1.Porter.RefreshTokenRequest> __Marshaller_librarian_sephirah_v1_porter_RefreshTokenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Librarian.Sephirah.V1.Porter.RefreshTokenRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Librarian.Sephirah.V1.Porter.RefreshTokenResponse> __Marshaller_librarian_sephirah_v1_porter_RefreshTokenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Librarian.Sephirah.V1.Porter.RefreshTokenResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Librarian.Sephirah.V1.Porter.AcquireUserTokenRequest> __Marshaller_librarian_sephirah_v1_porter_AcquireUserTokenRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Librarian.Sephirah.V1.Porter.AcquireUserTokenRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Librarian.Sephirah.V1.Porter.AcquireUserTokenResponse> __Marshaller_librarian_sephirah_v1_porter_AcquireUserTokenResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Librarian.Sephirah.V1.Porter.AcquireUserTokenResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsRequest> __Marshaller_librarian_sephirah_v1_porter_GetNotifyTargetItemsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsResponse> __Marshaller_librarian_sephirah_v1_porter_GetNotifyTargetItemsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Librarian.Sephirah.V1.Porter.UpsertFeedRequest> __Marshaller_librarian_sephirah_v1_porter_UpsertFeedRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Librarian.Sephirah.V1.Porter.UpsertFeedRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Librarian.Sephirah.V1.Porter.UpsertFeedResponse> __Marshaller_librarian_sephirah_v1_porter_UpsertFeedResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Librarian.Sephirah.V1.Porter.UpsertFeedResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Librarian.Sephirah.V1.Porter.GetFeedRequest> __Marshaller_librarian_sephirah_v1_porter_GetFeedRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Librarian.Sephirah.V1.Porter.GetFeedRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Librarian.Sephirah.V1.Porter.GetFeedResponse> __Marshaller_librarian_sephirah_v1_porter_GetFeedResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Librarian.Sephirah.V1.Porter.GetFeedResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Librarian.Sephirah.V1.Porter.RefreshTokenRequest, global::Librarian.Sephirah.V1.Porter.RefreshTokenResponse> __Method_RefreshToken = new grpc::Method<global::Librarian.Sephirah.V1.Porter.RefreshTokenRequest, global::Librarian.Sephirah.V1.Porter.RefreshTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RefreshToken",
        __Marshaller_librarian_sephirah_v1_porter_RefreshTokenRequest,
        __Marshaller_librarian_sephirah_v1_porter_RefreshTokenResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Librarian.Sephirah.V1.Porter.AcquireUserTokenRequest, global::Librarian.Sephirah.V1.Porter.AcquireUserTokenResponse> __Method_AcquireUserToken = new grpc::Method<global::Librarian.Sephirah.V1.Porter.AcquireUserTokenRequest, global::Librarian.Sephirah.V1.Porter.AcquireUserTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AcquireUserToken",
        __Marshaller_librarian_sephirah_v1_porter_AcquireUserTokenRequest,
        __Marshaller_librarian_sephirah_v1_porter_AcquireUserTokenResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsRequest, global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsResponse> __Method_GetNotifyTargetItems = new grpc::Method<global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsRequest, global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNotifyTargetItems",
        __Marshaller_librarian_sephirah_v1_porter_GetNotifyTargetItemsRequest,
        __Marshaller_librarian_sephirah_v1_porter_GetNotifyTargetItemsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Librarian.Sephirah.V1.Porter.UpsertFeedRequest, global::Librarian.Sephirah.V1.Porter.UpsertFeedResponse> __Method_UpsertFeed = new grpc::Method<global::Librarian.Sephirah.V1.Porter.UpsertFeedRequest, global::Librarian.Sephirah.V1.Porter.UpsertFeedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpsertFeed",
        __Marshaller_librarian_sephirah_v1_porter_UpsertFeedRequest,
        __Marshaller_librarian_sephirah_v1_porter_UpsertFeedResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Librarian.Sephirah.V1.Porter.GetFeedRequest, global::Librarian.Sephirah.V1.Porter.GetFeedResponse> __Method_GetFeed = new grpc::Method<global::Librarian.Sephirah.V1.Porter.GetFeedRequest, global::Librarian.Sephirah.V1.Porter.GetFeedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFeed",
        __Marshaller_librarian_sephirah_v1_porter_GetFeedRequest,
        __Marshaller_librarian_sephirah_v1_porter_GetFeedResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Librarian.Sephirah.V1.Porter.SephirahPorterServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of LibrarianSephirahPorterService</summary>
    [grpc::BindServiceMethod(typeof(LibrarianSephirahPorterService), "BindService")]
    public abstract partial class LibrarianSephirahPorterServiceBase
    {
      /// <summary>
      /// `Tiphereth` Use valid refresh_token and get two new token, a refresh_token can only be used once
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Librarian.Sephirah.V1.Porter.RefreshTokenResponse> RefreshToken(global::Librarian.Sephirah.V1.Porter.RefreshTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// `Tiphereth` `Porter` Obtain access_token of a specific user after user authorization.
      /// This token can be used to perform actions on behalf of the user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Librarian.Sephirah.V1.Porter.AcquireUserTokenResponse> AcquireUserToken(global::Librarian.Sephirah.V1.Porter.AcquireUserTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// `Netzach` `Porter`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsResponse> GetNotifyTargetItems(global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// `Yesod` `Porter`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Librarian.Sephirah.V1.Porter.UpsertFeedResponse> UpsertFeed(global::Librarian.Sephirah.V1.Porter.UpsertFeedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// `Yesod` `Porter`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Librarian.Sephirah.V1.Porter.GetFeedResponse> GetFeed(global::Librarian.Sephirah.V1.Porter.GetFeedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for LibrarianSephirahPorterService</summary>
    public partial class LibrarianSephirahPorterServiceClient : grpc::ClientBase<LibrarianSephirahPorterServiceClient>
    {
      /// <summary>Creates a new client for LibrarianSephirahPorterService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public LibrarianSephirahPorterServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for LibrarianSephirahPorterService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public LibrarianSephirahPorterServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected LibrarianSephirahPorterServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected LibrarianSephirahPorterServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// `Tiphereth` Use valid refresh_token and get two new token, a refresh_token can only be used once
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Librarian.Sephirah.V1.Porter.RefreshTokenResponse RefreshToken(global::Librarian.Sephirah.V1.Porter.RefreshTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RefreshToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `Tiphereth` Use valid refresh_token and get two new token, a refresh_token can only be used once
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Librarian.Sephirah.V1.Porter.RefreshTokenResponse RefreshToken(global::Librarian.Sephirah.V1.Porter.RefreshTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RefreshToken, null, options, request);
      }
      /// <summary>
      /// `Tiphereth` Use valid refresh_token and get two new token, a refresh_token can only be used once
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Librarian.Sephirah.V1.Porter.RefreshTokenResponse> RefreshTokenAsync(global::Librarian.Sephirah.V1.Porter.RefreshTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RefreshTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `Tiphereth` Use valid refresh_token and get two new token, a refresh_token can only be used once
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Librarian.Sephirah.V1.Porter.RefreshTokenResponse> RefreshTokenAsync(global::Librarian.Sephirah.V1.Porter.RefreshTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RefreshToken, null, options, request);
      }
      /// <summary>
      /// `Tiphereth` `Porter` Obtain access_token of a specific user after user authorization.
      /// This token can be used to perform actions on behalf of the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Librarian.Sephirah.V1.Porter.AcquireUserTokenResponse AcquireUserToken(global::Librarian.Sephirah.V1.Porter.AcquireUserTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcquireUserToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `Tiphereth` `Porter` Obtain access_token of a specific user after user authorization.
      /// This token can be used to perform actions on behalf of the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Librarian.Sephirah.V1.Porter.AcquireUserTokenResponse AcquireUserToken(global::Librarian.Sephirah.V1.Porter.AcquireUserTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AcquireUserToken, null, options, request);
      }
      /// <summary>
      /// `Tiphereth` `Porter` Obtain access_token of a specific user after user authorization.
      /// This token can be used to perform actions on behalf of the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Librarian.Sephirah.V1.Porter.AcquireUserTokenResponse> AcquireUserTokenAsync(global::Librarian.Sephirah.V1.Porter.AcquireUserTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcquireUserTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `Tiphereth` `Porter` Obtain access_token of a specific user after user authorization.
      /// This token can be used to perform actions on behalf of the user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Librarian.Sephirah.V1.Porter.AcquireUserTokenResponse> AcquireUserTokenAsync(global::Librarian.Sephirah.V1.Porter.AcquireUserTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AcquireUserToken, null, options, request);
      }
      /// <summary>
      /// `Netzach` `Porter`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsResponse GetNotifyTargetItems(global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNotifyTargetItems(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `Netzach` `Porter`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsResponse GetNotifyTargetItems(global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNotifyTargetItems, null, options, request);
      }
      /// <summary>
      /// `Netzach` `Porter`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsResponse> GetNotifyTargetItemsAsync(global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNotifyTargetItemsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `Netzach` `Porter`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsResponse> GetNotifyTargetItemsAsync(global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNotifyTargetItems, null, options, request);
      }
      /// <summary>
      /// `Yesod` `Porter`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Librarian.Sephirah.V1.Porter.UpsertFeedResponse UpsertFeed(global::Librarian.Sephirah.V1.Porter.UpsertFeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpsertFeed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `Yesod` `Porter`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Librarian.Sephirah.V1.Porter.UpsertFeedResponse UpsertFeed(global::Librarian.Sephirah.V1.Porter.UpsertFeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpsertFeed, null, options, request);
      }
      /// <summary>
      /// `Yesod` `Porter`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Librarian.Sephirah.V1.Porter.UpsertFeedResponse> UpsertFeedAsync(global::Librarian.Sephirah.V1.Porter.UpsertFeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpsertFeedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `Yesod` `Porter`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Librarian.Sephirah.V1.Porter.UpsertFeedResponse> UpsertFeedAsync(global::Librarian.Sephirah.V1.Porter.UpsertFeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpsertFeed, null, options, request);
      }
      /// <summary>
      /// `Yesod` `Porter`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Librarian.Sephirah.V1.Porter.GetFeedResponse GetFeed(global::Librarian.Sephirah.V1.Porter.GetFeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFeed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `Yesod` `Porter`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Librarian.Sephirah.V1.Porter.GetFeedResponse GetFeed(global::Librarian.Sephirah.V1.Porter.GetFeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFeed, null, options, request);
      }
      /// <summary>
      /// `Yesod` `Porter`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Librarian.Sephirah.V1.Porter.GetFeedResponse> GetFeedAsync(global::Librarian.Sephirah.V1.Porter.GetFeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFeedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// `Yesod` `Porter`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Librarian.Sephirah.V1.Porter.GetFeedResponse> GetFeedAsync(global::Librarian.Sephirah.V1.Porter.GetFeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFeed, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override LibrarianSephirahPorterServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LibrarianSephirahPorterServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(LibrarianSephirahPorterServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RefreshToken, serviceImpl.RefreshToken)
          .AddMethod(__Method_AcquireUserToken, serviceImpl.AcquireUserToken)
          .AddMethod(__Method_GetNotifyTargetItems, serviceImpl.GetNotifyTargetItems)
          .AddMethod(__Method_UpsertFeed, serviceImpl.UpsertFeed)
          .AddMethod(__Method_GetFeed, serviceImpl.GetFeed).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, LibrarianSephirahPorterServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RefreshToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Librarian.Sephirah.V1.Porter.RefreshTokenRequest, global::Librarian.Sephirah.V1.Porter.RefreshTokenResponse>(serviceImpl.RefreshToken));
      serviceBinder.AddMethod(__Method_AcquireUserToken, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Librarian.Sephirah.V1.Porter.AcquireUserTokenRequest, global::Librarian.Sephirah.V1.Porter.AcquireUserTokenResponse>(serviceImpl.AcquireUserToken));
      serviceBinder.AddMethod(__Method_GetNotifyTargetItems, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsRequest, global::Librarian.Sephirah.V1.Porter.GetNotifyTargetItemsResponse>(serviceImpl.GetNotifyTargetItems));
      serviceBinder.AddMethod(__Method_UpsertFeed, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Librarian.Sephirah.V1.Porter.UpsertFeedRequest, global::Librarian.Sephirah.V1.Porter.UpsertFeedResponse>(serviceImpl.UpsertFeed));
      serviceBinder.AddMethod(__Method_GetFeed, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Librarian.Sephirah.V1.Porter.GetFeedRequest, global::Librarian.Sephirah.V1.Porter.GetFeedResponse>(serviceImpl.GetFeed));
    }

  }
}
#endregion
