// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: librarian/v0/app.proto

package librarian

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateAppReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Base                 *BaseReq `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateAppReq) Reset()         { *m = CreateAppReq{} }
func (m *CreateAppReq) String() string { return proto.CompactTextString(m) }
func (*CreateAppReq) ProtoMessage()    {}
func (*CreateAppReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_71612c62e961d0c5, []int{0}
}
func (m *CreateAppReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAppReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAppReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAppReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAppReq.Merge(m, src)
}
func (m *CreateAppReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateAppReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAppReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAppReq proto.InternalMessageInfo

func (m *CreateAppReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateAppReq) GetBase() *BaseReq {
	if m != nil {
		return m.Base
	}
	return nil
}

type CreateAppResp struct {
	// Types that are valid to be assigned to XInfo:
	//	*CreateAppResp_Info
	XInfo                isCreateAppResp_XInfo `protobuf_oneof:"_Info"`
	Base                 *BaseResp             `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CreateAppResp) Reset()         { *m = CreateAppResp{} }
func (m *CreateAppResp) String() string { return proto.CompactTextString(m) }
func (*CreateAppResp) ProtoMessage()    {}
func (*CreateAppResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_71612c62e961d0c5, []int{1}
}
func (m *CreateAppResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAppResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAppResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAppResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAppResp.Merge(m, src)
}
func (m *CreateAppResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateAppResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAppResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAppResp proto.InternalMessageInfo

type isCreateAppResp_XInfo interface {
	isCreateAppResp_XInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateAppResp_Info struct {
	Info *AppInfo `protobuf:"bytes,1,opt,name=Info,proto3,oneof" json:"Info,omitempty"`
}

func (*CreateAppResp_Info) isCreateAppResp_XInfo() {}

func (m *CreateAppResp) GetXInfo() isCreateAppResp_XInfo {
	if m != nil {
		return m.XInfo
	}
	return nil
}

func (m *CreateAppResp) GetInfo() *AppInfo {
	if x, ok := m.GetXInfo().(*CreateAppResp_Info); ok {
		return x.Info
	}
	return nil
}

func (m *CreateAppResp) GetBase() *BaseResp {
	if m != nil {
		return m.Base
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateAppResp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateAppResp_Info)(nil),
	}
}

type UpdateAppReq struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// Types that are valid to be assigned to XName:
	//	*UpdateAppReq_Name
	XName                isUpdateAppReq_XName `protobuf_oneof:"_Name"`
	Base                 *BaseReq             `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UpdateAppReq) Reset()         { *m = UpdateAppReq{} }
func (m *UpdateAppReq) String() string { return proto.CompactTextString(m) }
func (*UpdateAppReq) ProtoMessage()    {}
func (*UpdateAppReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_71612c62e961d0c5, []int{2}
}
func (m *UpdateAppReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAppReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAppReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAppReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAppReq.Merge(m, src)
}
func (m *UpdateAppReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAppReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAppReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAppReq proto.InternalMessageInfo

type isUpdateAppReq_XName interface {
	isUpdateAppReq_XName()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UpdateAppReq_Name struct {
	Name string `protobuf:"bytes,2,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
}

func (*UpdateAppReq_Name) isUpdateAppReq_XName() {}

func (m *UpdateAppReq) GetXName() isUpdateAppReq_XName {
	if m != nil {
		return m.XName
	}
	return nil
}

func (m *UpdateAppReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateAppReq) GetName() string {
	if x, ok := m.GetXName().(*UpdateAppReq_Name); ok {
		return x.Name
	}
	return ""
}

func (m *UpdateAppReq) GetBase() *BaseReq {
	if m != nil {
		return m.Base
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpdateAppReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpdateAppReq_Name)(nil),
	}
}

type UpdateAppResp struct {
	// Types that are valid to be assigned to XInfo:
	//	*UpdateAppResp_Info
	XInfo                isUpdateAppResp_XInfo `protobuf_oneof:"_Info"`
	Base                 *BaseResp             `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateAppResp) Reset()         { *m = UpdateAppResp{} }
func (m *UpdateAppResp) String() string { return proto.CompactTextString(m) }
func (*UpdateAppResp) ProtoMessage()    {}
func (*UpdateAppResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_71612c62e961d0c5, []int{3}
}
func (m *UpdateAppResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAppResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAppResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAppResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAppResp.Merge(m, src)
}
func (m *UpdateAppResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAppResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAppResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAppResp proto.InternalMessageInfo

type isUpdateAppResp_XInfo interface {
	isUpdateAppResp_XInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UpdateAppResp_Info struct {
	Info *AppInfo `protobuf:"bytes,1,opt,name=Info,proto3,oneof" json:"Info,omitempty"`
}

func (*UpdateAppResp_Info) isUpdateAppResp_XInfo() {}

func (m *UpdateAppResp) GetXInfo() isUpdateAppResp_XInfo {
	if m != nil {
		return m.XInfo
	}
	return nil
}

func (m *UpdateAppResp) GetInfo() *AppInfo {
	if x, ok := m.GetXInfo().(*UpdateAppResp_Info); ok {
		return x.Info
	}
	return nil
}

func (m *UpdateAppResp) GetBase() *BaseResp {
	if m != nil {
		return m.Base
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpdateAppResp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpdateAppResp_Info)(nil),
	}
}

type ListAppReq struct {
	Name []string `protobuf:"bytes,1,rep,name=Name,proto3" json:"Name,omitempty"`
	// Types that are valid to be assigned to XPageNum:
	//	*ListAppReq_PageNum
	XPageNum isListAppReq_XPageNum `protobuf_oneof:"_PageNum"`
	// Types that are valid to be assigned to XPageSize:
	//	*ListAppReq_PageSize
	XPageSize            isListAppReq_XPageSize `protobuf_oneof:"_PageSize"`
	Base                 *BaseReq               `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ListAppReq) Reset()         { *m = ListAppReq{} }
func (m *ListAppReq) String() string { return proto.CompactTextString(m) }
func (*ListAppReq) ProtoMessage()    {}
func (*ListAppReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_71612c62e961d0c5, []int{4}
}
func (m *ListAppReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAppReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAppReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAppReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAppReq.Merge(m, src)
}
func (m *ListAppReq) XXX_Size() int {
	return m.Size()
}
func (m *ListAppReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAppReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListAppReq proto.InternalMessageInfo

type isListAppReq_XPageNum interface {
	isListAppReq_XPageNum()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isListAppReq_XPageSize interface {
	isListAppReq_XPageSize()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListAppReq_PageNum struct {
	PageNum int32 `protobuf:"varint,101,opt,name=PageNum,proto3,oneof" json:"PageNum,omitempty"`
}
type ListAppReq_PageSize struct {
	PageSize int32 `protobuf:"varint,102,opt,name=PageSize,proto3,oneof" json:"PageSize,omitempty"`
}

func (*ListAppReq_PageNum) isListAppReq_XPageNum()   {}
func (*ListAppReq_PageSize) isListAppReq_XPageSize() {}

func (m *ListAppReq) GetXPageNum() isListAppReq_XPageNum {
	if m != nil {
		return m.XPageNum
	}
	return nil
}
func (m *ListAppReq) GetXPageSize() isListAppReq_XPageSize {
	if m != nil {
		return m.XPageSize
	}
	return nil
}

func (m *ListAppReq) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ListAppReq) GetPageNum() int32 {
	if x, ok := m.GetXPageNum().(*ListAppReq_PageNum); ok {
		return x.PageNum
	}
	return 0
}

func (m *ListAppReq) GetPageSize() int32 {
	if x, ok := m.GetXPageSize().(*ListAppReq_PageSize); ok {
		return x.PageSize
	}
	return 0
}

func (m *ListAppReq) GetBase() *BaseReq {
	if m != nil {
		return m.Base
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListAppReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListAppReq_PageNum)(nil),
		(*ListAppReq_PageSize)(nil),
	}
}

type ListAppResp struct {
	Infos                []*AppInfo `protobuf:"bytes,1,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total                int64      `protobuf:"varint,10,opt,name=Total,proto3" json:"Total,omitempty"`
	Base                 *BaseResp  `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListAppResp) Reset()         { *m = ListAppResp{} }
func (m *ListAppResp) String() string { return proto.CompactTextString(m) }
func (*ListAppResp) ProtoMessage()    {}
func (*ListAppResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_71612c62e961d0c5, []int{5}
}
func (m *ListAppResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAppResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAppResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAppResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAppResp.Merge(m, src)
}
func (m *ListAppResp) XXX_Size() int {
	return m.Size()
}
func (m *ListAppResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAppResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListAppResp proto.InternalMessageInfo

func (m *ListAppResp) GetInfos() []*AppInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (m *ListAppResp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListAppResp) GetBase() *BaseResp {
	if m != nil {
		return m.Base
	}
	return nil
}

type DeleteAppReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Base                 *BaseReq `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAppReq) Reset()         { *m = DeleteAppReq{} }
func (m *DeleteAppReq) String() string { return proto.CompactTextString(m) }
func (*DeleteAppReq) ProtoMessage()    {}
func (*DeleteAppReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_71612c62e961d0c5, []int{6}
}
func (m *DeleteAppReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAppReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAppReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteAppReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAppReq.Merge(m, src)
}
func (m *DeleteAppReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAppReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAppReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAppReq proto.InternalMessageInfo

func (m *DeleteAppReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteAppReq) GetBase() *BaseReq {
	if m != nil {
		return m.Base
	}
	return nil
}

type DeleteAppResp struct {
	Base                 *BaseResp `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DeleteAppResp) Reset()         { *m = DeleteAppResp{} }
func (m *DeleteAppResp) String() string { return proto.CompactTextString(m) }
func (*DeleteAppResp) ProtoMessage()    {}
func (*DeleteAppResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_71612c62e961d0c5, []int{7}
}
func (m *DeleteAppResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAppResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAppResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteAppResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAppResp.Merge(m, src)
}
func (m *DeleteAppResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAppResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAppResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAppResp proto.InternalMessageInfo

func (m *DeleteAppResp) GetBase() *BaseResp {
	if m != nil {
		return m.Base
	}
	return nil
}

type AppInfo struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	SourceId             string   `protobuf:"bytes,2046,opt,name=SourceId,proto3" json:"SourceId,omitempty"`
	SourceAppId          string   `protobuf:"bytes,2047,opt,name=SourceAppId,proto3" json:"SourceAppId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppInfo) Reset()         { *m = AppInfo{} }
func (m *AppInfo) String() string { return proto.CompactTextString(m) }
func (*AppInfo) ProtoMessage()    {}
func (*AppInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_71612c62e961d0c5, []int{8}
}
func (m *AppInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppInfo.Merge(m, src)
}
func (m *AppInfo) XXX_Size() int {
	return m.Size()
}
func (m *AppInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AppInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AppInfo proto.InternalMessageInfo

func (m *AppInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AppInfo) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *AppInfo) GetSourceAppId() string {
	if m != nil {
		return m.SourceAppId
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateAppReq)(nil), "librarian.CreateAppReq")
	proto.RegisterType((*CreateAppResp)(nil), "librarian.CreateAppResp")
	proto.RegisterType((*UpdateAppReq)(nil), "librarian.UpdateAppReq")
	proto.RegisterType((*UpdateAppResp)(nil), "librarian.UpdateAppResp")
	proto.RegisterType((*ListAppReq)(nil), "librarian.ListAppReq")
	proto.RegisterType((*ListAppResp)(nil), "librarian.ListAppResp")
	proto.RegisterType((*DeleteAppReq)(nil), "librarian.DeleteAppReq")
	proto.RegisterType((*DeleteAppResp)(nil), "librarian.DeleteAppResp")
	proto.RegisterType((*AppInfo)(nil), "librarian.AppInfo")
}

func init() { proto.RegisterFile("librarian/v0/app.proto", fileDescriptor_71612c62e961d0c5) }

var fileDescriptor_71612c62e961d0c5 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xdd, 0x8a, 0xd3, 0x40,
	0x18, 0xed, 0xa4, 0xad, 0x6d, 0xbe, 0xb6, 0x2e, 0x8c, 0x3f, 0x1b, 0x5c, 0xac, 0x35, 0x37, 0x06,
	0x84, 0x56, 0xf4, 0xca, 0xcb, 0x46, 0x61, 0xb7, 0x58, 0x97, 0x32, 0xab, 0xb0, 0x88, 0x50, 0x26,
	0xcd, 0xec, 0x6e, 0xa0, 0xd9, 0x99, 0x4d, 0x26, 0x0a, 0x3e, 0x81, 0xf8, 0x04, 0x5e, 0xef, 0xa5,
	0x4f, 0x22, 0x5e, 0xf9, 0x08, 0x52, 0xef, 0x7c, 0x08, 0x95, 0x99, 0xb4, 0xd3, 0x94, 0x2a, 0xc4,
	0x1b, 0xef, 0xbe, 0x39, 0x73, 0xe6, 0x9c, 0xef, 0xcc, 0x37, 0x09, 0xdc, 0x9c, 0x47, 0x41, 0x42,
	0x93, 0x88, 0x9e, 0x0f, 0xde, 0x3c, 0x18, 0x50, 0x21, 0xfa, 0x22, 0xe1, 0x92, 0x63, 0xdb, 0xe0,
	0xb7, 0x76, 0x37, 0x28, 0x01, 0x4d, 0x59, 0xce, 0x71, 0x9f, 0x41, 0xfb, 0x49, 0xc2, 0xa8, 0x64,
	0x43, 0x21, 0x08, 0xbb, 0xc0, 0x18, 0x6a, 0x87, 0x34, 0x66, 0x0e, 0xea, 0x21, 0xcf, 0x26, 0xba,
	0xc6, 0xf7, 0xa0, 0xe6, 0xd3, 0x94, 0x39, 0xbf, 0x76, 0x7a, 0xc8, 0x6b, 0x3d, 0xc4, 0x7d, 0x23,
	0xd6, 0x57, 0x38, 0x61, 0x17, 0x44, 0x13, 0x5c, 0x0e, 0x9d, 0x82, 0x58, 0x2a, 0xf0, 0x7d, 0xa8,
	0x8d, 0xce, 0x4f, 0xb8, 0x56, 0xdb, 0x3c, 0x38, 0x14, 0x42, 0xed, 0x1c, 0x54, 0x88, 0x66, 0xbc,
	0x47, 0x08, 0x7b, 0x9b, 0x36, 0xd7, 0xb6, 0x6c, 0x52, 0x91, 0xfb, 0xf8, 0x0d, 0xa8, 0x4f, 0xd5,
	0x29, 0x37, 0x82, 0xf6, 0x4b, 0x11, 0xae, 0xbb, 0xbf, 0x0a, 0xd6, 0x28, 0xd4, 0x6e, 0x55, 0x62,
	0x8d, 0x42, 0xbc, 0xbb, 0x4c, 0x63, 0xa9, 0x34, 0xca, 0x4b, 0xad, 0x94, 0x57, 0xd9, 0x48, 0xda,
	0x4a, 0x1d, 0x52, 0xd9, 0x0a, 0x56, 0xff, 0x21, 0xdb, 0x25, 0x02, 0x18, 0x47, 0xa9, 0xdc, 0x1a,
	0x4c, 0xd5, 0x0c, 0xe6, 0x36, 0x34, 0x26, 0xf4, 0x94, 0x1d, 0x66, 0xb1, 0xc3, 0x7a, 0xc8, 0xab,
	0x1f, 0x54, 0xc8, 0x0a, 0x50, 0xa6, 0x77, 0xa0, 0xa9, 0x56, 0x47, 0xd1, 0x3b, 0xe6, 0x9c, 0xe8,
	0x7d, 0x44, 0x0c, 0xf2, 0x4f, 0xb7, 0x00, 0xd0, 0x9c, 0x2e, 0x85, 0xfd, 0x16, 0xd8, 0xd3, 0x95,
	0x88, 0xfb, 0x16, 0x5a, 0xa6, 0xc7, 0x54, 0x60, 0x0f, 0xea, 0xaa, 0xf7, 0x54, 0x77, 0xf9, 0xc7,
	0x4b, 0x21, 0x39, 0x01, 0x5f, 0x87, 0xfa, 0x0b, 0x2e, 0xe9, 0xdc, 0x01, 0x3d, 0xac, 0x7c, 0x51,
	0xfe, 0x9a, 0xdc, 0x7d, 0x68, 0x3f, 0x65, 0x73, 0xf6, 0xd7, 0xc9, 0x97, 0x7e, 0xb3, 0x8f, 0xa1,
	0x53, 0x10, 0xd2, 0x19, 0xca, 0xf6, 0x10, 0x43, 0x63, 0x99, 0x6a, 0xcb, 0x1e, 0x17, 0x1f, 0xde,
	0x72, 0x5a, 0x7b, 0xd0, 0x3c, 0xe2, 0x59, 0x32, 0x63, 0xa3, 0xd0, 0xf9, 0xb9, 0xa3, 0x37, 0x0c,
	0x80, 0xef, 0x42, 0x2b, 0xaf, 0x95, 0x62, 0x98, 0x9b, 0xdb, 0xa4, 0x88, 0xf9, 0x1f, 0xd0, 0xe7,
	0x45, 0x17, 0x7d, 0x5d, 0x74, 0xd1, 0xb7, 0x45, 0x17, 0x7d, 0xfc, 0xde, 0xad, 0x40, 0x67, 0xc6,
	0xe3, 0x75, 0x7f, 0x7e, 0x73, 0x28, 0xc4, 0x44, 0x7d, 0xd6, 0x13, 0xf4, 0x6a, 0xef, 0x34, 0x92,
	0x67, 0x59, 0xd0, 0x9f, 0xf1, 0x78, 0x20, 0xb3, 0xe8, 0x2c, 0x0b, 0x06, 0x86, 0x78, 0x69, 0x55,
	0xc7, 0xc7, 0xc7, 0x9f, 0x2c, 0x7b, 0xbc, 0x42, 0xbe, 0x14, 0xea, 0x85, 0x75, 0xc3, 0xd4, 0xaf,
	0xf7, 0x27, 0xfe, 0x73, 0x26, 0x69, 0x48, 0x25, 0xfd, 0x51, 0xe0, 0x04, 0x57, 0xf4, 0xef, 0xe3,
	0xd1, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x35, 0x66, 0x69, 0x9c, 0x7c, 0x04, 0x00, 0x00,
}

func (m *CreateAppReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAppReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAppReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateAppResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAppResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAppResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.XInfo != nil {
		{
			size := m.XInfo.Size()
			i -= size
			if _, err := m.XInfo.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateAppResp_Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAppResp_Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *UpdateAppReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAppReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAppReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.XName != nil {
		{
			size := m.XName.Size()
			i -= size
			if _, err := m.XName.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Id != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAppReq_Name) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAppReq_Name) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintApp(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *UpdateAppResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAppResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAppResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.XInfo != nil {
		{
			size := m.XInfo.Size()
			i -= size
			if _, err := m.XInfo.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAppResp_Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAppResp_Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListAppReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAppReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAppReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.XPageSize != nil {
		{
			size := m.XPageSize.Size()
			i -= size
			if _, err := m.XPageSize.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XPageNum != nil {
		{
			size := m.XPageNum.Size()
			i -= size
			if _, err := m.XPageNum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Name) > 0 {
		for iNdEx := len(m.Name) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Name[iNdEx])
			copy(dAtA[i:], m.Name[iNdEx])
			i = encodeVarintApp(dAtA, i, uint64(len(m.Name[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListAppReq_PageNum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAppReq_PageNum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintApp(dAtA, i, uint64(m.PageNum))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xa8
	return len(dAtA) - i, nil
}
func (m *ListAppReq_PageSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAppReq_PageSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintApp(dAtA, i, uint64(m.PageSize))
	i--
	dAtA[i] = 0x6
	i--
	dAtA[i] = 0xb0
	return len(dAtA) - i, nil
}
func (m *ListAppResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAppResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAppResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.Total != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteAppReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAppReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteAppReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.Id != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteAppResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAppResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteAppResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}

func (m *AppInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SourceAppId) > 0 {
		i -= len(m.SourceAppId)
		copy(dAtA[i:], m.SourceAppId)
		i = encodeVarintApp(dAtA, i, uint64(len(m.SourceAppId)))
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if len(m.SourceId) > 0 {
		i -= len(m.SourceId)
		copy(dAtA[i:], m.SourceId)
		i = encodeVarintApp(dAtA, i, uint64(len(m.SourceId)))
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xf2
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApp(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintApp(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApp(dAtA []byte, offset int, v uint64) int {
	offset -= sovApp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateAppReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovApp(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAppResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XInfo != nil {
		n += m.XInfo.Size()
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovApp(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAppResp_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}
func (m *UpdateAppReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApp(uint64(m.Id))
	}
	if m.XName != nil {
		n += m.XName.Size()
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovApp(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAppReq_Name) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovApp(uint64(l))
	return n
}
func (m *UpdateAppResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XInfo != nil {
		n += m.XInfo.Size()
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovApp(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAppResp_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}
func (m *ListAppReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovApp(uint64(l))
		}
	}
	if m.XPageNum != nil {
		n += m.XPageNum.Size()
	}
	if m.XPageSize != nil {
		n += m.XPageSize.Size()
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovApp(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAppReq_PageNum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovApp(uint64(m.PageNum))
	return n
}
func (m *ListAppReq_PageSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovApp(uint64(m.PageSize))
	return n
}
func (m *ListAppResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovApp(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovApp(uint64(m.Total))
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovApp(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAppReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApp(uint64(m.Id))
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovApp(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAppResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovApp(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApp(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.SourceId)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	l = len(m.SourceAppId)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApp(x uint64) (n int) {
	return sovApp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateAppReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAppReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAppReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseReq{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAppResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAppResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAppResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AppInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XInfo = &CreateAppResp_Info{v}
			iNdEx = postIndex
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseResp{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAppReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAppReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAppReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XName = &UpdateAppReq_Name{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseReq{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAppResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAppResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAppResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AppInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XInfo = &UpdateAppResp_Info{v}
			iNdEx = postIndex
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseResp{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAppReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAppReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAppReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XPageNum = &ListAppReq_PageNum{v}
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XPageSize = &ListAppReq_PageSize{v}
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseReq{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAppResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAppResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAppResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &AppInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseResp{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAppReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAppReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAppReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseReq{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAppResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAppResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAppResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseResp{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2046:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApp = fmt.Errorf("proto: unexpected end of group")
)
