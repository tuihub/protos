// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: librarian/v0/librarian.proto

package librarian

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LibrarianServiceClient is the client API for LibrarianService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibrarianServiceClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*GetTokenResp, error)
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserResp, error)
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error)
	CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error)
	UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*UpdateAppResp, error)
	ListApp(ctx context.Context, in *ListAppReq, opts ...grpc.CallOption) (*ListAppResp, error)
	DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*DeleteAppResp, error)
	CreateSentinel(ctx context.Context, in *CreateSentinelReq, opts ...grpc.CallOption) (*CreateSentinelResp, error)
	UpdateSentinel(ctx context.Context, in *UpdateSentinelReq, opts ...grpc.CallOption) (*UpdateSentinelResp, error)
	ListSentinel(ctx context.Context, in *ListSentinelReq, opts ...grpc.CallOption) (*ListSentinelResp, error)
	DeleteSentinel(ctx context.Context, in *DeleteSentinelReq, opts ...grpc.CallOption) (*DeleteSentinelResp, error)
	ListSentinelReport(ctx context.Context, in *ListSentinelReportReq, opts ...grpc.CallOption) (*ListSentinelReportResp, error)
	AddAppBind(ctx context.Context, in *AddAppBindReq, opts ...grpc.CallOption) (*AddAppBindResp, error)
	RemoveAppBind(ctx context.Context, in *RemoveAppBindReq, opts ...grpc.CallOption) (*RemoveAppBindResp, error)
	ListAppBind(ctx context.Context, in *ListAppBindReq, opts ...grpc.CallOption) (*ListAppBindResp, error)
}

type librarianServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibrarianServiceClient(cc grpc.ClientConnInterface) LibrarianServiceClient {
	return &librarianServiceClient{cc}
}

func (c *librarianServiceClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianServiceClient) GetToken(ctx context.Context, in *GetTokenReq, opts ...grpc.CallOption) (*GetTokenResp, error) {
	out := new(GetTokenResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianServiceClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error) {
	out := new(CreateUserResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianServiceClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianServiceClient) ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserResp, error) {
	out := new(ListUserResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianServiceClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error) {
	out := new(DeleteUserResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianServiceClient) CreateApp(ctx context.Context, in *CreateAppReq, opts ...grpc.CallOption) (*CreateAppResp, error) {
	out := new(CreateAppResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/CreateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianServiceClient) UpdateApp(ctx context.Context, in *UpdateAppReq, opts ...grpc.CallOption) (*UpdateAppResp, error) {
	out := new(UpdateAppResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/UpdateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianServiceClient) ListApp(ctx context.Context, in *ListAppReq, opts ...grpc.CallOption) (*ListAppResp, error) {
	out := new(ListAppResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/ListApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianServiceClient) DeleteApp(ctx context.Context, in *DeleteAppReq, opts ...grpc.CallOption) (*DeleteAppResp, error) {
	out := new(DeleteAppResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/DeleteApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianServiceClient) CreateSentinel(ctx context.Context, in *CreateSentinelReq, opts ...grpc.CallOption) (*CreateSentinelResp, error) {
	out := new(CreateSentinelResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/CreateSentinel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianServiceClient) UpdateSentinel(ctx context.Context, in *UpdateSentinelReq, opts ...grpc.CallOption) (*UpdateSentinelResp, error) {
	out := new(UpdateSentinelResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/UpdateSentinel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianServiceClient) ListSentinel(ctx context.Context, in *ListSentinelReq, opts ...grpc.CallOption) (*ListSentinelResp, error) {
	out := new(ListSentinelResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/ListSentinel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianServiceClient) DeleteSentinel(ctx context.Context, in *DeleteSentinelReq, opts ...grpc.CallOption) (*DeleteSentinelResp, error) {
	out := new(DeleteSentinelResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/DeleteSentinel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianServiceClient) ListSentinelReport(ctx context.Context, in *ListSentinelReportReq, opts ...grpc.CallOption) (*ListSentinelReportResp, error) {
	out := new(ListSentinelReportResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/ListSentinelReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianServiceClient) AddAppBind(ctx context.Context, in *AddAppBindReq, opts ...grpc.CallOption) (*AddAppBindResp, error) {
	out := new(AddAppBindResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/AddAppBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianServiceClient) RemoveAppBind(ctx context.Context, in *RemoveAppBindReq, opts ...grpc.CallOption) (*RemoveAppBindResp, error) {
	out := new(RemoveAppBindResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/RemoveAppBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianServiceClient) ListAppBind(ctx context.Context, in *ListAppBindReq, opts ...grpc.CallOption) (*ListAppBindResp, error) {
	out := new(ListAppBindResp)
	err := c.cc.Invoke(ctx, "/librarian.LibrarianService/ListAppBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibrarianServiceServer is the server API for LibrarianService service.
// All implementations should embed UnimplementedLibrarianServiceServer
// for forward compatibility
type LibrarianServiceServer interface {
	Ping(context.Context, *PingReq) (*PingResp, error)
	GetToken(context.Context, *GetTokenReq) (*GetTokenResp, error)
	CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error)
	ListUser(context.Context, *ListUserReq) (*ListUserResp, error)
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserResp, error)
	CreateApp(context.Context, *CreateAppReq) (*CreateAppResp, error)
	UpdateApp(context.Context, *UpdateAppReq) (*UpdateAppResp, error)
	ListApp(context.Context, *ListAppReq) (*ListAppResp, error)
	DeleteApp(context.Context, *DeleteAppReq) (*DeleteAppResp, error)
	CreateSentinel(context.Context, *CreateSentinelReq) (*CreateSentinelResp, error)
	UpdateSentinel(context.Context, *UpdateSentinelReq) (*UpdateSentinelResp, error)
	ListSentinel(context.Context, *ListSentinelReq) (*ListSentinelResp, error)
	DeleteSentinel(context.Context, *DeleteSentinelReq) (*DeleteSentinelResp, error)
	ListSentinelReport(context.Context, *ListSentinelReportReq) (*ListSentinelReportResp, error)
	AddAppBind(context.Context, *AddAppBindReq) (*AddAppBindResp, error)
	RemoveAppBind(context.Context, *RemoveAppBindReq) (*RemoveAppBindResp, error)
	ListAppBind(context.Context, *ListAppBindReq) (*ListAppBindResp, error)
}

// UnimplementedLibrarianServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLibrarianServiceServer struct {
}

func (UnimplementedLibrarianServiceServer) Ping(context.Context, *PingReq) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedLibrarianServiceServer) GetToken(context.Context, *GetTokenReq) (*GetTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedLibrarianServiceServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedLibrarianServiceServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedLibrarianServiceServer) ListUser(context.Context, *ListUserReq) (*ListUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedLibrarianServiceServer) DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedLibrarianServiceServer) CreateApp(context.Context, *CreateAppReq) (*CreateAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedLibrarianServiceServer) UpdateApp(context.Context, *UpdateAppReq) (*UpdateAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedLibrarianServiceServer) ListApp(context.Context, *ListAppReq) (*ListAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApp not implemented")
}
func (UnimplementedLibrarianServiceServer) DeleteApp(context.Context, *DeleteAppReq) (*DeleteAppResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedLibrarianServiceServer) CreateSentinel(context.Context, *CreateSentinelReq) (*CreateSentinelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSentinel not implemented")
}
func (UnimplementedLibrarianServiceServer) UpdateSentinel(context.Context, *UpdateSentinelReq) (*UpdateSentinelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSentinel not implemented")
}
func (UnimplementedLibrarianServiceServer) ListSentinel(context.Context, *ListSentinelReq) (*ListSentinelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSentinel not implemented")
}
func (UnimplementedLibrarianServiceServer) DeleteSentinel(context.Context, *DeleteSentinelReq) (*DeleteSentinelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSentinel not implemented")
}
func (UnimplementedLibrarianServiceServer) ListSentinelReport(context.Context, *ListSentinelReportReq) (*ListSentinelReportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSentinelReport not implemented")
}
func (UnimplementedLibrarianServiceServer) AddAppBind(context.Context, *AddAppBindReq) (*AddAppBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppBind not implemented")
}
func (UnimplementedLibrarianServiceServer) RemoveAppBind(context.Context, *RemoveAppBindReq) (*RemoveAppBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAppBind not implemented")
}
func (UnimplementedLibrarianServiceServer) ListAppBind(context.Context, *ListAppBindReq) (*ListAppBindResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppBind not implemented")
}

// UnsafeLibrarianServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibrarianServiceServer will
// result in compilation errors.
type UnsafeLibrarianServiceServer interface {
	mustEmbedUnimplementedLibrarianServiceServer()
}

func RegisterLibrarianServiceServer(s grpc.ServiceRegistrar, srv LibrarianServiceServer) {
	s.RegisterService(&LibrarianService_ServiceDesc, srv)
}

func _LibrarianService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).GetToken(ctx, req.(*GetTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianService_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).ListUser(ctx, req.(*ListUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianService_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).CreateApp(ctx, req.(*CreateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianService_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).UpdateApp(ctx, req.(*UpdateAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianService_ListApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).ListApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/ListApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).ListApp(ctx, req.(*ListAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianService_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).DeleteApp(ctx, req.(*DeleteAppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianService_CreateSentinel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSentinelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).CreateSentinel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/CreateSentinel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).CreateSentinel(ctx, req.(*CreateSentinelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianService_UpdateSentinel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSentinelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).UpdateSentinel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/UpdateSentinel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).UpdateSentinel(ctx, req.(*UpdateSentinelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianService_ListSentinel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSentinelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).ListSentinel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/ListSentinel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).ListSentinel(ctx, req.(*ListSentinelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianService_DeleteSentinel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSentinelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).DeleteSentinel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/DeleteSentinel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).DeleteSentinel(ctx, req.(*DeleteSentinelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianService_ListSentinelReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSentinelReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).ListSentinelReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/ListSentinelReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).ListSentinelReport(ctx, req.(*ListSentinelReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianService_AddAppBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).AddAppBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/AddAppBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).AddAppBind(ctx, req.(*AddAppBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianService_RemoveAppBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAppBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).RemoveAppBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/RemoveAppBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).RemoveAppBind(ctx, req.(*RemoveAppBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianService_ListAppBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppBindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianServiceServer).ListAppBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.LibrarianService/ListAppBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianServiceServer).ListAppBind(ctx, req.(*ListAppBindReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LibrarianService_ServiceDesc is the grpc.ServiceDesc for LibrarianService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibrarianService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "librarian.LibrarianService",
	HandlerType: (*LibrarianServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _LibrarianService_Ping_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _LibrarianService_GetToken_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _LibrarianService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _LibrarianService_UpdateUser_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _LibrarianService_ListUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _LibrarianService_DeleteUser_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _LibrarianService_CreateApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _LibrarianService_UpdateApp_Handler,
		},
		{
			MethodName: "ListApp",
			Handler:    _LibrarianService_ListApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _LibrarianService_DeleteApp_Handler,
		},
		{
			MethodName: "CreateSentinel",
			Handler:    _LibrarianService_CreateSentinel_Handler,
		},
		{
			MethodName: "UpdateSentinel",
			Handler:    _LibrarianService_UpdateSentinel_Handler,
		},
		{
			MethodName: "ListSentinel",
			Handler:    _LibrarianService_ListSentinel_Handler,
		},
		{
			MethodName: "DeleteSentinel",
			Handler:    _LibrarianService_DeleteSentinel_Handler,
		},
		{
			MethodName: "ListSentinelReport",
			Handler:    _LibrarianService_ListSentinelReport_Handler,
		},
		{
			MethodName: "AddAppBind",
			Handler:    _LibrarianService_AddAppBind_Handler,
		},
		{
			MethodName: "RemoveAppBind",
			Handler:    _LibrarianService_RemoveAppBind_Handler,
		},
		{
			MethodName: "ListAppBind",
			Handler:    _LibrarianService_ListAppBind_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "librarian/v0/librarian.proto",
}
