// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: librarian/v0/app_bind.proto

package librarian

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AddAppBindReq struct {
	AppId                int64    `protobuf:"varint,1,opt,name=AppId,proto3" json:"AppId,omitempty"`
	SentinelReportId     int64    `protobuf:"varint,2,opt,name=SentinelReportId,proto3" json:"SentinelReportId,omitempty"`
	Base                 *BaseReq `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddAppBindReq) Reset()         { *m = AddAppBindReq{} }
func (m *AddAppBindReq) String() string { return proto.CompactTextString(m) }
func (*AddAppBindReq) ProtoMessage()    {}
func (*AddAppBindReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca92ac12689b2cc, []int{0}
}
func (m *AddAppBindReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddAppBindReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddAppBindReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddAppBindReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddAppBindReq.Merge(m, src)
}
func (m *AddAppBindReq) XXX_Size() int {
	return m.Size()
}
func (m *AddAppBindReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddAppBindReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddAppBindReq proto.InternalMessageInfo

func (m *AddAppBindReq) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *AddAppBindReq) GetSentinelReportId() int64 {
	if m != nil {
		return m.SentinelReportId
	}
	return 0
}

func (m *AddAppBindReq) GetBase() *BaseReq {
	if m != nil {
		return m.Base
	}
	return nil
}

type AddAppBindResp struct {
	Base                 *BaseResp `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AddAppBindResp) Reset()         { *m = AddAppBindResp{} }
func (m *AddAppBindResp) String() string { return proto.CompactTextString(m) }
func (*AddAppBindResp) ProtoMessage()    {}
func (*AddAppBindResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca92ac12689b2cc, []int{1}
}
func (m *AddAppBindResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddAppBindResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddAppBindResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddAppBindResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddAppBindResp.Merge(m, src)
}
func (m *AddAppBindResp) XXX_Size() int {
	return m.Size()
}
func (m *AddAppBindResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddAppBindResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddAppBindResp proto.InternalMessageInfo

func (m *AddAppBindResp) GetBase() *BaseResp {
	if m != nil {
		return m.Base
	}
	return nil
}

type RemoveAppBindReq struct {
	AppId                int64    `protobuf:"varint,1,opt,name=AppId,proto3" json:"AppId,omitempty"`
	SentinelReportId     int64    `protobuf:"varint,2,opt,name=SentinelReportId,proto3" json:"SentinelReportId,omitempty"`
	Base                 *BaseReq `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveAppBindReq) Reset()         { *m = RemoveAppBindReq{} }
func (m *RemoveAppBindReq) String() string { return proto.CompactTextString(m) }
func (*RemoveAppBindReq) ProtoMessage()    {}
func (*RemoveAppBindReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca92ac12689b2cc, []int{2}
}
func (m *RemoveAppBindReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveAppBindReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveAppBindReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveAppBindReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveAppBindReq.Merge(m, src)
}
func (m *RemoveAppBindReq) XXX_Size() int {
	return m.Size()
}
func (m *RemoveAppBindReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveAppBindReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveAppBindReq proto.InternalMessageInfo

func (m *RemoveAppBindReq) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RemoveAppBindReq) GetSentinelReportId() int64 {
	if m != nil {
		return m.SentinelReportId
	}
	return 0
}

func (m *RemoveAppBindReq) GetBase() *BaseReq {
	if m != nil {
		return m.Base
	}
	return nil
}

type RemoveAppBindResp struct {
	Base                 *BaseResp `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RemoveAppBindResp) Reset()         { *m = RemoveAppBindResp{} }
func (m *RemoveAppBindResp) String() string { return proto.CompactTextString(m) }
func (*RemoveAppBindResp) ProtoMessage()    {}
func (*RemoveAppBindResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca92ac12689b2cc, []int{3}
}
func (m *RemoveAppBindResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveAppBindResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveAppBindResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveAppBindResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveAppBindResp.Merge(m, src)
}
func (m *RemoveAppBindResp) XXX_Size() int {
	return m.Size()
}
func (m *RemoveAppBindResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveAppBindResp.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveAppBindResp proto.InternalMessageInfo

func (m *RemoveAppBindResp) GetBase() *BaseResp {
	if m != nil {
		return m.Base
	}
	return nil
}

type ListAppBindReq struct {
	AppId                []int64  `protobuf:"varint,1,rep,packed,name=AppId,proto3" json:"AppId,omitempty"`
	SentinelReportId     []int64  `protobuf:"varint,2,rep,packed,name=SentinelReportId,proto3" json:"SentinelReportId,omitempty"`
	Base                 *BaseReq `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAppBindReq) Reset()         { *m = ListAppBindReq{} }
func (m *ListAppBindReq) String() string { return proto.CompactTextString(m) }
func (*ListAppBindReq) ProtoMessage()    {}
func (*ListAppBindReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca92ac12689b2cc, []int{4}
}
func (m *ListAppBindReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAppBindReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAppBindReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAppBindReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAppBindReq.Merge(m, src)
}
func (m *ListAppBindReq) XXX_Size() int {
	return m.Size()
}
func (m *ListAppBindReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAppBindReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListAppBindReq proto.InternalMessageInfo

func (m *ListAppBindReq) GetAppId() []int64 {
	if m != nil {
		return m.AppId
	}
	return nil
}

func (m *ListAppBindReq) GetSentinelReportId() []int64 {
	if m != nil {
		return m.SentinelReportId
	}
	return nil
}

func (m *ListAppBindReq) GetBase() *BaseReq {
	if m != nil {
		return m.Base
	}
	return nil
}

type ListAppBindResp struct {
	Infos                []*AppBindInfo `protobuf:"bytes,1,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total                int64          `protobuf:"varint,10,opt,name=Total,proto3" json:"Total,omitempty"`
	Base                 *BaseResp      `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListAppBindResp) Reset()         { *m = ListAppBindResp{} }
func (m *ListAppBindResp) String() string { return proto.CompactTextString(m) }
func (*ListAppBindResp) ProtoMessage()    {}
func (*ListAppBindResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca92ac12689b2cc, []int{5}
}
func (m *ListAppBindResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAppBindResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAppBindResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAppBindResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAppBindResp.Merge(m, src)
}
func (m *ListAppBindResp) XXX_Size() int {
	return m.Size()
}
func (m *ListAppBindResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAppBindResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListAppBindResp proto.InternalMessageInfo

func (m *ListAppBindResp) GetInfos() []*AppBindInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (m *ListAppBindResp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListAppBindResp) GetBase() *BaseResp {
	if m != nil {
		return m.Base
	}
	return nil
}

type AppBindInfo struct {
	AppId                int64    `protobuf:"varint,1,opt,name=AppId,proto3" json:"AppId,omitempty"`
	SentinelReportId     int64    `protobuf:"varint,2,opt,name=SentinelReportId,proto3" json:"SentinelReportId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppBindInfo) Reset()         { *m = AppBindInfo{} }
func (m *AppBindInfo) String() string { return proto.CompactTextString(m) }
func (*AppBindInfo) ProtoMessage()    {}
func (*AppBindInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ca92ac12689b2cc, []int{6}
}
func (m *AppBindInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppBindInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppBindInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppBindInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppBindInfo.Merge(m, src)
}
func (m *AppBindInfo) XXX_Size() int {
	return m.Size()
}
func (m *AppBindInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AppBindInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AppBindInfo proto.InternalMessageInfo

func (m *AppBindInfo) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *AppBindInfo) GetSentinelReportId() int64 {
	if m != nil {
		return m.SentinelReportId
	}
	return 0
}

func init() {
	proto.RegisterType((*AddAppBindReq)(nil), "librarian.AddAppBindReq")
	proto.RegisterType((*AddAppBindResp)(nil), "librarian.AddAppBindResp")
	proto.RegisterType((*RemoveAppBindReq)(nil), "librarian.RemoveAppBindReq")
	proto.RegisterType((*RemoveAppBindResp)(nil), "librarian.RemoveAppBindResp")
	proto.RegisterType((*ListAppBindReq)(nil), "librarian.ListAppBindReq")
	proto.RegisterType((*ListAppBindResp)(nil), "librarian.ListAppBindResp")
	proto.RegisterType((*AppBindInfo)(nil), "librarian.AppBindInfo")
}

func init() { proto.RegisterFile("librarian/v0/app_bind.proto", fileDescriptor_2ca92ac12689b2cc) }

var fileDescriptor_2ca92ac12689b2cc = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xce, 0xc9, 0x4c, 0x2a,
	0x4a, 0x2c, 0xca, 0x4c, 0xcc, 0xd3, 0x2f, 0x33, 0xd0, 0x4f, 0x2c, 0x28, 0x88, 0x4f, 0xca, 0xcc,
	0x4b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x4b, 0x4a, 0x89, 0xa3, 0xa8, 0x4b,
	0x4a, 0x2c, 0x4e, 0x85, 0xa8, 0x51, 0xaa, 0xe2, 0xe2, 0x75, 0x4c, 0x49, 0x71, 0x2c, 0x28, 0x70,
	0xca, 0xcc, 0x4b, 0x09, 0x4a, 0x2d, 0x14, 0x12, 0xe1, 0x62, 0x75, 0x2c, 0x28, 0xf0, 0x4c, 0x91,
	0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x82, 0x70, 0x84, 0xb4, 0xb8, 0x04, 0x82, 0x53, 0xf3, 0x4a,
	0x32, 0xf3, 0x52, 0x73, 0x82, 0x52, 0x0b, 0xf2, 0x8b, 0x4a, 0x3c, 0x53, 0x24, 0x98, 0xc0, 0x0a,
	0x30, 0xc4, 0x85, 0xd4, 0xb9, 0x58, 0x9c, 0x12, 0x8b, 0x53, 0x25, 0xfe, 0xf3, 0x2b, 0x30, 0x6a,
	0x70, 0x1b, 0x09, 0xe9, 0xc1, 0xed, 0xd6, 0x03, 0x89, 0x07, 0xa5, 0x16, 0x06, 0x81, 0x15, 0x28,
	0x59, 0x71, 0xf1, 0x21, 0xdb, 0x5d, 0x5c, 0x20, 0xa4, 0x81, 0xaa, 0x55, 0x18, 0x43, 0x6b, 0x71,
	0x01, 0x54, 0x6f, 0x2d, 0x97, 0x40, 0x50, 0x6a, 0x6e, 0x7e, 0x59, 0xea, 0xc0, 0x38, 0xdd, 0x96,
	0x4b, 0x10, 0xcd, 0x7a, 0x92, 0x5c, 0x5f, 0xcd, 0xc5, 0xe7, 0x93, 0x59, 0x5c, 0x82, 0xdd, 0xed,
	0xcc, 0x84, 0xdc, 0xce, 0x4c, 0x99, 0xdb, 0xeb, 0xb9, 0xf8, 0x51, 0x2c, 0x2f, 0x2e, 0x10, 0xd2,
	0xe1, 0x62, 0xf5, 0xcc, 0x4b, 0xcb, 0x2f, 0x06, 0xdb, 0xce, 0x6d, 0x24, 0x86, 0xa4, 0x17, 0xaa,
	0x0c, 0x24, 0x1d, 0x04, 0x51, 0x04, 0x72, 0x6b, 0x48, 0x7e, 0x49, 0x62, 0x8e, 0x04, 0x17, 0x24,
	0x9c, 0xc1, 0x1c, 0x12, 0x7c, 0xef, 0xcf, 0xc5, 0x8d, 0x64, 0x2a, 0xe5, 0xd1, 0xe6, 0xd4, 0xc7,
	0x78, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c,
	0xc7, 0xc0, 0xc5, 0x9b, 0x9c, 0x9f, 0x8b, 0x70, 0x81, 0x13, 0x0f, 0xd4, 0xc2, 0x00, 0x50, 0xa2,
	0x0f, 0x60, 0x8c, 0x92, 0x4e, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f,
	0x29, 0xcd, 0xcc, 0x28, 0x4d, 0xd2, 0x87, 0x2b, 0x5e, 0xc4, 0xc4, 0xec, 0x13, 0x11, 0xb1, 0x8a,
	0x89, 0xd3, 0x07, 0x26, 0x72, 0x0a, 0x89, 0xfd, 0x88, 0x49, 0x14, 0xce, 0x8e, 0x71, 0x0f, 0x70,
	0xf2, 0x4d, 0x2d, 0x49, 0x4c, 0x49, 0x2c, 0x49, 0x7c, 0x85, 0xa4, 0x26, 0x89, 0x0d, 0x9c, 0xb9,
	0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x9a, 0xc4, 0x27, 0x9f, 0x03, 0x00, 0x00,
}

func (m *AddAppBindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddAppBindReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddAppBindReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAppBind(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.SentinelReportId != 0 {
		i = encodeVarintAppBind(dAtA, i, uint64(m.SentinelReportId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintAppBind(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddAppBindResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddAppBindResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddAppBindResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAppBind(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveAppBindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveAppBindReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveAppBindReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAppBind(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.SentinelReportId != 0 {
		i = encodeVarintAppBind(dAtA, i, uint64(m.SentinelReportId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintAppBind(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveAppBindResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveAppBindResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveAppBindResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAppBind(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}

func (m *ListAppBindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAppBindReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAppBindReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAppBind(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if len(m.SentinelReportId) > 0 {
		dAtA7 := make([]byte, len(m.SentinelReportId)*10)
		var j6 int
		for _, num1 := range m.SentinelReportId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintAppBind(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AppId) > 0 {
		dAtA9 := make([]byte, len(m.AppId)*10)
		var j8 int
		for _, num1 := range m.AppId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintAppBind(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAppBindResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAppBindResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAppBindResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAppBind(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.Total != 0 {
		i = encodeVarintAppBind(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAppBind(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AppBindInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppBindInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppBindInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SentinelReportId != 0 {
		i = encodeVarintAppBind(dAtA, i, uint64(m.SentinelReportId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintAppBind(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAppBind(dAtA []byte, offset int, v uint64) int {
	offset -= sovAppBind(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddAppBindReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovAppBind(uint64(m.AppId))
	}
	if m.SentinelReportId != 0 {
		n += 1 + sovAppBind(uint64(m.SentinelReportId))
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovAppBind(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddAppBindResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovAppBind(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveAppBindReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovAppBind(uint64(m.AppId))
	}
	if m.SentinelReportId != 0 {
		n += 1 + sovAppBind(uint64(m.SentinelReportId))
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovAppBind(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveAppBindResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovAppBind(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAppBindReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AppId) > 0 {
		l = 0
		for _, e := range m.AppId {
			l += sovAppBind(uint64(e))
		}
		n += 1 + sovAppBind(uint64(l)) + l
	}
	if len(m.SentinelReportId) > 0 {
		l = 0
		for _, e := range m.SentinelReportId {
			l += sovAppBind(uint64(e))
		}
		n += 1 + sovAppBind(uint64(l)) + l
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovAppBind(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAppBindResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovAppBind(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovAppBind(uint64(m.Total))
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovAppBind(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppBindInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovAppBind(uint64(m.AppId))
	}
	if m.SentinelReportId != 0 {
		n += 1 + sovAppBind(uint64(m.SentinelReportId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAppBind(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAppBind(x uint64) (n int) {
	return sovAppBind(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddAppBindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppBind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddAppBindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddAppBindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentinelReportId", wireType)
			}
			m.SentinelReportId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SentinelReportId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppBind
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAppBind
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseReq{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppBind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAppBind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddAppBindResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppBind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddAppBindResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddAppBindResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppBind
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAppBind
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseResp{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppBind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAppBind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveAppBindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppBind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveAppBindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveAppBindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentinelReportId", wireType)
			}
			m.SentinelReportId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SentinelReportId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppBind
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAppBind
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseReq{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppBind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAppBind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveAppBindResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppBind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveAppBindResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveAppBindResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppBind
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAppBind
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseResp{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppBind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAppBind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAppBindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppBind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAppBindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAppBindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppBind
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AppId = append(m.AppId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppBind
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAppBind
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAppBind
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AppId) == 0 {
					m.AppId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppBind
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AppId = append(m.AppId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppBind
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SentinelReportId = append(m.SentinelReportId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppBind
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAppBind
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAppBind
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SentinelReportId) == 0 {
					m.SentinelReportId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppBind
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SentinelReportId = append(m.SentinelReportId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SentinelReportId", wireType)
			}
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppBind
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAppBind
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseReq{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppBind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAppBind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAppBindResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppBind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAppBindResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAppBindResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppBind
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAppBind
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &AppBindInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppBind
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAppBind
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseResp{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppBind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAppBind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppBindInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppBind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppBindInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppBindInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentinelReportId", wireType)
			}
			m.SentinelReportId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SentinelReportId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppBind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAppBind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAppBind(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAppBind
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppBind
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppBind
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAppBind
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAppBind
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAppBind
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAppBind        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAppBind          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAppBind = fmt.Errorf("proto: unexpected end of group")
)
