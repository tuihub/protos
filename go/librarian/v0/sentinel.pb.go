// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: librarian/v0/sentinel.proto

package librarian

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateSentinelReq struct {
	// Types that are valid to be assigned to XComment:
	//	*CreateSentinelReq_Comment
	XComment             isCreateSentinelReq_XComment `protobuf_oneof:"_Comment"`
	Base                 *BaseReq                     `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CreateSentinelReq) Reset()         { *m = CreateSentinelReq{} }
func (m *CreateSentinelReq) String() string { return proto.CompactTextString(m) }
func (*CreateSentinelReq) ProtoMessage()    {}
func (*CreateSentinelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca0fcd2bad00398b, []int{0}
}
func (m *CreateSentinelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSentinelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSentinelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSentinelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSentinelReq.Merge(m, src)
}
func (m *CreateSentinelReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateSentinelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSentinelReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSentinelReq proto.InternalMessageInfo

type isCreateSentinelReq_XComment interface {
	isCreateSentinelReq_XComment()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSentinelReq_Comment struct {
	Comment string `protobuf:"bytes,1,opt,name=Comment,proto3,oneof" json:"Comment,omitempty"`
}

func (*CreateSentinelReq_Comment) isCreateSentinelReq_XComment() {}

func (m *CreateSentinelReq) GetXComment() isCreateSentinelReq_XComment {
	if m != nil {
		return m.XComment
	}
	return nil
}

func (m *CreateSentinelReq) GetComment() string {
	if x, ok := m.GetXComment().(*CreateSentinelReq_Comment); ok {
		return x.Comment
	}
	return ""
}

func (m *CreateSentinelReq) GetBase() *BaseReq {
	if m != nil {
		return m.Base
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSentinelReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSentinelReq_Comment)(nil),
	}
}

type CreateSentinelResp struct {
	// Types that are valid to be assigned to XInfo:
	//	*CreateSentinelResp_Info
	XInfo                isCreateSentinelResp_XInfo `protobuf_oneof:"_Info"`
	Base                 *BaseResp                  `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CreateSentinelResp) Reset()         { *m = CreateSentinelResp{} }
func (m *CreateSentinelResp) String() string { return proto.CompactTextString(m) }
func (*CreateSentinelResp) ProtoMessage()    {}
func (*CreateSentinelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca0fcd2bad00398b, []int{1}
}
func (m *CreateSentinelResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSentinelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSentinelResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSentinelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSentinelResp.Merge(m, src)
}
func (m *CreateSentinelResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateSentinelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSentinelResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSentinelResp proto.InternalMessageInfo

type isCreateSentinelResp_XInfo interface {
	isCreateSentinelResp_XInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CreateSentinelResp_Info struct {
	Info *SentinelInfo `protobuf:"bytes,1,opt,name=Info,proto3,oneof" json:"Info,omitempty"`
}

func (*CreateSentinelResp_Info) isCreateSentinelResp_XInfo() {}

func (m *CreateSentinelResp) GetXInfo() isCreateSentinelResp_XInfo {
	if m != nil {
		return m.XInfo
	}
	return nil
}

func (m *CreateSentinelResp) GetInfo() *SentinelInfo {
	if x, ok := m.GetXInfo().(*CreateSentinelResp_Info); ok {
		return x.Info
	}
	return nil
}

func (m *CreateSentinelResp) GetBase() *BaseResp {
	if m != nil {
		return m.Base
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CreateSentinelResp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CreateSentinelResp_Info)(nil),
	}
}

type UpdateSentinelReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Comment              string   `protobuf:"bytes,2,opt,name=Comment,proto3" json:"Comment,omitempty"`
	Status               int32    `protobuf:"varint,3,opt,name=Status,proto3" json:"Status,omitempty"`
	Base                 *BaseReq `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSentinelReq) Reset()         { *m = UpdateSentinelReq{} }
func (m *UpdateSentinelReq) String() string { return proto.CompactTextString(m) }
func (*UpdateSentinelReq) ProtoMessage()    {}
func (*UpdateSentinelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca0fcd2bad00398b, []int{2}
}
func (m *UpdateSentinelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSentinelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSentinelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSentinelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSentinelReq.Merge(m, src)
}
func (m *UpdateSentinelReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSentinelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSentinelReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSentinelReq proto.InternalMessageInfo

func (m *UpdateSentinelReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateSentinelReq) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *UpdateSentinelReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UpdateSentinelReq) GetBase() *BaseReq {
	if m != nil {
		return m.Base
	}
	return nil
}

type UpdateSentinelResp struct {
	// Types that are valid to be assigned to XInfo:
	//	*UpdateSentinelResp_Info
	XInfo                isUpdateSentinelResp_XInfo `protobuf_oneof:"_Info"`
	Base                 *BaseResp                  `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *UpdateSentinelResp) Reset()         { *m = UpdateSentinelResp{} }
func (m *UpdateSentinelResp) String() string { return proto.CompactTextString(m) }
func (*UpdateSentinelResp) ProtoMessage()    {}
func (*UpdateSentinelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca0fcd2bad00398b, []int{3}
}
func (m *UpdateSentinelResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSentinelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSentinelResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSentinelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSentinelResp.Merge(m, src)
}
func (m *UpdateSentinelResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSentinelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSentinelResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSentinelResp proto.InternalMessageInfo

type isUpdateSentinelResp_XInfo interface {
	isUpdateSentinelResp_XInfo()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UpdateSentinelResp_Info struct {
	Info *SentinelInfo `protobuf:"bytes,1,opt,name=Info,proto3,oneof" json:"Info,omitempty"`
}

func (*UpdateSentinelResp_Info) isUpdateSentinelResp_XInfo() {}

func (m *UpdateSentinelResp) GetXInfo() isUpdateSentinelResp_XInfo {
	if m != nil {
		return m.XInfo
	}
	return nil
}

func (m *UpdateSentinelResp) GetInfo() *SentinelInfo {
	if x, ok := m.GetXInfo().(*UpdateSentinelResp_Info); ok {
		return x.Info
	}
	return nil
}

func (m *UpdateSentinelResp) GetBase() *BaseResp {
	if m != nil {
		return m.Base
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UpdateSentinelResp) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UpdateSentinelResp_Info)(nil),
	}
}

type ListSentinelReq struct {
	Token []string `protobuf:"bytes,1,rep,name=Token,proto3" json:"Token,omitempty"`
	// Types that are valid to be assigned to XComment:
	//	*ListSentinelReq_Comment
	XComment isListSentinelReq_XComment `protobuf_oneof:"_Comment"`
	Status   []int32                    `protobuf:"varint,3,rep,packed,name=Status,proto3" json:"Status,omitempty"`
	// Types that are valid to be assigned to XPageNum:
	//	*ListSentinelReq_PageNum
	XPageNum isListSentinelReq_XPageNum `protobuf_oneof:"_PageNum"`
	// Types that are valid to be assigned to XPageSize:
	//	*ListSentinelReq_PageSize
	XPageSize            isListSentinelReq_XPageSize `protobuf_oneof:"_PageSize"`
	Base                 *BaseReq                    `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ListSentinelReq) Reset()         { *m = ListSentinelReq{} }
func (m *ListSentinelReq) String() string { return proto.CompactTextString(m) }
func (*ListSentinelReq) ProtoMessage()    {}
func (*ListSentinelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca0fcd2bad00398b, []int{4}
}
func (m *ListSentinelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSentinelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSentinelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSentinelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSentinelReq.Merge(m, src)
}
func (m *ListSentinelReq) XXX_Size() int {
	return m.Size()
}
func (m *ListSentinelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSentinelReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListSentinelReq proto.InternalMessageInfo

type isListSentinelReq_XComment interface {
	isListSentinelReq_XComment()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isListSentinelReq_XPageNum interface {
	isListSentinelReq_XPageNum()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isListSentinelReq_XPageSize interface {
	isListSentinelReq_XPageSize()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListSentinelReq_Comment struct {
	Comment string `protobuf:"bytes,2,opt,name=Comment,proto3,oneof" json:"Comment,omitempty"`
}
type ListSentinelReq_PageNum struct {
	PageNum int32 `protobuf:"varint,10,opt,name=PageNum,proto3,oneof" json:"PageNum,omitempty"`
}
type ListSentinelReq_PageSize struct {
	PageSize int32 `protobuf:"varint,11,opt,name=PageSize,proto3,oneof" json:"PageSize,omitempty"`
}

func (*ListSentinelReq_Comment) isListSentinelReq_XComment()   {}
func (*ListSentinelReq_PageNum) isListSentinelReq_XPageNum()   {}
func (*ListSentinelReq_PageSize) isListSentinelReq_XPageSize() {}

func (m *ListSentinelReq) GetXComment() isListSentinelReq_XComment {
	if m != nil {
		return m.XComment
	}
	return nil
}
func (m *ListSentinelReq) GetXPageNum() isListSentinelReq_XPageNum {
	if m != nil {
		return m.XPageNum
	}
	return nil
}
func (m *ListSentinelReq) GetXPageSize() isListSentinelReq_XPageSize {
	if m != nil {
		return m.XPageSize
	}
	return nil
}

func (m *ListSentinelReq) GetToken() []string {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *ListSentinelReq) GetComment() string {
	if x, ok := m.GetXComment().(*ListSentinelReq_Comment); ok {
		return x.Comment
	}
	return ""
}

func (m *ListSentinelReq) GetStatus() []int32 {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ListSentinelReq) GetPageNum() int32 {
	if x, ok := m.GetXPageNum().(*ListSentinelReq_PageNum); ok {
		return x.PageNum
	}
	return 0
}

func (m *ListSentinelReq) GetPageSize() int32 {
	if x, ok := m.GetXPageSize().(*ListSentinelReq_PageSize); ok {
		return x.PageSize
	}
	return 0
}

func (m *ListSentinelReq) GetBase() *BaseReq {
	if m != nil {
		return m.Base
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListSentinelReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListSentinelReq_Comment)(nil),
		(*ListSentinelReq_PageNum)(nil),
		(*ListSentinelReq_PageSize)(nil),
	}
}

type ListSentinelResp struct {
	Infos                []*SentinelInfo `protobuf:"bytes,1,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total                int64           `protobuf:"varint,10,opt,name=Total,proto3" json:"Total,omitempty"`
	Base                 *BaseResp       `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListSentinelResp) Reset()         { *m = ListSentinelResp{} }
func (m *ListSentinelResp) String() string { return proto.CompactTextString(m) }
func (*ListSentinelResp) ProtoMessage()    {}
func (*ListSentinelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca0fcd2bad00398b, []int{5}
}
func (m *ListSentinelResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSentinelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSentinelResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSentinelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSentinelResp.Merge(m, src)
}
func (m *ListSentinelResp) XXX_Size() int {
	return m.Size()
}
func (m *ListSentinelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSentinelResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListSentinelResp proto.InternalMessageInfo

func (m *ListSentinelResp) GetInfos() []*SentinelInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (m *ListSentinelResp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListSentinelResp) GetBase() *BaseResp {
	if m != nil {
		return m.Base
	}
	return nil
}

type DeleteSentinelReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Base                 *BaseReq `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSentinelReq) Reset()         { *m = DeleteSentinelReq{} }
func (m *DeleteSentinelReq) String() string { return proto.CompactTextString(m) }
func (*DeleteSentinelReq) ProtoMessage()    {}
func (*DeleteSentinelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca0fcd2bad00398b, []int{6}
}
func (m *DeleteSentinelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteSentinelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteSentinelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteSentinelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSentinelReq.Merge(m, src)
}
func (m *DeleteSentinelReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteSentinelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSentinelReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSentinelReq proto.InternalMessageInfo

func (m *DeleteSentinelReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DeleteSentinelReq) GetBase() *BaseReq {
	if m != nil {
		return m.Base
	}
	return nil
}

type DeleteSentinelResp struct {
	Base                 *BaseResp `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DeleteSentinelResp) Reset()         { *m = DeleteSentinelResp{} }
func (m *DeleteSentinelResp) String() string { return proto.CompactTextString(m) }
func (*DeleteSentinelResp) ProtoMessage()    {}
func (*DeleteSentinelResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca0fcd2bad00398b, []int{7}
}
func (m *DeleteSentinelResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteSentinelResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteSentinelResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteSentinelResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSentinelResp.Merge(m, src)
}
func (m *DeleteSentinelResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteSentinelResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSentinelResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSentinelResp proto.InternalMessageInfo

func (m *DeleteSentinelResp) GetBase() *BaseResp {
	if m != nil {
		return m.Base
	}
	return nil
}

type SentinelInfo struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	Comment              string   `protobuf:"bytes,3,opt,name=Comment,proto3" json:"Comment,omitempty"`
	Status               int32    `protobuf:"varint,4,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SentinelInfo) Reset()         { *m = SentinelInfo{} }
func (m *SentinelInfo) String() string { return proto.CompactTextString(m) }
func (*SentinelInfo) ProtoMessage()    {}
func (*SentinelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca0fcd2bad00398b, []int{8}
}
func (m *SentinelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SentinelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SentinelInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SentinelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentinelInfo.Merge(m, src)
}
func (m *SentinelInfo) XXX_Size() int {
	return m.Size()
}
func (m *SentinelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SentinelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SentinelInfo proto.InternalMessageInfo

func (m *SentinelInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SentinelInfo) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SentinelInfo) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *SentinelInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type ListSentinelReportReq struct {
	SentinelId []int64  `protobuf:"varint,1,rep,packed,name=SentinelId,proto3" json:"SentinelId,omitempty"`
	FileName   []string `protobuf:"bytes,2,rep,name=FileName,proto3" json:"FileName,omitempty"`
	Status     []int32  `protobuf:"varint,3,rep,packed,name=Status,proto3" json:"Status,omitempty"`
	// Types that are valid to be assigned to XPageNum:
	//	*ListSentinelReportReq_PageNum
	XPageNum isListSentinelReportReq_XPageNum `protobuf_oneof:"_PageNum"`
	// Types that are valid to be assigned to XPageSize:
	//	*ListSentinelReportReq_PageSize
	XPageSize            isListSentinelReportReq_XPageSize `protobuf_oneof:"_PageSize"`
	Base                 *BaseReq                          `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ListSentinelReportReq) Reset()         { *m = ListSentinelReportReq{} }
func (m *ListSentinelReportReq) String() string { return proto.CompactTextString(m) }
func (*ListSentinelReportReq) ProtoMessage()    {}
func (*ListSentinelReportReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca0fcd2bad00398b, []int{9}
}
func (m *ListSentinelReportReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSentinelReportReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSentinelReportReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSentinelReportReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSentinelReportReq.Merge(m, src)
}
func (m *ListSentinelReportReq) XXX_Size() int {
	return m.Size()
}
func (m *ListSentinelReportReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSentinelReportReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListSentinelReportReq proto.InternalMessageInfo

type isListSentinelReportReq_XPageNum interface {
	isListSentinelReportReq_XPageNum()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isListSentinelReportReq_XPageSize interface {
	isListSentinelReportReq_XPageSize()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListSentinelReportReq_PageNum struct {
	PageNum int32 `protobuf:"varint,10,opt,name=PageNum,proto3,oneof" json:"PageNum,omitempty"`
}
type ListSentinelReportReq_PageSize struct {
	PageSize int32 `protobuf:"varint,11,opt,name=PageSize,proto3,oneof" json:"PageSize,omitempty"`
}

func (*ListSentinelReportReq_PageNum) isListSentinelReportReq_XPageNum()   {}
func (*ListSentinelReportReq_PageSize) isListSentinelReportReq_XPageSize() {}

func (m *ListSentinelReportReq) GetXPageNum() isListSentinelReportReq_XPageNum {
	if m != nil {
		return m.XPageNum
	}
	return nil
}
func (m *ListSentinelReportReq) GetXPageSize() isListSentinelReportReq_XPageSize {
	if m != nil {
		return m.XPageSize
	}
	return nil
}

func (m *ListSentinelReportReq) GetSentinelId() []int64 {
	if m != nil {
		return m.SentinelId
	}
	return nil
}

func (m *ListSentinelReportReq) GetFileName() []string {
	if m != nil {
		return m.FileName
	}
	return nil
}

func (m *ListSentinelReportReq) GetStatus() []int32 {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *ListSentinelReportReq) GetPageNum() int32 {
	if x, ok := m.GetXPageNum().(*ListSentinelReportReq_PageNum); ok {
		return x.PageNum
	}
	return 0
}

func (m *ListSentinelReportReq) GetPageSize() int32 {
	if x, ok := m.GetXPageSize().(*ListSentinelReportReq_PageSize); ok {
		return x.PageSize
	}
	return 0
}

func (m *ListSentinelReportReq) GetBase() *BaseReq {
	if m != nil {
		return m.Base
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListSentinelReportReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListSentinelReportReq_PageNum)(nil),
		(*ListSentinelReportReq_PageSize)(nil),
	}
}

type ListSentinelReportResp struct {
	Infos                []*SentinelReportInfo `protobuf:"bytes,1,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total                int64                 `protobuf:"varint,10,opt,name=Total,proto3" json:"Total,omitempty"`
	Base                 *BaseResp             `protobuf:"bytes,2047,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ListSentinelReportResp) Reset()         { *m = ListSentinelReportResp{} }
func (m *ListSentinelReportResp) String() string { return proto.CompactTextString(m) }
func (*ListSentinelReportResp) ProtoMessage()    {}
func (*ListSentinelReportResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca0fcd2bad00398b, []int{10}
}
func (m *ListSentinelReportResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSentinelReportResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSentinelReportResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSentinelReportResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSentinelReportResp.Merge(m, src)
}
func (m *ListSentinelReportResp) XXX_Size() int {
	return m.Size()
}
func (m *ListSentinelReportResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSentinelReportResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListSentinelReportResp proto.InternalMessageInfo

func (m *ListSentinelReportResp) GetInfos() []*SentinelReportInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (m *ListSentinelReportResp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListSentinelReportResp) GetBase() *BaseResp {
	if m != nil {
		return m.Base
	}
	return nil
}

type SentinelReportInfo struct {
	Id         int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	SentinelId int64  `protobuf:"varint,2,opt,name=SentinelId,proto3" json:"SentinelId,omitempty"`
	FileName   string `protobuf:"bytes,3,opt,name=FileName,proto3" json:"FileName,omitempty"`
	// Types that are valid to be assigned to XFileSize:
	//	*SentinelReportInfo_FileSize
	XFileSize            isSentinelReportInfo_XFileSize `protobuf_oneof:"_FileSize"`
	Status               int32                          `protobuf:"varint,5,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *SentinelReportInfo) Reset()         { *m = SentinelReportInfo{} }
func (m *SentinelReportInfo) String() string { return proto.CompactTextString(m) }
func (*SentinelReportInfo) ProtoMessage()    {}
func (*SentinelReportInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca0fcd2bad00398b, []int{11}
}
func (m *SentinelReportInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SentinelReportInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SentinelReportInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SentinelReportInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SentinelReportInfo.Merge(m, src)
}
func (m *SentinelReportInfo) XXX_Size() int {
	return m.Size()
}
func (m *SentinelReportInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SentinelReportInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SentinelReportInfo proto.InternalMessageInfo

type isSentinelReportInfo_XFileSize interface {
	isSentinelReportInfo_XFileSize()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SentinelReportInfo_FileSize struct {
	FileSize int64 `protobuf:"varint,4,opt,name=FileSize,proto3,oneof" json:"FileSize,omitempty"`
}

func (*SentinelReportInfo_FileSize) isSentinelReportInfo_XFileSize() {}

func (m *SentinelReportInfo) GetXFileSize() isSentinelReportInfo_XFileSize {
	if m != nil {
		return m.XFileSize
	}
	return nil
}

func (m *SentinelReportInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SentinelReportInfo) GetSentinelId() int64 {
	if m != nil {
		return m.SentinelId
	}
	return 0
}

func (m *SentinelReportInfo) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *SentinelReportInfo) GetFileSize() int64 {
	if x, ok := m.GetXFileSize().(*SentinelReportInfo_FileSize); ok {
		return x.FileSize
	}
	return 0
}

func (m *SentinelReportInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SentinelReportInfo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SentinelReportInfo_FileSize)(nil),
	}
}

func init() {
	proto.RegisterType((*CreateSentinelReq)(nil), "librarian.CreateSentinelReq")
	proto.RegisterType((*CreateSentinelResp)(nil), "librarian.CreateSentinelResp")
	proto.RegisterType((*UpdateSentinelReq)(nil), "librarian.UpdateSentinelReq")
	proto.RegisterType((*UpdateSentinelResp)(nil), "librarian.UpdateSentinelResp")
	proto.RegisterType((*ListSentinelReq)(nil), "librarian.ListSentinelReq")
	proto.RegisterType((*ListSentinelResp)(nil), "librarian.ListSentinelResp")
	proto.RegisterType((*DeleteSentinelReq)(nil), "librarian.DeleteSentinelReq")
	proto.RegisterType((*DeleteSentinelResp)(nil), "librarian.DeleteSentinelResp")
	proto.RegisterType((*SentinelInfo)(nil), "librarian.SentinelInfo")
	proto.RegisterType((*ListSentinelReportReq)(nil), "librarian.ListSentinelReportReq")
	proto.RegisterType((*ListSentinelReportResp)(nil), "librarian.ListSentinelReportResp")
	proto.RegisterType((*SentinelReportInfo)(nil), "librarian.SentinelReportInfo")
}

func init() { proto.RegisterFile("librarian/v0/sentinel.proto", fileDescriptor_ca0fcd2bad00398b) }

var fileDescriptor_ca0fcd2bad00398b = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcb, 0x6e, 0x13, 0x31,
	0x14, 0x8d, 0x67, 0x92, 0x26, 0xb9, 0x41, 0x94, 0x18, 0x68, 0x47, 0xad, 0x92, 0x46, 0xb3, 0x21,
	0x9b, 0x26, 0x55, 0xbb, 0x67, 0x91, 0x22, 0x94, 0x48, 0x55, 0x85, 0x1c, 0xd8, 0xb0, 0x89, 0x66,
	0x88, 0x9b, 0x8e, 0x98, 0x57, 0xc7, 0x1e, 0x24, 0x58, 0x20, 0xb1, 0x63, 0xc3, 0x9e, 0x2f, 0xe0,
	0x5b, 0x58, 0xf2, 0x09, 0x28, 0x6c, 0xe1, 0x1b, 0x40, 0xf6, 0x3c, 0xea, 0xc9, 0x03, 0xc2, 0x43,
	0xec, 0xe2, 0xeb, 0xeb, 0x7b, 0x7c, 0x1e, 0xce, 0xc0, 0xbe, 0xeb, 0xd8, 0x91, 0x15, 0x39, 0x96,
	0xdf, 0x7f, 0x71, 0xd4, 0x67, 0xd4, 0xe7, 0x8e, 0x4f, 0xdd, 0x5e, 0x18, 0x05, 0x3c, 0xc0, 0xf5,
	0x7c, 0x73, 0x6f, 0xb7, 0xd0, 0x67, 0x5b, 0x8c, 0x26, 0x3d, 0xe6, 0x0c, 0x9a, 0xa7, 0x11, 0xb5,
	0x38, 0x1d, 0xa7, 0x67, 0x09, 0xbd, 0xc2, 0x2d, 0xa8, 0x9e, 0x06, 0x9e, 0x47, 0x7d, 0x6e, 0xa0,
	0x0e, 0xea, 0xd6, 0x87, 0x25, 0x92, 0x15, 0xde, 0x22, 0x84, 0xef, 0x41, 0x79, 0x60, 0x31, 0x6a,
	0x7c, 0xdf, 0xee, 0xa0, 0x6e, 0xe3, 0x18, 0xf7, 0xf2, 0xe1, 0x3d, 0x51, 0x27, 0xf4, 0x8a, 0xc8,
	0x86, 0x01, 0x40, 0x6d, 0x92, 0x9e, 0x33, 0x5f, 0x02, 0x5e, 0x04, 0x62, 0x21, 0x3e, 0x82, 0xf2,
	0xc8, 0xbf, 0x08, 0x24, 0x4c, 0xe3, 0x78, 0x57, 0x99, 0x94, 0xb5, 0x89, 0xed, 0x61, 0x89, 0xc8,
	0x36, 0x01, 0xde, 0x2d, 0x82, 0xdf, 0x5e, 0x02, 0x67, 0x61, 0x8a, 0x5e, 0x85, 0xca, 0x44, 0x9c,
	0x32, 0x5f, 0x43, 0xf3, 0x49, 0x38, 0x5d, 0xe0, 0x78, 0x13, 0xb4, 0xd1, 0x54, 0xe2, 0xea, 0x44,
	0x1b, 0x4d, 0xb1, 0x71, 0xcd, 0x59, 0x13, 0x9c, 0x73, 0xc6, 0x78, 0x07, 0xb6, 0xc6, 0xdc, 0xe2,
	0x31, 0x33, 0xf4, 0x0e, 0xea, 0x56, 0x48, 0xba, 0xda, 0x58, 0x06, 0x41, 0x7d, 0x11, 0xff, 0x7f,
	0x51, 0xff, 0x8a, 0x60, 0xfb, 0xcc, 0x61, 0x5c, 0x65, 0x7e, 0x07, 0x2a, 0x8f, 0x83, 0xe7, 0xd4,
	0x37, 0x50, 0x47, 0xef, 0xd6, 0x49, 0xb2, 0x50, 0x3d, 0xd7, 0x56, 0x78, 0xae, 0x8a, 0xa0, 0x2b,
	0x22, 0xb4, 0xa0, 0xfa, 0xc8, 0x9a, 0xd1, 0xf3, 0xd8, 0x33, 0x40, 0xa8, 0x33, 0x44, 0x24, 0x2b,
	0x88, 0x63, 0x07, 0x50, 0x13, 0xab, 0xb1, 0xf3, 0x8a, 0x1a, 0x0d, 0xb9, 0xaf, 0x91, 0xbc, 0xf2,
	0xa7, 0x59, 0x92, 0xbf, 0x53, 0x90, 0x41, 0x03, 0xea, 0x93, 0x6c, 0xa0, 0xf9, 0x06, 0xc1, 0xad,
	0x22, 0x5d, 0x16, 0xe2, 0x43, 0xa8, 0x08, 0x2d, 0x98, 0xe4, 0xbb, 0x5e, 0x69, 0x92, 0x74, 0x25,
	0xf2, 0x70, 0xcb, 0x95, 0x7c, 0x74, 0x92, 0x2c, 0x36, 0xd7, 0xde, 0x3c, 0x83, 0xe6, 0x03, 0xea,
	0xd2, 0x9f, 0xa7, 0x6d, 0xe3, 0xec, 0xdc, 0x07, 0xbc, 0x38, 0x8d, 0x85, 0xbf, 0x71, 0x9b, 0x0b,
	0xb8, 0xa1, 0x92, 0x5c, 0xba, 0x48, 0x1e, 0x86, 0x24, 0xf4, 0x69, 0x18, 0x94, 0xc7, 0xa0, 0xaf,
	0x7b, 0x0c, 0x65, 0xf5, 0x31, 0x98, 0xdf, 0x10, 0xdc, 0x2d, 0x2a, 0x1f, 0x06, 0x11, 0x17, 0xd4,
	0xdb, 0x00, 0xf9, 0x0d, 0xa6, 0xd2, 0x03, 0x9d, 0x28, 0x15, 0xbc, 0x07, 0xb5, 0x87, 0x8e, 0x4b,
	0xcf, 0x2d, 0x8f, 0x1a, 0x9a, 0x4c, 0x64, 0xbe, 0xde, 0x3c, 0x75, 0xa5, 0x5f, 0xa4, 0x0e, 0xfd,
	0x45, 0xea, 0x56, 0x26, 0xed, 0x1d, 0x82, 0x9d, 0x55, 0x7c, 0x59, 0x88, 0x4f, 0x8a, 0x79, 0x6b,
	0xad, 0xc8, 0x5b, 0xd2, 0xfd, 0x2f, 0x53, 0xf7, 0x01, 0x01, 0x5e, 0x9e, 0xbe, 0x64, 0x77, 0xd1,
	0x0c, 0x4d, 0xd6, 0xd7, 0x99, 0x91, 0x38, 0x7f, 0x6d, 0xc6, 0x41, 0xb2, 0x27, 0x55, 0x15, 0xe6,
	0xeb, 0xc3, 0x12, 0xc9, 0x2b, 0xc5, 0xff, 0x88, 0x8a, 0x9a, 0x0d, 0x29, 0x5c, 0xd6, 0x37, 0x38,
	0xfc, 0x38, 0x6f, 0xa3, 0x4f, 0xf3, 0x36, 0xfa, 0x3c, 0x6f, 0xa3, 0xf7, 0x5f, 0xda, 0xa5, 0xa7,
	0xfb, 0x33, 0x87, 0x5f, 0xc6, 0x76, 0xef, 0x59, 0xe0, 0xf5, 0x79, 0xec, 0x5c, 0xc6, 0x76, 0x3f,
	0xa7, 0x69, 0x6f, 0xc9, 0xcf, 0xd4, 0xc9, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xb9, 0x48,
	0x89, 0xe9, 0x06, 0x00, 0x00,
}

func (m *CreateSentinelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSentinelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSentinelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSentinel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.XComment != nil {
		{
			size := m.XComment.Size()
			i -= size
			if _, err := m.XComment.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSentinelReq_Comment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSentinelReq_Comment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Comment)
	copy(dAtA[i:], m.Comment)
	i = encodeVarintSentinel(dAtA, i, uint64(len(m.Comment)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *CreateSentinelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSentinelResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSentinelResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSentinel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.XInfo != nil {
		{
			size := m.XInfo.Size()
			i -= size
			if _, err := m.XInfo.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSentinelResp_Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSentinelResp_Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSentinel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *UpdateSentinelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSentinelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSentinelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSentinel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.Status != 0 {
		i = encodeVarintSentinel(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintSentinel(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintSentinel(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSentinelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSentinelResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSentinelResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSentinel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.XInfo != nil {
		{
			size := m.XInfo.Size()
			i -= size
			if _, err := m.XInfo.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSentinelResp_Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSentinelResp_Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSentinel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ListSentinelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSentinelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSentinelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSentinel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.XPageSize != nil {
		{
			size := m.XPageSize.Size()
			i -= size
			if _, err := m.XPageSize.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XPageNum != nil {
		{
			size := m.XPageNum.Size()
			i -= size
			if _, err := m.XPageNum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Status) > 0 {
		dAtA9 := make([]byte, len(m.Status)*10)
		var j8 int
		for _, num1 := range m.Status {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintSentinel(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x1a
	}
	if m.XComment != nil {
		{
			size := m.XComment.Size()
			i -= size
			if _, err := m.XComment.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Token) > 0 {
		for iNdEx := len(m.Token) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Token[iNdEx])
			copy(dAtA[i:], m.Token[iNdEx])
			i = encodeVarintSentinel(dAtA, i, uint64(len(m.Token[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListSentinelReq_Comment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSentinelReq_Comment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Comment)
	copy(dAtA[i:], m.Comment)
	i = encodeVarintSentinel(dAtA, i, uint64(len(m.Comment)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *ListSentinelReq_PageNum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSentinelReq_PageNum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintSentinel(dAtA, i, uint64(m.PageNum))
	i--
	dAtA[i] = 0x50
	return len(dAtA) - i, nil
}
func (m *ListSentinelReq_PageSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSentinelReq_PageSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintSentinel(dAtA, i, uint64(m.PageSize))
	i--
	dAtA[i] = 0x58
	return len(dAtA) - i, nil
}
func (m *ListSentinelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSentinelResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSentinelResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSentinel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.Total != 0 {
		i = encodeVarintSentinel(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSentinel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteSentinelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSentinelReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteSentinelReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSentinel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.Id != 0 {
		i = encodeVarintSentinel(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteSentinelResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSentinelResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteSentinelResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSentinel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	return len(dAtA) - i, nil
}

func (m *SentinelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SentinelInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SentinelInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintSentinel(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintSentinel(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintSentinel(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintSentinel(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListSentinelReportReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSentinelReportReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSentinelReportReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSentinel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.XPageSize != nil {
		{
			size := m.XPageSize.Size()
			i -= size
			if _, err := m.XPageSize.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XPageNum != nil {
		{
			size := m.XPageNum.Size()
			i -= size
			if _, err := m.XPageNum.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Status) > 0 {
		dAtA15 := make([]byte, len(m.Status)*10)
		var j14 int
		for _, num1 := range m.Status {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintSentinel(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FileName) > 0 {
		for iNdEx := len(m.FileName) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FileName[iNdEx])
			copy(dAtA[i:], m.FileName[iNdEx])
			i = encodeVarintSentinel(dAtA, i, uint64(len(m.FileName[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SentinelId) > 0 {
		dAtA17 := make([]byte, len(m.SentinelId)*10)
		var j16 int
		for _, num1 := range m.SentinelId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		i -= j16
		copy(dAtA[i:], dAtA17[:j16])
		i = encodeVarintSentinel(dAtA, i, uint64(j16))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListSentinelReportReq_PageNum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSentinelReportReq_PageNum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintSentinel(dAtA, i, uint64(m.PageNum))
	i--
	dAtA[i] = 0x50
	return len(dAtA) - i, nil
}
func (m *ListSentinelReportReq_PageSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSentinelReportReq_PageSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintSentinel(dAtA, i, uint64(m.PageSize))
	i--
	dAtA[i] = 0x58
	return len(dAtA) - i, nil
}
func (m *ListSentinelReportResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSentinelReportResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSentinelReportResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSentinel(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7f
		i--
		dAtA[i] = 0xfa
	}
	if m.Total != 0 {
		i = encodeVarintSentinel(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSentinel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SentinelReportInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SentinelReportInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SentinelReportInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintSentinel(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.XFileSize != nil {
		{
			size := m.XFileSize.Size()
			i -= size
			if _, err := m.XFileSize.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintSentinel(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SentinelId != 0 {
		i = encodeVarintSentinel(dAtA, i, uint64(m.SentinelId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintSentinel(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SentinelReportInfo_FileSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SentinelReportInfo_FileSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintSentinel(dAtA, i, uint64(m.FileSize))
	i--
	dAtA[i] = 0x20
	return len(dAtA) - i, nil
}
func encodeVarintSentinel(dAtA []byte, offset int, v uint64) int {
	offset -= sovSentinel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateSentinelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XComment != nil {
		n += m.XComment.Size()
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovSentinel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateSentinelReq_Comment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Comment)
	n += 1 + l + sovSentinel(uint64(l))
	return n
}
func (m *CreateSentinelResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XInfo != nil {
		n += m.XInfo.Size()
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovSentinel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateSentinelResp_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovSentinel(uint64(l))
	}
	return n
}
func (m *UpdateSentinelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSentinel(uint64(m.Id))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovSentinel(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovSentinel(uint64(m.Status))
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovSentinel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSentinelResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XInfo != nil {
		n += m.XInfo.Size()
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovSentinel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSentinelResp_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovSentinel(uint64(l))
	}
	return n
}
func (m *ListSentinelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Token) > 0 {
		for _, s := range m.Token {
			l = len(s)
			n += 1 + l + sovSentinel(uint64(l))
		}
	}
	if m.XComment != nil {
		n += m.XComment.Size()
	}
	if len(m.Status) > 0 {
		l = 0
		for _, e := range m.Status {
			l += sovSentinel(uint64(e))
		}
		n += 1 + sovSentinel(uint64(l)) + l
	}
	if m.XPageNum != nil {
		n += m.XPageNum.Size()
	}
	if m.XPageSize != nil {
		n += m.XPageSize.Size()
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovSentinel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSentinelReq_Comment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Comment)
	n += 1 + l + sovSentinel(uint64(l))
	return n
}
func (m *ListSentinelReq_PageNum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSentinel(uint64(m.PageNum))
	return n
}
func (m *ListSentinelReq_PageSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSentinel(uint64(m.PageSize))
	return n
}
func (m *ListSentinelResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovSentinel(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovSentinel(uint64(m.Total))
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovSentinel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteSentinelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSentinel(uint64(m.Id))
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovSentinel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteSentinelResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovSentinel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SentinelInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSentinel(uint64(m.Id))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSentinel(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovSentinel(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovSentinel(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSentinelReportReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SentinelId) > 0 {
		l = 0
		for _, e := range m.SentinelId {
			l += sovSentinel(uint64(e))
		}
		n += 1 + sovSentinel(uint64(l)) + l
	}
	if len(m.FileName) > 0 {
		for _, s := range m.FileName {
			l = len(s)
			n += 1 + l + sovSentinel(uint64(l))
		}
	}
	if len(m.Status) > 0 {
		l = 0
		for _, e := range m.Status {
			l += sovSentinel(uint64(e))
		}
		n += 1 + sovSentinel(uint64(l)) + l
	}
	if m.XPageNum != nil {
		n += m.XPageNum.Size()
	}
	if m.XPageSize != nil {
		n += m.XPageSize.Size()
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovSentinel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSentinelReportReq_PageNum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSentinel(uint64(m.PageNum))
	return n
}
func (m *ListSentinelReportReq_PageSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSentinel(uint64(m.PageSize))
	return n
}
func (m *ListSentinelReportResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovSentinel(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovSentinel(uint64(m.Total))
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 2 + l + sovSentinel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SentinelReportInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSentinel(uint64(m.Id))
	}
	if m.SentinelId != 0 {
		n += 1 + sovSentinel(uint64(m.SentinelId))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovSentinel(uint64(l))
	}
	if m.XFileSize != nil {
		n += m.XFileSize.Size()
	}
	if m.Status != 0 {
		n += 1 + sovSentinel(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SentinelReportInfo_FileSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSentinel(uint64(m.FileSize))
	return n
}

func sovSentinel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSentinel(x uint64) (n int) {
	return sovSentinel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateSentinelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSentinel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSentinelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSentinelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XComment = &CreateSentinelReq_Comment{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseReq{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSentinel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSentinel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSentinelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSentinel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSentinelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSentinelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SentinelInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XInfo = &CreateSentinelResp_Info{v}
			iNdEx = postIndex
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseResp{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSentinel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSentinel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSentinelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSentinel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSentinelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSentinelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseReq{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSentinel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSentinel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSentinelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSentinel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSentinelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSentinelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SentinelInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XInfo = &UpdateSentinelResp_Info{v}
			iNdEx = postIndex
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseResp{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSentinel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSentinel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSentinelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSentinel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSentinelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSentinelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XComment = &ListSentinelReq_Comment{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSentinel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Status = append(m.Status, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSentinel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSentinel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSentinel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Status) == 0 {
					m.Status = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSentinel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Status = append(m.Status, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XPageNum = &ListSentinelReq_PageNum{v}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XPageSize = &ListSentinelReq_PageSize{v}
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseReq{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSentinel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSentinel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSentinelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSentinel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSentinelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSentinelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &SentinelInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseResp{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSentinel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSentinel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSentinelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSentinel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSentinelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSentinelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseReq{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSentinel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSentinel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSentinelResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSentinel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSentinelResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSentinelResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseResp{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSentinel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSentinel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SentinelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSentinel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SentinelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SentinelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSentinel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSentinel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSentinelReportReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSentinel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSentinelReportReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSentinelReportReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSentinel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SentinelId = append(m.SentinelId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSentinel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSentinel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSentinel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SentinelId) == 0 {
					m.SentinelId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSentinel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SentinelId = append(m.SentinelId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SentinelId", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = append(m.FileName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSentinel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Status = append(m.Status, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSentinel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSentinel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSentinel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Status) == 0 {
					m.Status = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSentinel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Status = append(m.Status, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XPageNum = &ListSentinelReportReq_PageNum{v}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XPageSize = &ListSentinelReportReq_PageSize{v}
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseReq{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSentinel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSentinel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSentinelReportResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSentinel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSentinelReportResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSentinelReportResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &SentinelReportInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2047:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &BaseResp{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSentinel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSentinel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SentinelReportInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSentinel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SentinelReportInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SentinelReportInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentinelId", wireType)
			}
			m.SentinelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SentinelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XFileSize = &SentinelReportInfo_FileSize{v}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSentinel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSentinel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSentinel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSentinel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSentinel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSentinel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSentinel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSentinel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSentinel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSentinel = fmt.Errorf("proto: unexpected end of group")
)
