// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sentinel/v0/sentinel.proto

package sentinel

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReportReq struct {
	Infos                []*ReportInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ReportReq) Reset()         { *m = ReportReq{} }
func (m *ReportReq) String() string { return proto.CompactTextString(m) }
func (*ReportReq) ProtoMessage()    {}
func (*ReportReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba28d6ae1f7c3cf, []int{0}
}
func (m *ReportReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportReq.Merge(m, src)
}
func (m *ReportReq) XXX_Size() int {
	return m.Size()
}
func (m *ReportReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReportReq proto.InternalMessageInfo

func (m *ReportReq) GetInfos() []*ReportInfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

type ReportResp struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportResp) Reset()         { *m = ReportResp{} }
func (m *ReportResp) String() string { return proto.CompactTextString(m) }
func (*ReportResp) ProtoMessage()    {}
func (*ReportResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba28d6ae1f7c3cf, []int{1}
}
func (m *ReportResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportResp.Merge(m, src)
}
func (m *ReportResp) XXX_Size() int {
	return m.Size()
}
func (m *ReportResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportResp.DiscardUnknown(m)
}

var xxx_messageInfo_ReportResp proto.InternalMessageInfo

func (m *ReportResp) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type ReportInfo struct {
	FileName string `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`
	// Types that are valid to be assigned to XFileSize:
	//	*ReportInfo_FileSize
	XFileSize            isReportInfo_XFileSize `protobuf_oneof:"_FileSize"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ReportInfo) Reset()         { *m = ReportInfo{} }
func (m *ReportInfo) String() string { return proto.CompactTextString(m) }
func (*ReportInfo) ProtoMessage()    {}
func (*ReportInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ba28d6ae1f7c3cf, []int{2}
}
func (m *ReportInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReportInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportInfo.Merge(m, src)
}
func (m *ReportInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReportInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReportInfo proto.InternalMessageInfo

type isReportInfo_XFileSize interface {
	isReportInfo_XFileSize()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ReportInfo_FileSize struct {
	FileSize int64 `protobuf:"varint,2,opt,name=FileSize,proto3,oneof" json:"FileSize,omitempty"`
}

func (*ReportInfo_FileSize) isReportInfo_XFileSize() {}

func (m *ReportInfo) GetXFileSize() isReportInfo_XFileSize {
	if m != nil {
		return m.XFileSize
	}
	return nil
}

func (m *ReportInfo) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ReportInfo) GetFileSize() int64 {
	if x, ok := m.GetXFileSize().(*ReportInfo_FileSize); ok {
		return x.FileSize
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ReportInfo) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ReportInfo_FileSize)(nil),
	}
}

func init() {
	proto.RegisterType((*ReportReq)(nil), "sentinel.ReportReq")
	proto.RegisterType((*ReportResp)(nil), "sentinel.ReportResp")
	proto.RegisterType((*ReportInfo)(nil), "sentinel.ReportInfo")
}

func init() { proto.RegisterFile("sentinel/v0/sentinel.proto", fileDescriptor_6ba28d6ae1f7c3cf) }

var fileDescriptor_6ba28d6ae1f7c3cf = []byte{
	// 248 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0x4e, 0xcd, 0x2b,
	0xc9, 0xcc, 0x4b, 0xcd, 0xd1, 0x2f, 0x33, 0xd0, 0x87, 0xb1, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2,
	0x85, 0x38, 0x60, 0x7c, 0x25, 0x73, 0x2e, 0xce, 0xa0, 0xd4, 0x82, 0xfc, 0xa2, 0x92, 0xa0, 0xd4,
	0x42, 0x21, 0x2d, 0x2e, 0xd6, 0xcc, 0xbc, 0xb4, 0xfc, 0x62, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e,
	0x23, 0x11, 0x3d, 0xb8, 0x36, 0x88, 0x1a, 0xcf, 0xbc, 0xb4, 0xfc, 0x20, 0x88, 0x12, 0x25, 0x15,
	0x2e, 0x2e, 0x98, 0xc6, 0xe2, 0x02, 0x21, 0x31, 0x2e, 0xb6, 0xe2, 0x92, 0xc4, 0x92, 0x52, 0x90,
	0x56, 0x46, 0x0d, 0x8e, 0x20, 0x28, 0x4f, 0x29, 0x0c, 0xa6, 0x0a, 0xa4, 0x55, 0x48, 0x8a, 0x8b,
	0xc3, 0x2d, 0x33, 0x27, 0xd5, 0x2f, 0x31, 0x37, 0x15, 0xac, 0x8e, 0x33, 0x08, 0xce, 0x17, 0x92,
	0x87, 0xc8, 0x05, 0x67, 0x56, 0xa5, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x30, 0x7b, 0x30, 0x04, 0xc1,
	0x45, 0x3a, 0x18, 0x19, 0x9d, 0xb8, 0xb9, 0x38, 0xe3, 0x61, 0x7c, 0x23, 0x37, 0x2e, 0xfe, 0x60,
	0xa8, 0xdb, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x8c, 0xb9, 0xd8, 0x20, 0x56, 0x09,
	0x09, 0xa3, 0xbb, 0x3b, 0x28, 0xb5, 0x50, 0x4a, 0x04, 0x53, 0xb0, 0xb8, 0xc0, 0x49, 0xe7, 0xc4,
	0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58, 0x8e, 0x21,
	0x4a, 0x2a, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0xbf, 0xa4, 0x34, 0x33,
	0xa3, 0x34, 0x09, 0x1e, 0x78, 0x49, 0x6c, 0xe0, 0xd0, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x2e, 0x2e, 0x87, 0xbf, 0x5b, 0x01, 0x00, 0x00,
}

func (m *ReportReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSentinel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReportResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReportInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.XFileSize != nil {
		{
			size := m.XFileSize.Size()
			i -= size
			if _, err := m.XFileSize.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintSentinel(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReportInfo_FileSize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReportInfo_FileSize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintSentinel(dAtA, i, uint64(m.FileSize))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func encodeVarintSentinel(dAtA []byte, offset int, v uint64) int {
	offset -= sovSentinel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReportReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovSentinel(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovSentinel(uint64(l))
	}
	if m.XFileSize != nil {
		n += m.XFileSize.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportInfo_FileSize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovSentinel(uint64(m.FileSize))
	return n
}

func sovSentinel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSentinel(x uint64) (n int) {
	return sovSentinel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReportReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSentinel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &ReportInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSentinel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSentinel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSentinel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSentinel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSentinel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSentinel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSentinel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSentinel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XFileSize = &ReportInfo_FileSize{v}
		default:
			iNdEx = preIndex
			skippy, err := skipSentinel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSentinel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSentinel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSentinel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSentinel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSentinel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSentinel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSentinel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSentinel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSentinel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSentinel = fmt.Errorf("proto: unexpected end of group")
)
