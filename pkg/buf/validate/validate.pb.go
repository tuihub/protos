// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: buf/validate/validate.proto

package validate

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate/priv"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WellKnownRegex contain some well-known patterns.
type KnownRegex int32

const (
	KnownRegex_KNOWN_REGEX_UNSPECIFIED KnownRegex = 0
	// HTTP header name as defined by [RFC 7230](https://tools.ietf.org/html/rfc7230#section-3.2).
	KnownRegex_KNOWN_REGEX_HTTP_HEADER_NAME KnownRegex = 1
	// HTTP header value as defined by [RFC 7230](https://tools.ietf.org/html/rfc7230#section-3.2.4).
	KnownRegex_KNOWN_REGEX_HTTP_HEADER_VALUE KnownRegex = 2
)

// Enum value maps for KnownRegex.
var (
	KnownRegex_name = map[int32]string{
		0: "KNOWN_REGEX_UNSPECIFIED",
		1: "KNOWN_REGEX_HTTP_HEADER_NAME",
		2: "KNOWN_REGEX_HTTP_HEADER_VALUE",
	}
	KnownRegex_value = map[string]int32{
		"KNOWN_REGEX_UNSPECIFIED":       0,
		"KNOWN_REGEX_HTTP_HEADER_NAME":  1,
		"KNOWN_REGEX_HTTP_HEADER_VALUE": 2,
	}
)

func (x KnownRegex) Enum() *KnownRegex {
	p := new(KnownRegex)
	*p = x
	return p
}

func (x KnownRegex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KnownRegex) Descriptor() protoreflect.EnumDescriptor {
	return file_buf_validate_validate_proto_enumTypes[0].Descriptor()
}

func (KnownRegex) Type() protoreflect.EnumType {
	return &file_buf_validate_validate_proto_enumTypes[0]
}

func (x KnownRegex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KnownRegex.Descriptor instead.
func (KnownRegex) EnumDescriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{0}
}

// MessageConstraints represents validation rules that are applied to the entire message.
// It includes disabling options and a list of Constraint messages representing Common Expression Language (CEL) validation rules.
type MessageConstraints struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// disabled is a boolean flag that, when set to true, nullifies any validation rules for this message.
	// This includes any fields within the message that would otherwise support validation.
	//
	// ```proto
	//
	//	message MyMessage {
	//	  // validation will be bypassed for this message
	//	  option (buf.validate.message).disabled = true;
	//	}
	//
	// ```
	Disabled *bool `protobuf:"varint,1,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
	// cel is a repeated field of type Constraint. Each Constraint specifies a validation rule to be applied to this message.
	// These constraints are written in Common Expression Language (CEL) syntax. For more information on
	// CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
	//
	// ```proto
	//
	//	message MyMessage {
	//	 // The field `foo` must be greater than 42.
	//	 option (buf.validate.message).cel = {
	//	   id: "my_message.value",
	//	   message: "value must be greater than 42",
	//	   expression: "this.foo > 42",
	//	 };
	//	 optional int32 foo = 1;
	//	}
	//
	// ```
	Cel           []*Constraint `protobuf:"bytes,3,rep,name=cel,proto3" json:"cel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageConstraints) Reset() {
	*x = MessageConstraints{}
	mi := &file_buf_validate_validate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageConstraints) ProtoMessage() {}

func (x *MessageConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageConstraints.ProtoReflect.Descriptor instead.
func (*MessageConstraints) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{0}
}

func (x *MessageConstraints) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

func (x *MessageConstraints) GetCel() []*Constraint {
	if x != nil {
		return x.Cel
	}
	return nil
}

// The `OneofConstraints` message type enables you to manage constraints for
// oneof fields in your protobuf messages. Use the `required` constraint to ensure
// that exactly one of the fields within a oneof is set; validation will fail
// if none of the fields in the oneof are set:
type OneofConstraints struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `required` is an optional boolean attribute that ensures that
	// exactly one of the field options in a oneof is set; validation fails if
	// no fields in the oneof are set.
	//
	// ```proto
	//
	//	message MyMessage {
	//	 oneof value {
	//	   // The field `a` or `b` must be set.
	//	   option [(buf.validate.oneof).required = true]
	//	   optional string a = 1;
	//	   optional string b = 2;
	//	 }
	//	}
	//
	// ```
	Required      *bool `protobuf:"varint,1,opt,name=required,proto3,oneof" json:"required,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OneofConstraints) Reset() {
	*x = OneofConstraints{}
	mi := &file_buf_validate_validate_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OneofConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofConstraints) ProtoMessage() {}

func (x *OneofConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofConstraints.ProtoReflect.Descriptor instead.
func (*OneofConstraints) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{1}
}

func (x *OneofConstraints) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

// FieldRules encapsulates the rules for each type of field. Depending on the
// field, the correct set should be used to ensure proper validations.
type FieldConstraints struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `Constraint` is a repeated field used to represent a textual expression
	// in the Common Expression Language (CEL) syntax. For more information on
	// CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
	//
	// ```proto
	//
	//	message MyMessage {
	//	 // The field `value` must be greater than 42.
	//	 optional int32 value = 1 [(buf.validate.field).cel = {
	//	   id: "my_message.value",
	//	   message: "value must be greater than 42",
	//	   expression: "this > 42",
	//	 }];
	//	}
	//
	// ```
	Cel []*Constraint `protobuf:"bytes,23,rep,name=cel,proto3" json:"cel,omitempty"`
	// `skipped` is an optional boolean attribute that specifies that the
	// validation rules of this field should not be evaluated. If skipped is set to
	// true, any validation rules set for the field will be ignored.
	//
	// ```proto
	//
	//	message MyMessage {
	//	 // The field `value` must not be set.
	//	 optional MyOtherMessage value = 1 [(buf.validate.field).skipped = true];
	//	}
	//
	// ```
	Skipped bool `protobuf:"varint,24,opt,name=skipped,proto3" json:"skipped,omitempty"`
	// `required` is an optional boolean attribute that specifies that
	// this field must be set. If required is set to true, the field value must
	// not be empty; otherwise, an error message will be generated.
	//
	// ```proto
	//
	//	message MyMessage {
	//	 // The field `value` must be set.
	//	 optional MyOtherMessage value = 1 [(buf.validate.field).required = true];
	//	}
	//
	// ```
	Required bool `protobuf:"varint,25,opt,name=required,proto3" json:"required,omitempty"`
	// `ignore_empty` specifies that the validation rules of this field should be
	// evaluated only if the field isn't empty. If the field is empty, no validation
	// rules are applied.
	//
	// ```proto
	//
	//	message MyRepeated {
	//	 // The field `value` validation rules should be evaluated only if the field isn't empty.
	//	 repeated string value = 1 [(buf.validate.field).ignore_empty = true];
	//	}
	//
	// ```
	IgnoreEmpty bool `protobuf:"varint,26,opt,name=ignore_empty,json=ignoreEmpty,proto3" json:"ignore_empty,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*FieldConstraints_Float
	//	*FieldConstraints_Double
	//	*FieldConstraints_Int32
	//	*FieldConstraints_Int64
	//	*FieldConstraints_Uint32
	//	*FieldConstraints_Uint64
	//	*FieldConstraints_Sint32
	//	*FieldConstraints_Sint64
	//	*FieldConstraints_Fixed32
	//	*FieldConstraints_Fixed64
	//	*FieldConstraints_Sfixed32
	//	*FieldConstraints_Sfixed64
	//	*FieldConstraints_Bool
	//	*FieldConstraints_String_
	//	*FieldConstraints_Bytes
	//	*FieldConstraints_Enum
	//	*FieldConstraints_Repeated
	//	*FieldConstraints_Map
	//	*FieldConstraints_Any
	//	*FieldConstraints_Duration
	//	*FieldConstraints_Timestamp
	Type          isFieldConstraints_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldConstraints) Reset() {
	*x = FieldConstraints{}
	mi := &file_buf_validate_validate_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldConstraints) ProtoMessage() {}

func (x *FieldConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldConstraints.ProtoReflect.Descriptor instead.
func (*FieldConstraints) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{2}
}

func (x *FieldConstraints) GetCel() []*Constraint {
	if x != nil {
		return x.Cel
	}
	return nil
}

func (x *FieldConstraints) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *FieldConstraints) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *FieldConstraints) GetIgnoreEmpty() bool {
	if x != nil {
		return x.IgnoreEmpty
	}
	return false
}

func (x *FieldConstraints) GetType() isFieldConstraints_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FieldConstraints) GetFloat() *FloatRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Float); ok {
			return x.Float
		}
	}
	return nil
}

func (x *FieldConstraints) GetDouble() *DoubleRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Double); ok {
			return x.Double
		}
	}
	return nil
}

func (x *FieldConstraints) GetInt32() *Int32Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Int32); ok {
			return x.Int32
		}
	}
	return nil
}

func (x *FieldConstraints) GetInt64() *Int64Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Int64); ok {
			return x.Int64
		}
	}
	return nil
}

func (x *FieldConstraints) GetUint32() *UInt32Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Uint32); ok {
			return x.Uint32
		}
	}
	return nil
}

func (x *FieldConstraints) GetUint64() *UInt64Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Uint64); ok {
			return x.Uint64
		}
	}
	return nil
}

func (x *FieldConstraints) GetSint32() *SInt32Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Sint32); ok {
			return x.Sint32
		}
	}
	return nil
}

func (x *FieldConstraints) GetSint64() *SInt64Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Sint64); ok {
			return x.Sint64
		}
	}
	return nil
}

func (x *FieldConstraints) GetFixed32() *Fixed32Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Fixed32); ok {
			return x.Fixed32
		}
	}
	return nil
}

func (x *FieldConstraints) GetFixed64() *Fixed64Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Fixed64); ok {
			return x.Fixed64
		}
	}
	return nil
}

func (x *FieldConstraints) GetSfixed32() *SFixed32Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Sfixed32); ok {
			return x.Sfixed32
		}
	}
	return nil
}

func (x *FieldConstraints) GetSfixed64() *SFixed64Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Sfixed64); ok {
			return x.Sfixed64
		}
	}
	return nil
}

func (x *FieldConstraints) GetBool() *BoolRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Bool); ok {
			return x.Bool
		}
	}
	return nil
}

func (x *FieldConstraints) GetString_() *StringRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_String_); ok {
			return x.String_
		}
	}
	return nil
}

func (x *FieldConstraints) GetBytes() *BytesRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Bytes); ok {
			return x.Bytes
		}
	}
	return nil
}

func (x *FieldConstraints) GetEnum() *EnumRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Enum); ok {
			return x.Enum
		}
	}
	return nil
}

func (x *FieldConstraints) GetRepeated() *RepeatedRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Repeated); ok {
			return x.Repeated
		}
	}
	return nil
}

func (x *FieldConstraints) GetMap() *MapRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Map); ok {
			return x.Map
		}
	}
	return nil
}

func (x *FieldConstraints) GetAny() *AnyRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Any); ok {
			return x.Any
		}
	}
	return nil
}

func (x *FieldConstraints) GetDuration() *DurationRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Duration); ok {
			return x.Duration
		}
	}
	return nil
}

func (x *FieldConstraints) GetTimestamp() *TimestampRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Timestamp); ok {
			return x.Timestamp
		}
	}
	return nil
}

type isFieldConstraints_Type interface {
	isFieldConstraints_Type()
}

type FieldConstraints_Float struct {
	// Scalar Field Types
	Float *FloatRules `protobuf:"bytes,1,opt,name=float,proto3,oneof"`
}

type FieldConstraints_Double struct {
	Double *DoubleRules `protobuf:"bytes,2,opt,name=double,proto3,oneof"`
}

type FieldConstraints_Int32 struct {
	Int32 *Int32Rules `protobuf:"bytes,3,opt,name=int32,proto3,oneof"`
}

type FieldConstraints_Int64 struct {
	Int64 *Int64Rules `protobuf:"bytes,4,opt,name=int64,proto3,oneof"`
}

type FieldConstraints_Uint32 struct {
	Uint32 *UInt32Rules `protobuf:"bytes,5,opt,name=uint32,proto3,oneof"`
}

type FieldConstraints_Uint64 struct {
	Uint64 *UInt64Rules `protobuf:"bytes,6,opt,name=uint64,proto3,oneof"`
}

type FieldConstraints_Sint32 struct {
	Sint32 *SInt32Rules `protobuf:"bytes,7,opt,name=sint32,proto3,oneof"`
}

type FieldConstraints_Sint64 struct {
	Sint64 *SInt64Rules `protobuf:"bytes,8,opt,name=sint64,proto3,oneof"`
}

type FieldConstraints_Fixed32 struct {
	Fixed32 *Fixed32Rules `protobuf:"bytes,9,opt,name=fixed32,proto3,oneof"`
}

type FieldConstraints_Fixed64 struct {
	Fixed64 *Fixed64Rules `protobuf:"bytes,10,opt,name=fixed64,proto3,oneof"`
}

type FieldConstraints_Sfixed32 struct {
	Sfixed32 *SFixed32Rules `protobuf:"bytes,11,opt,name=sfixed32,proto3,oneof"`
}

type FieldConstraints_Sfixed64 struct {
	Sfixed64 *SFixed64Rules `protobuf:"bytes,12,opt,name=sfixed64,proto3,oneof"`
}

type FieldConstraints_Bool struct {
	Bool *BoolRules `protobuf:"bytes,13,opt,name=bool,proto3,oneof"`
}

type FieldConstraints_String_ struct {
	String_ *StringRules `protobuf:"bytes,14,opt,name=string,proto3,oneof"`
}

type FieldConstraints_Bytes struct {
	Bytes *BytesRules `protobuf:"bytes,15,opt,name=bytes,proto3,oneof"`
}

type FieldConstraints_Enum struct {
	// Complex Field Types
	Enum *EnumRules `protobuf:"bytes,16,opt,name=enum,proto3,oneof"`
}

type FieldConstraints_Repeated struct {
	Repeated *RepeatedRules `protobuf:"bytes,18,opt,name=repeated,proto3,oneof"`
}

type FieldConstraints_Map struct {
	Map *MapRules `protobuf:"bytes,19,opt,name=map,proto3,oneof"`
}

type FieldConstraints_Any struct {
	// Well-Known Field Types
	Any *AnyRules `protobuf:"bytes,20,opt,name=any,proto3,oneof"`
}

type FieldConstraints_Duration struct {
	Duration *DurationRules `protobuf:"bytes,21,opt,name=duration,proto3,oneof"`
}

type FieldConstraints_Timestamp struct {
	Timestamp *TimestampRules `protobuf:"bytes,22,opt,name=timestamp,proto3,oneof"`
}

func (*FieldConstraints_Float) isFieldConstraints_Type() {}

func (*FieldConstraints_Double) isFieldConstraints_Type() {}

func (*FieldConstraints_Int32) isFieldConstraints_Type() {}

func (*FieldConstraints_Int64) isFieldConstraints_Type() {}

func (*FieldConstraints_Uint32) isFieldConstraints_Type() {}

func (*FieldConstraints_Uint64) isFieldConstraints_Type() {}

func (*FieldConstraints_Sint32) isFieldConstraints_Type() {}

func (*FieldConstraints_Sint64) isFieldConstraints_Type() {}

func (*FieldConstraints_Fixed32) isFieldConstraints_Type() {}

func (*FieldConstraints_Fixed64) isFieldConstraints_Type() {}

func (*FieldConstraints_Sfixed32) isFieldConstraints_Type() {}

func (*FieldConstraints_Sfixed64) isFieldConstraints_Type() {}

func (*FieldConstraints_Bool) isFieldConstraints_Type() {}

func (*FieldConstraints_String_) isFieldConstraints_Type() {}

func (*FieldConstraints_Bytes) isFieldConstraints_Type() {}

func (*FieldConstraints_Enum) isFieldConstraints_Type() {}

func (*FieldConstraints_Repeated) isFieldConstraints_Type() {}

func (*FieldConstraints_Map) isFieldConstraints_Type() {}

func (*FieldConstraints_Any) isFieldConstraints_Type() {}

func (*FieldConstraints_Duration) isFieldConstraints_Type() {}

func (*FieldConstraints_Timestamp) isFieldConstraints_Type() {}

// FloatRules describes the constraints applied to `float` values. These
// rules may also be applied to the `google.protobuf.FloatValue` Well-Known-Type.
type FloatRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyFloat {
	//	 // value must equal 42.0
	//	  float value = 1 [(buf.validate.field).float.const = 42.0];
	//	}
	//
	// ```
	Const *float32 `protobuf:"fixed32,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFloat {
	//	 // value must be less than 10.0
	//	  float value = 1 [(buf.validate.field).float.lt = 10.0];
	//	}
	//
	// ```
	Lt *float32 `protobuf:"fixed32,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyFloat {
	//	 // value must be less than or equal to 10.0
	//	  float value = 1 [(buf.validate.field).float.lte = 10.0];
	//	}
	//
	// ```
	Lte *float32 `protobuf:"fixed32,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFloat {
	//	 // value must be greater than 5.0 [float.gt]
	//	 float value = 1 [(buf.validate.field).float.gt = 5.0];
	//
	//	 // value must be greater than 5 and less than 10.0 [float.gt_lt]
	//	 float other_value = 2 [(buf.validate.field).float = { gt: 5.0, lt: 10.0 }];
	//
	//	 // value must be greater than 10 or less than 5.0 [float.gt_lt_exclusive]
	//	 float another_value = 3 [(buf.validate.field).float = { gt: 10.0, lt: 5.0 }];
	//	}
	//
	// ```
	Gt *float32 `protobuf:"fixed32,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFloat {
	//	 // value must be greater than or equal to 5.0 [float.gte]
	//	 float value = 1 [(buf.validate.field).float.gte = 5.0];
	//
	//	 // value must be greater than or equal to 5.0 and less than 10.0 [float.gte_lt]
	//	 float other_value = 2 [(buf.validate.field).float = { gte: 5.0, lt: 10.0 }];
	//
	//	 // value must be greater than or equal to 10.0 or less than 5.0 [float.gte_lt_exclusive]
	//	 float another_value = 3 [(buf.validate.field).float = { gte: 10.0, lt: 5.0 }];
	//	}
	//
	// ```
	Gte *float32 `protobuf:"fixed32,5,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message
	// is generated.
	//
	// ```proto
	//
	//	message MyFloat {
	//	 // value must be in list [1.0, 2.0, 3.0]
	//	 repeated float value = 1 (buf.validate.field).float = { in: [1.0, 2.0, 3.0] };
	//	}
	//
	// ```
	In []float32 `protobuf:"fixed32,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// `in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyFloat {
	//	 // value must not be in list [1.0, 2.0, 3.0]
	//	 repeated float value = 1 (buf.validate.field).float = { not_in: [1.0, 2.0, 3.0] };
	//	}
	//
	// ```
	NotIn         []float32 `protobuf:"fixed32,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FloatRules) Reset() {
	*x = FloatRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FloatRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatRules) ProtoMessage() {}

func (x *FloatRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatRules.ProtoReflect.Descriptor instead.
func (*FloatRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{3}
}

func (x *FloatRules) GetConst() float32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *FloatRules) GetLt() float32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *FloatRules) GetLte() float32 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *FloatRules) GetGt() float32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *FloatRules) GetGte() float32 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *FloatRules) GetIn() []float32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *FloatRules) GetNotIn() []float32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// DoubleRules describes the constraints applied to `double` values. These
// rules may also be applied to the `google.protobuf.DoubleValue` Well-Known-Type.
type DoubleRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyDouble {
	//	 // value must equal 42.0
	//	  double value = 1 [(buf.validate.field).double.const = 42.0];
	//	}
	//
	// ```
	Const *float64 `protobuf:"fixed64,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyDouble {
	//	 // value must be less than 10.0
	//	  double value = 1 [(buf.validate.field).double.lt = 10.0];
	//	}
	//
	// ```
	Lt *float64 `protobuf:"fixed64,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` requires the field value to be less than or equal to the specified value
	// (field <= value). If the field value is greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyDouble {
	//	 // value must be less than or equal to 10.0
	//	  double value = 1 [(buf.validate.field).double.lte = 10.0];
	//	}
	//
	// ```
	Lte *float64 `protobuf:"fixed64,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or `lte`,
	// the range is reversed, and the field value must be outside the specified
	// range. If the field value doesn't meet the required conditions, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyDouble {
	//	 // value must be greater than 5.0 [double.gt]
	//	 double value = 1 [(buf.validate.field).double.gt = 5.0];
	//
	//	 // value must be greater than 5 and less than 10.0 [double.gt_lt]
	//	 double other_value = 2 [(buf.validate.field).double = { gt: 5.0, lt: 10.0 }];
	//
	//	 // value must be greater than 10 or less than 5.0 [double.gt_lt_exclusive]
	//	 double another_value = 3 [(buf.validate.field).double = { gt: 10.0, lt: 5.0 }];
	//	}
	//
	// ```
	Gt *float64 `protobuf:"fixed64,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyDouble {
	//	 // value must be greater than or equal to 5.0 [double.gte]
	//	 double value = 1 [(buf.validate.field).double.gte = 5.0];
	//
	//	 // value must be greater than or equal to 5.0 and less than 10.0 [double.gte_lt]
	//	 double other_value = 2 [(buf.validate.field).double = { gte: 5.0, lt: 10.0 }];
	//
	//	 // value must be greater than or equal to 10.0 or less than 5.0 [double.gte_lt_exclusive]
	//	 double another_value = 3 [(buf.validate.field).double = { gte: 10.0, lt: 5.0 }];
	//	}
	//
	// ```
	Gte *float64 `protobuf:"fixed64,5,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MyDouble {
	//	 // value must be in list [1.0, 2.0, 3.0]
	//	 repeated double value = 1 (buf.validate.field).double = { in: [1.0, 2.0, 3.0] };
	//	}
	//
	// ```
	In []float64 `protobuf:"fixed64,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyDouble {
	//	 // value must not be in list [1.0, 2.0, 3.0]
	//	 repeated double value = 1 (buf.validate.field).double = { not_in: [1.0, 2.0, 3.0] };
	//	}
	//
	// ```
	NotIn         []float64 `protobuf:"fixed64,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DoubleRules) Reset() {
	*x = DoubleRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoubleRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleRules) ProtoMessage() {}

func (x *DoubleRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleRules.ProtoReflect.Descriptor instead.
func (*DoubleRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{4}
}

func (x *DoubleRules) GetConst() float64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *DoubleRules) GetLt() float64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *DoubleRules) GetLte() float64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *DoubleRules) GetGt() float64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *DoubleRules) GetGte() float64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *DoubleRules) GetIn() []float64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *DoubleRules) GetNotIn() []float64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// Int32Rules describes the constraints applied to `int32` values. These
// rules may also be applied to the `google.protobuf.Int32Value` Well-Known-Type.
type Int32Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyInt32 {
	//	 // value must equal 42
	//	  int32 value = 1 [(buf.validate.field).int32.const = 42];
	//	}
	//
	// ```
	Const *int32 `protobuf:"varint,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// `lt` requires the field value to be less than the specified value (field
	// < value). If the field value is equal to or greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyInt32 {
	//	 // value must be less than 10
	//	  int32 value = 1 [(buf.validate.field).int32.lt = 10];
	//	}
	//
	// ```
	Lt *int32 `protobuf:"varint,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyInt32 {
	//	 // value must be less than or equal to 10
	//	  int32 value = 1 [(buf.validate.field).int32.lte = 10];
	//	}
	//
	// ```
	Lte *int32 `protobuf:"varint,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyInt32 {
	//	 // value must be greater than 5 [int32.gt]
	//	 int32 value = 1 [(buf.validate.field).int32.gt = 5];
	//
	//	 // value must be greater than 5 and less than 10 [int32.gt_lt]
	//	 int32 other_value = 2 [(buf.validate.field).int32 = { gt: 5, lt: 10 }];
	//
	//	 // value must be greater than 10 or less than 5 [int32.gt_lt_exclusive]
	//	 int32 another_value = 3 [(buf.validate.field).int32 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt *int32 `protobuf:"varint,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` requires the field value to be greater than or equal to the specified value
	// (exclusive). If the value of `gte` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyInt32 {
	//	 // value must be greater than or equal to 5 [int32.gte]
	//	 int32 value = 1 [(buf.validate.field).int32.gte = 5];
	//
	//	 // value must be greater than or equal to 5 and less than 10 [int32.gte_lt]
	//	 int32 other_value = 2 [(buf.validate.field).int32 = { gte: 5, lt: 10 }];
	//
	//	 // value must be greater than or equal to 10 or less than 5 [int32.gte_lt_exclusive]
	//	 int32 another_value = 3 [(buf.validate.field).int32 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte *int32 `protobuf:"varint,5,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MyInt32 {
	//	 // value must be in list [1, 2, 3]
	//	 repeated int32 value = 1 (buf.validate.field).int32 = { in: [1, 2, 3] };
	//	}
	//
	// ```
	In []int32 `protobuf:"varint,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error message
	// is generated.
	//
	// ```proto
	//
	//	message MyInt32 {
	//	 // value must not be in list [1, 2, 3]
	//	 repeated int32 value = 1 (buf.validate.field).int32 = { not_in: [1, 2, 3] };
	//	}
	//
	// ```
	NotIn         []int32 `protobuf:"varint,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int32Rules) Reset() {
	*x = Int32Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Rules) ProtoMessage() {}

func (x *Int32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Rules.ProtoReflect.Descriptor instead.
func (*Int32Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{5}
}

func (x *Int32Rules) GetConst() int32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *Int32Rules) GetLt() int32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Int32Rules) GetLte() int32 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *Int32Rules) GetGt() int32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Int32Rules) GetGte() int32 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *Int32Rules) GetIn() []int32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *Int32Rules) GetNotIn() []int32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// Int64Rules describes the constraints applied to `int64` values. These
// rules may also be applied to the `google.protobuf.Int64Value` Well-Known-Type.
type Int64Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyInt64 {
	//	 // value must equal 42
	//	  int64 value = 1 [(buf.validate.field).int64.const = 42];
	//	}
	//
	// ```
	Const *int64 `protobuf:"varint,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyInt64 {
	//	 // value must be less than 10
	//	  int64 value = 1 [(buf.validate.field).int64.lt = 10];
	//	}
	//
	// ```
	Lt *int64 `protobuf:"varint,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyInt64 {
	//	 // value must be less than or equal to 10
	//	  int64 value = 1 [(buf.validate.field).int64.lte = 10];
	//	}
	//
	// ```
	Lte *int64 `protobuf:"varint,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyInt64 {
	//	 // value must be greater than 5 [int64.gt]
	//	 int64 value = 1 [(buf.validate.field).int64.gt = 5];
	//
	//	 // value must be greater than 5 and less than 10 [int64.gt_lt]
	//	 int64 other_value = 2 [(buf.validate.field).int64 = { gt: 5, lt: 10 }];
	//
	//	 // value must be greater than 10 or less than 5 [int64.gt_lt_exclusive]
	//	 int64 another_value = 3 [(buf.validate.field).int64 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt *int64 `protobuf:"varint,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyInt64 {
	//	 // value must be greater than or equal to 5 [int64.gte]
	//	 int64 value = 1 [(buf.validate.field).int64.gte = 5];
	//
	//	 // value must be greater than or equal to 5 and less than 10 [int64.gte_lt]
	//	 int64 other_value = 2 [(buf.validate.field).int64 = { gte: 5, lt: 10 }];
	//
	//	 // value must be greater than or equal to 10 or less than 5 [int64.gte_lt_exclusive]
	//	 int64 another_value = 3 [(buf.validate.field).int64 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte *int64 `protobuf:"varint,5,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MyInt64 {
	//	 // value must be in list [1, 2, 3]
	//	 repeated int64 value = 1 (buf.validate.field).int64 = { in: [1, 2, 3] };
	//	}
	//
	// ```
	In []int64 `protobuf:"varint,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyInt64 {
	//	 // value must not be in list [1, 2, 3]
	//	 repeated int64 value = 1 (buf.validate.field).int64 = { not_in: [1, 2, 3] };
	//	}
	//
	// ```
	NotIn         []int64 `protobuf:"varint,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Int64Rules) Reset() {
	*x = Int64Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64Rules) ProtoMessage() {}

func (x *Int64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64Rules.ProtoReflect.Descriptor instead.
func (*Int64Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{6}
}

func (x *Int64Rules) GetConst() int64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *Int64Rules) GetLt() int64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Int64Rules) GetLte() int64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *Int64Rules) GetGt() int64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Int64Rules) GetGte() int64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *Int64Rules) GetIn() []int64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *Int64Rules) GetNotIn() []int64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// UInt32Rules describes the constraints applied to `uint32` values. These
// rules may also be applied to the `google.protobuf.UInt32Value` Well-Known-Type.
type UInt32Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt32 {
	//	 // value must equal 42
	//	  uint32 value = 1 [(buf.validate.field).uint32.const = 42];
	//	}
	//
	// ```
	Const *uint32 `protobuf:"varint,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt32 {
	//	 // value must be less than 10
	//	  uint32 value = 1 [(buf.validate.field).uint32.lt = 10];
	//	}
	//
	// ```
	Lt *uint32 `protobuf:"varint,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt32 {
	//	 // value must be less than or equal to 10
	//	  uint32 value = 1 [(buf.validate.field).uint32.lte = 10];
	//	}
	//
	// ```
	Lte *uint32 `protobuf:"varint,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt32 {
	//	 // value must be greater than 5 [uint32.gt]
	//	 uint32 value = 1 [(buf.validate.field).uint32.gt = 5];
	//
	//	 // value must be greater than 5 and less than 10 [uint32.gt_lt]
	//	 uint32 other_value = 2 [(buf.validate.field).uint32 = { gt: 5, lt: 10 }];
	//
	//	 // value must be greater than 10 or less than 5 [uint32.gt_lt_exclusive]
	//	 uint32 another_value = 3 [(buf.validate.field).uint32 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt *uint32 `protobuf:"varint,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt32 {
	//	 // value must be greater than or equal to 5 [uint32.gte]
	//	 uint32 value = 1 [(buf.validate.field).uint32.gte = 5];
	//
	//	 // value must be greater than or equal to 5 and less than 10 [uint32.gte_lt]
	//	 uint32 other_value = 2 [(buf.validate.field).uint32 = { gte: 5, lt: 10 }];
	//
	//	 // value must be greater than or equal to 10 or less than 5 [uint32.gte_lt_exclusive]
	//	 uint32 another_value = 3 [(buf.validate.field).uint32 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte *uint32 `protobuf:"varint,5,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MyUInt32 {
	//	 // value must be in list [1, 2, 3]
	//	 repeated uint32 value = 1 (buf.validate.field).uint32 = { in: [1, 2, 3] };
	//	}
	//
	// ```
	In []uint32 `protobuf:"varint,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyUInt32 {
	//	 // value must not be in list [1, 2, 3]
	//	 repeated uint32 value = 1 (buf.validate.field).uint32 = { not_in: [1, 2, 3] };
	//	}
	//
	// ```
	NotIn         []uint32 `protobuf:"varint,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UInt32Rules) Reset() {
	*x = UInt32Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UInt32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt32Rules) ProtoMessage() {}

func (x *UInt32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt32Rules.ProtoReflect.Descriptor instead.
func (*UInt32Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{7}
}

func (x *UInt32Rules) GetConst() uint32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *UInt32Rules) GetLt() uint32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *UInt32Rules) GetLte() uint32 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *UInt32Rules) GetGt() uint32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *UInt32Rules) GetGte() uint32 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *UInt32Rules) GetIn() []uint32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *UInt32Rules) GetNotIn() []uint32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// UInt64Rules describes the constraints applied to `uint64` values. These
// rules may also be applied to the `google.protobuf.UInt64Value` Well-Known-Type.
type UInt64Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt64 {
	//	 // value must equal 42
	//	  uint64 value = 1 [(buf.validate.field).uint64.const = 42];
	//	}
	//
	// ```
	Const *uint64 `protobuf:"varint,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt64 {
	//	 // value must be less than 10
	//	  uint64 value = 1 [(buf.validate.field).uint64.lt = 10];
	//	}
	//
	// ```
	Lt *uint64 `protobuf:"varint,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt64 {
	//	 // value must be less than or equal to 10
	//	  uint64 value = 1 [(buf.validate.field).uint64.lte = 10];
	//	}
	//
	// ```
	Lte *uint64 `protobuf:"varint,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt64 {
	//	 // value must be greater than 5 [uint64.gt]
	//	 uint64 value = 1 [(buf.validate.field).uint64.gt = 5];
	//
	//	 // value must be greater than 5 and less than 10 [uint64.gt_lt]
	//	 uint64 other_value = 2 [(buf.validate.field).uint64 = { gt: 5, lt: 10 }];
	//
	//	 // value must be greater than 10 or less than 5 [uint64.gt_lt_exclusive]
	//	 uint64 another_value = 3 [(buf.validate.field).uint64 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt *uint64 `protobuf:"varint,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt64 {
	//	 // value must be greater than or equal to 5 [uint64.gte]
	//	 uint64 value = 1 [(buf.validate.field).uint64.gte = 5];
	//
	//	 // value must be greater than or equal to 5 and less than 10 [uint64.gte_lt]
	//	 uint64 other_value = 2 [(buf.validate.field).uint64 = { gte: 5, lt: 10 }];
	//
	//	 // value must be greater than or equal to 10 or less than 5 [uint64.gte_lt_exclusive]
	//	 uint64 another_value = 3 [(buf.validate.field).uint64 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte *uint64 `protobuf:"varint,5,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MyUInt64 {
	//	 // value must be in list [1, 2, 3]
	//	 repeated uint64 value = 1 (buf.validate.field).uint64 = { in: [1, 2, 3] };
	//	}
	//
	// ```
	In []uint64 `protobuf:"varint,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyUInt64 {
	//	 // value must not be in list [1, 2, 3]
	//	 repeated uint64 value = 1 (buf.validate.field).uint64 = { not_in: [1, 2, 3] };
	//	}
	//
	// ```
	NotIn         []uint64 `protobuf:"varint,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UInt64Rules) Reset() {
	*x = UInt64Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UInt64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt64Rules) ProtoMessage() {}

func (x *UInt64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt64Rules.ProtoReflect.Descriptor instead.
func (*UInt64Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{8}
}

func (x *UInt64Rules) GetConst() uint64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *UInt64Rules) GetLt() uint64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *UInt64Rules) GetLte() uint64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *UInt64Rules) GetGt() uint64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *UInt64Rules) GetGte() uint64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *UInt64Rules) GetIn() []uint64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *UInt64Rules) GetNotIn() []uint64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// SInt32Rules describes the constraints applied to `sint32` values.
type SInt32Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MySInt32 {
	//	 // value must equal 42
	//	  sint32 value = 1 [(buf.validate.field).sint32.const = 42];
	//	}
	//
	// ```
	Const *int32 `protobuf:"zigzag32,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// `lt` requires the field value to be less than the specified value (field
	// < value). If the field value is equal to or greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MySInt32 {
	//	 // value must be less than 10
	//	  sint32 value = 1 [(buf.validate.field).sint32.lt = 10];
	//	}
	//
	// ```
	Lt *int32 `protobuf:"zigzag32,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MySInt32 {
	//	 // value must be less than or equal to 10
	//	  sint32 value = 1 [(buf.validate.field).sint32.lte = 10];
	//	}
	//
	// ```
	Lte *int32 `protobuf:"zigzag32,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySInt32 {
	//	 // value must be greater than 5 [sint32.gt]
	//	 sint32 value = 1 [(buf.validate.field).sint32.gt = 5];
	//
	//	 // value must be greater than 5 and less than 10 [sint32.gt_lt]
	//	 sint32 other_value = 2 [(buf.validate.field).sint32 = { gt: 5, lt: 10 }];
	//
	//	 // value must be greater than 10 or less than 5 [sint32.gt_lt_exclusive]
	//	 sint32 another_value = 3 [(buf.validate.field).sint32 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt *int32 `protobuf:"zigzag32,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySInt32 {
	//	 // value must be greater than or equal to 5 [sint32.gte]
	//	 sint32 value = 1 [(buf.validate.field).sint32.gte = 5];
	//
	//	 // value must be greater than or equal to 5 and less than 10 [sint32.gte_lt]
	//	 sint32 other_value = 2 [(buf.validate.field).sint32 = { gte: 5, lt: 10 }];
	//
	//	 // value must be greater than or equal to 10 or less than 5 [sint32.gte_lt_exclusive]
	//	 sint32 another_value = 3 [(buf.validate.field).sint32 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte *int32 `protobuf:"zigzag32,5,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MySInt32 {
	//	 // value must be in list [1, 2, 3]
	//	 repeated sint32 value = 1 (buf.validate.field).sint32 = { in: [1, 2, 3] };
	//	}
	//
	// ```
	In []int32 `protobuf:"zigzag32,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MySInt32 {
	//	 // value must not be in list [1, 2, 3]
	//	 repeated sint32 value = 1 (buf.validate.field).sint32 = { not_in: [1, 2, 3] };
	//	}
	//
	// ```
	NotIn         []int32 `protobuf:"zigzag32,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SInt32Rules) Reset() {
	*x = SInt32Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SInt32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SInt32Rules) ProtoMessage() {}

func (x *SInt32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SInt32Rules.ProtoReflect.Descriptor instead.
func (*SInt32Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{9}
}

func (x *SInt32Rules) GetConst() int32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *SInt32Rules) GetLt() int32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *SInt32Rules) GetLte() int32 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *SInt32Rules) GetGt() int32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *SInt32Rules) GetGte() int32 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *SInt32Rules) GetIn() []int32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *SInt32Rules) GetNotIn() []int32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// SInt64Rules describes the constraints applied to `sint64` values.
type SInt64Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MySInt64 {
	//	 // value must equal 42
	//	  sint64 value = 1 [(buf.validate.field).sint64.const = 42];
	//	}
	//
	// ```
	Const *int64 `protobuf:"zigzag64,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// `lt` requires the field value to be less than the specified value (field
	// < value). If the field value is equal to or greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MySInt64 {
	//	 // value must be less than 10
	//	  sint64 value = 1 [(buf.validate.field).sint64.lt = 10];
	//	}
	//
	// ```
	Lt *int64 `protobuf:"zigzag64,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MySInt64 {
	//	 // value must be less than or equal to 10
	//	  sint64 value = 1 [(buf.validate.field).sint64.lte = 10];
	//	}
	//
	// ```
	Lte *int64 `protobuf:"zigzag64,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySInt64 {
	//	 // value must be greater than 5 [sint64.gt]
	//	 sint64 value = 1 [(buf.validate.field).sint64.gt = 5];
	//
	//	 // value must be greater than 5 and less than 10 [sint64.gt_lt]
	//	 sint64 other_value = 2 [(buf.validate.field).sint64 = { gt: 5, lt: 10 }];
	//
	//	 // value must be greater than 10 or less than 5 [sint64.gt_lt_exclusive]
	//	 sint64 another_value = 3 [(buf.validate.field).sint64 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt *int64 `protobuf:"zigzag64,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySInt64 {
	//	 // value must be greater than or equal to 5 [sint64.gte]
	//	 sint64 value = 1 [(buf.validate.field).sint64.gte = 5];
	//
	//	 // value must be greater than or equal to 5 and less than 10 [sint64.gte_lt]
	//	 sint64 other_value = 2 [(buf.validate.field).sint64 = { gte: 5, lt: 10 }];
	//
	//	 // value must be greater than or equal to 10 or less than 5 [sint64.gte_lt_exclusive]
	//	 sint64 another_value = 3 [(buf.validate.field).sint64 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte *int64 `protobuf:"zigzag64,5,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message
	// is generated.
	//
	// ```proto
	//
	//	message MySInt64 {
	//	 // value must be in list [1, 2, 3]
	//	 repeated sint64 value = 1 (buf.validate.field).sint64 = { in: [1, 2, 3] };
	//	}
	//
	// ```
	In []int64 `protobuf:"zigzag64,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MySInt64 {
	//	 // value must not be in list [1, 2, 3]
	//	 repeated sint64 value = 1 (buf.validate.field).sint64 = { not_in: [1, 2, 3] };
	//	}
	//
	// ```
	NotIn         []int64 `protobuf:"zigzag64,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SInt64Rules) Reset() {
	*x = SInt64Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SInt64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SInt64Rules) ProtoMessage() {}

func (x *SInt64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SInt64Rules.ProtoReflect.Descriptor instead.
func (*SInt64Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{10}
}

func (x *SInt64Rules) GetConst() int64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *SInt64Rules) GetLt() int64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *SInt64Rules) GetLte() int64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *SInt64Rules) GetGt() int64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *SInt64Rules) GetGte() int64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *SInt64Rules) GetIn() []int64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *SInt64Rules) GetNotIn() []int64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// Fixed32Rules describes the constraints applied to `fixed32` values.
type Fixed32Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value.
	// If the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed32 {
	//	 // value must equal 42
	//	  fixed32 value = 1 [(buf.validate.field).fixed32.const = 42];
	//	}
	//
	// ```
	Const *uint32 `protobuf:"fixed32,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed32 {
	//	 // value must be less than 10
	//	  fixed32 value = 1 [(buf.validate.field).fixed32.lt = 10];
	//	}
	//
	// ```
	Lt *uint32 `protobuf:"fixed32,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed32 {
	//	 // value must be less than or equal to 10
	//	  fixed32 value = 1 [(buf.validate.field).fixed32.lte = 10];
	//	}
	//
	// ```
	Lte *uint32 `protobuf:"fixed32,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed32 {
	//	 // value must be greater than 5 [fixed32.gt]
	//	 fixed32 value = 1 [(buf.validate.field).fixed32.gt = 5];
	//
	//	 // value must be greater than 5 and less than 10 [fixed32.gt_lt]
	//	 fixed32 other_value = 2 [(buf.validate.field).fixed32 = { gt: 5, lt: 10 }];
	//
	//	 // value must be greater than 10 or less than 5 [fixed32.gt_lt_exclusive]
	//	 fixed32 another_value = 3 [(buf.validate.field).fixed32 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt *uint32 `protobuf:"fixed32,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed32 {
	//	 // value must be greater than or equal to 5 [fixed32.gte]
	//	 fixed32 value = 1 [(buf.validate.field).fixed32.gte = 5];
	//
	//	 // value must be greater than or equal to 5 and less than 10 [fixed32.gte_lt]
	//	 fixed32 other_value = 2 [(buf.validate.field).fixed32 = { gte: 5, lt: 10 }];
	//
	//	 // value must be greater than or equal to 10 or less than 5 [fixed32.gte_lt_exclusive]
	//	 fixed32 another_value = 3 [(buf.validate.field).fixed32 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte *uint32 `protobuf:"fixed32,5,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message
	// is generated.
	//
	// ```proto
	//
	//	message MyFixed32 {
	//	 // value must be in list [1, 2, 3]
	//	 repeated fixed32 value = 1 (buf.validate.field).fixed32 = { in: [1, 2, 3] };
	//	}
	//
	// ```
	In []uint32 `protobuf:"fixed32,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyFixed32 {
	//	 // value must not be in list [1, 2, 3]
	//	 repeated fixed32 value = 1 (buf.validate.field).fixed32 = { not_in: [1, 2, 3] };
	//	}
	//
	// ```
	NotIn         []uint32 `protobuf:"fixed32,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Fixed32Rules) Reset() {
	*x = Fixed32Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fixed32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fixed32Rules) ProtoMessage() {}

func (x *Fixed32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fixed32Rules.ProtoReflect.Descriptor instead.
func (*Fixed32Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{11}
}

func (x *Fixed32Rules) GetConst() uint32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *Fixed32Rules) GetLt() uint32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Fixed32Rules) GetLte() uint32 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *Fixed32Rules) GetGt() uint32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Fixed32Rules) GetGte() uint32 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *Fixed32Rules) GetIn() []uint32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *Fixed32Rules) GetNotIn() []uint32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// Fixed64Rules describes the constraints applied to `fixed64` values.
type Fixed64Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed64 {
	//	 // value must equal 42
	//	  fixed64 value = 1 [(buf.validate.field).fixed64.const = 42];
	//	}
	//
	// ```
	Const *uint64 `protobuf:"fixed64,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed64 {
	//	 // value must be less than 10
	//	  fixed64 value = 1 [(buf.validate.field).fixed64.lt = 10];
	//	}
	//
	// ```
	Lt *uint64 `protobuf:"fixed64,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed64 {
	//	 // value must be less than or equal to 10
	//	  fixed64 value = 1 [(buf.validate.field).fixed64.lte = 10];
	//	}
	//
	// ```
	Lte *uint64 `protobuf:"fixed64,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed64 {
	//	 // value must be greater than 5 [fixed64.gt]
	//	 fixed64 value = 1 [(buf.validate.field).fixed64.gt = 5];
	//
	//	 // value must be greater than 5 and less than 10 [fixed64.gt_lt]
	//	 fixed64 other_value = 2 [(buf.validate.field).fixed64 = { gt: 5, lt: 10 }];
	//
	//	 // value must be greater than 10 or less than 5 [fixed64.gt_lt_exclusive]
	//	 fixed64 another_value = 3 [(buf.validate.field).fixed64 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt *uint64 `protobuf:"fixed64,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed64 {
	//	 // value must be greater than or equal to 5 [fixed64.gte]
	//	 fixed64 value = 1 [(buf.validate.field).fixed64.gte = 5];
	//
	//	 // value must be greater than or equal to 5 and less than 10 [fixed64.gte_lt]
	//	 fixed64 other_value = 2 [(buf.validate.field).fixed64 = { gte: 5, lt: 10 }];
	//
	//	 // value must be greater than or equal to 10 or less than 5 [fixed64.gte_lt_exclusive]
	//	 fixed64 another_value = 3 [(buf.validate.field).fixed64 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte *uint64 `protobuf:"fixed64,5,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MyFixed64 {
	//	 // value must be in list [1, 2, 3]
	//	 repeated fixed64 value = 1 (buf.validate.field).fixed64 = { in: [1, 2, 3] };
	//	}
	//
	// ```
	In []uint64 `protobuf:"fixed64,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyFixed64 {
	//	 // value must not be in list [1, 2, 3]
	//	 repeated fixed64 value = 1 (buf.validate.field).fixed64 = { not_in: [1, 2, 3] };
	//	}
	//
	// ```
	NotIn         []uint64 `protobuf:"fixed64,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Fixed64Rules) Reset() {
	*x = Fixed64Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fixed64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fixed64Rules) ProtoMessage() {}

func (x *Fixed64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fixed64Rules.ProtoReflect.Descriptor instead.
func (*Fixed64Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{12}
}

func (x *Fixed64Rules) GetConst() uint64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *Fixed64Rules) GetLt() uint64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Fixed64Rules) GetLte() uint64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *Fixed64Rules) GetGt() uint64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Fixed64Rules) GetGte() uint64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *Fixed64Rules) GetIn() []uint64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *Fixed64Rules) GetNotIn() []uint64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// SFixed32Rules describes the constraints applied to `fixed32` values.
type SFixed32Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed32 {
	//	 // value must equal 42
	//	  sfixed32 value = 1 [(buf.validate.field).sfixed32.const = 42];
	//	}
	//
	// ```
	Const *int32 `protobuf:"fixed32,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed32 {
	//	 // value must be less than 10
	//	  sfixed32 value = 1 [(buf.validate.field).sfixed32.lt = 10];
	//	}
	//
	// ```
	Lt *int32 `protobuf:"fixed32,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed32 {
	//	 // value must be less than or equal to 10
	//	  sfixed32 value = 1 [(buf.validate.field).sfixed32.lte = 10];
	//	}
	//
	// ```
	Lte *int32 `protobuf:"fixed32,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed32 {
	//	 // value must be greater than 5 [sfixed32.gt]
	//	 sfixed32 value = 1 [(buf.validate.field).sfixed32.gt = 5];
	//
	//	 // value must be greater than 5 and less than 10 [sfixed32.gt_lt]
	//	 sfixed32 other_value = 2 [(buf.validate.field).sfixed32 = { gt: 5, lt: 10 }];
	//
	//	 // value must be greater than 10 or less than 5 [sfixed32.gt_lt_exclusive]
	//	 sfixed32 another_value = 3 [(buf.validate.field).sfixed32 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt *int32 `protobuf:"fixed32,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed32 {
	//	 // value must be greater than or equal to 5 [sfixed32.gte]
	//	 sfixed32 value = 1 [(buf.validate.field).sfixed32.gte = 5];
	//
	//	 // value must be greater than or equal to 5 and less than 10 [sfixed32.gte_lt]
	//	 sfixed32 other_value = 2 [(buf.validate.field).sfixed32 = { gte: 5, lt: 10 }];
	//
	//	 // value must be greater than or equal to 10 or less than 5 [sfixed32.gte_lt_exclusive]
	//	 sfixed32 another_value = 3 [(buf.validate.field).sfixed32 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte *int32 `protobuf:"fixed32,5,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MySFixed32 {
	//	 // value must be in list [1, 2, 3]
	//	 repeated sfixed32 value = 1 (buf.validate.field).sfixed32 = { in: [1, 2, 3] };
	//	}
	//
	// ```
	In []int32 `protobuf:"fixed32,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MySFixed32 {
	//	 // value must not be in list [1, 2, 3]
	//	 repeated sfixed32 value = 1 (buf.validate.field).sfixed32 = { not_in: [1, 2, 3] };
	//	}
	//
	// ```
	NotIn         []int32 `protobuf:"fixed32,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SFixed32Rules) Reset() {
	*x = SFixed32Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SFixed32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFixed32Rules) ProtoMessage() {}

func (x *SFixed32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFixed32Rules.ProtoReflect.Descriptor instead.
func (*SFixed32Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{13}
}

func (x *SFixed32Rules) GetConst() int32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *SFixed32Rules) GetLt() int32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *SFixed32Rules) GetLte() int32 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *SFixed32Rules) GetGt() int32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *SFixed32Rules) GetGte() int32 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *SFixed32Rules) GetIn() []int32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *SFixed32Rules) GetNotIn() []int32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// SFixed64Rules describes the constraints applied to `fixed64` values.
type SFixed64Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed64 {
	//	 // value must equal 42
	//	  sfixed64 value = 1 [(buf.validate.field).sfixed64.const = 42];
	//	}
	//
	// ```
	Const *int64 `protobuf:"fixed64,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed64 {
	//	 // value must be less than 10
	//	  sfixed64 value = 1 [(buf.validate.field).sfixed64.lt = 10];
	//	}
	//
	// ```
	Lt *int64 `protobuf:"fixed64,2,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed64 {
	//	 // value must be less than or equal to 10
	//	  sfixed64 value = 1 [(buf.validate.field).sfixed64.lte = 10];
	//	}
	//
	// ```
	Lte *int64 `protobuf:"fixed64,3,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed64 {
	//	 // value must be greater than 5 [sfixed64.gt]
	//	 sfixed64 value = 1 [(buf.validate.field).sfixed64.gt = 5];
	//
	//	 // value must be greater than 5 and less than 10 [sfixed64.gt_lt]
	//	 sfixed64 other_value = 2 [(buf.validate.field).sfixed64 = { gt: 5, lt: 10 }];
	//
	//	 // value must be greater than 10 or less than 5 [sfixed64.gt_lt_exclusive]
	//	 sfixed64 another_value = 3 [(buf.validate.field).sfixed64 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt *int64 `protobuf:"fixed64,4,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed64 {
	//	 // value must be greater than or equal to 5 [sfixed64.gte]
	//	 sfixed64 value = 1 [(buf.validate.field).sfixed64.gte = 5];
	//
	//	 // value must be greater than or equal to 5 and less than 10 [sfixed64.gte_lt]
	//	 sfixed64 other_value = 2 [(buf.validate.field).sfixed64 = { gte: 5, lt: 10 }];
	//
	//	 // value must be greater than or equal to 10 or less than 5 [sfixed64.gte_lt_exclusive]
	//	 sfixed64 another_value = 3 [(buf.validate.field).sfixed64 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte *int64 `protobuf:"fixed64,5,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MySFixed64 {
	//	 // value must be in list [1, 2, 3]
	//	 repeated sfixed64 value = 1 (buf.validate.field).sfixed64 = { in: [1, 2, 3] };
	//	}
	//
	// ```
	In []int64 `protobuf:"fixed64,6,rep,packed,name=in,proto3" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MySFixed64 {
	//	 // value must not be in list [1, 2, 3]
	//	 repeated sfixed64 value = 1 (buf.validate.field).sfixed64 = { not_in: [1, 2, 3] };
	//	}
	//
	// ```
	NotIn         []int64 `protobuf:"fixed64,7,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SFixed64Rules) Reset() {
	*x = SFixed64Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SFixed64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFixed64Rules) ProtoMessage() {}

func (x *SFixed64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFixed64Rules.ProtoReflect.Descriptor instead.
func (*SFixed64Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{14}
}

func (x *SFixed64Rules) GetConst() int64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *SFixed64Rules) GetLt() int64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *SFixed64Rules) GetLte() int64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *SFixed64Rules) GetGt() int64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *SFixed64Rules) GetGte() int64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *SFixed64Rules) GetIn() []int64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *SFixed64Rules) GetNotIn() []int64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// BoolRules describes the constraints applied to `bool` values. These rules
// may also be applied to the `google.protobuf.BoolValue` Well-Known-Type.
type BoolRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified boolean value.
	// If the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyBool {
	//	 // value must equal true
	//	  bool value = 1 [(buf.validate.field).bool.const = true];
	//	}
	//
	// ```
	Const         *bool `protobuf:"varint,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoolRules) Reset() {
	*x = BoolRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoolRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolRules) ProtoMessage() {}

func (x *BoolRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolRules.ProtoReflect.Descriptor instead.
func (*BoolRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{15}
}

func (x *BoolRules) GetConst() bool {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return false
}

// StringRules describes the constraints applied to `string` values These
// rules may also be applied to the `google.protobuf.StringValue` Well-Known-Type.
type StringRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value must equal `hello`
	//	  string value = 1 [(buf.validate.field).string.const = "hello"];
	//	}
	//
	// ```
	Const *string `protobuf:"bytes,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// `len` dictates that the field value must have the specified
	// number of characters (Unicode code points), which may differ from the number
	// of bytes in the string. If the field value does not meet the specified
	// length, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value length must be 5 characters
	//	  string value = 1 [(buf.validate.field).string.len = 5];
	//	}
	//
	// ```
	Len *uint64 `protobuf:"varint,19,opt,name=len,proto3,oneof" json:"len,omitempty"`
	// `min_len` specifies that the field value must have at least the specified
	// number of characters (Unicode code points), which may differ from the number
	// of bytes in the string. If the field value contains fewer characters, an error
	// message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value length must be at least 3 characters
	//	  string value = 1 [(buf.validate.field).string.min_len = 3];
	//	}
	//
	// ```
	MinLen *uint64 `protobuf:"varint,2,opt,name=min_len,json=minLen,proto3,oneof" json:"min_len,omitempty"`
	// `max_len` specifies that the field value must have no more than the specified
	// number of characters (Unicode code points), which may differ from the
	// number of bytes in the string. If the field value contains more characters,
	// an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value length must be at most 10 characters
	//	  string value = 1 [(buf.validate.field).string.max_len = 10];
	//	}
	//
	// ```
	MaxLen *uint64 `protobuf:"varint,3,opt,name=max_len,json=maxLen,proto3,oneof" json:"max_len,omitempty"`
	// `len_bytes` dictates that the field value must have the specified number of
	// bytes. If the field value does not match the specified length in bytes,
	// an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value length must be 6 bytes
	//	  string value = 1 [(buf.validate.field).string.len_bytes = 6];
	//	}
	//
	// ```
	LenBytes *uint64 `protobuf:"varint,20,opt,name=len_bytes,json=lenBytes,proto3,oneof" json:"len_bytes,omitempty"`
	// `min_bytes` specifies that the field value must have at least the specified
	// number of bytes. If the field value contains fewer bytes, an error message
	// will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value length must be at least 4 bytes
	//	  string value = 1 [(buf.validate.field).string.min_bytes = 4];
	//	}
	//
	// ```
	MinBytes *uint64 `protobuf:"varint,4,opt,name=min_bytes,json=minBytes,proto3,oneof" json:"min_bytes,omitempty"`
	// `max_bytes` specifies that the field value must have no more than the
	// specified number of bytes. If the field value contains more bytes, an
	// error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value length must be at most 8 bytes
	//	  string value = 1 [(buf.validate.field).string.max_bytes = 8];
	//	}
	//
	// ```
	MaxBytes *uint64 `protobuf:"varint,5,opt,name=max_bytes,json=maxBytes,proto3,oneof" json:"max_bytes,omitempty"`
	// `pattern` specifies that the field value must match the specified
	// regular expression (RE2 syntax), with the expression provided without any
	// delimiters. If the field value doesn't match the regular expression, an
	// error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value does not match regex pattern `^[a-zA-Z]//$`
	//	  string value = 1 [(buf.validate.field).string.pattern = "^[a-zA-Z]//$"];
	//	}
	//
	// ```
	Pattern *string `protobuf:"bytes,6,opt,name=pattern,proto3,oneof" json:"pattern,omitempty"`
	// `prefix` specifies that the field value must have the
	// specified substring at the beginning of the string. If the field value
	// doesn't start with the specified prefix, an error message will be
	// generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value does not have prefix `pre`
	//	  string value = 1 [(buf.validate.field).string.prefix = "pre"];
	//	}
	//
	// ```
	Prefix *string `protobuf:"bytes,7,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	// `suffix` specifies that the field value must have the
	// specified substring at the end of the string. If the field value doesn't
	// end with the specified suffix, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value does not have suffix `post`
	//	  string value = 1 [(buf.validate.field).string.suffix = "post"];
	//	}
	//
	// ```
	Suffix *string `protobuf:"bytes,8,opt,name=suffix,proto3,oneof" json:"suffix,omitempty"`
	// `contains` specifies that the field value must have the
	// specified substring anywhere in the string. If the field value doesn't
	// contain the specified substring, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value does not contain substring `inside`.
	//	  string value = 1 [(buf.validate.field).string.contains = "inside"];
	//	}
	//
	// ```
	Contains *string `protobuf:"bytes,9,opt,name=contains,proto3,oneof" json:"contains,omitempty"`
	// `not_contains` specifies that the field value must not have the
	// specified substring anywhere in the string. If the field value contains
	// the specified substring, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value contains substring `inside`.
	//	  string value = 1 [(buf.validate.field).string.not_contains = "inside"];
	//	}
	//
	// ```
	NotContains *string `protobuf:"bytes,23,opt,name=not_contains,json=notContains,proto3,oneof" json:"not_contains,omitempty"`
	// `in` specifies that the field value must be equal to one of the specified
	// values. If the field value isn't one of the specified values, an error
	// message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value must be in list ["apple", "banana"]
	//	 repeated string value = 1 [(buf.validate.field).string.in = "apple", (buf.validate.field).string.in = "banana"];
	//	}
	//
	// ```
	In []string `protobuf:"bytes,10,rep,name=in,proto3" json:"in,omitempty"`
	// `not_in` specifies that the field value cannot be equal to any
	// of the specified values. If the field value is one of the specified values,
	// an error message will be generated.
	// ```proto
	//
	//	message MyString {
	//	 // value must not be in list ["orange", "grape"]
	//	 repeated string value = 1 [(buf.validate.field).string.not_in = "orange", (buf.validate.field).string.not_in = "grape"];
	//	}
	//
	// ```
	NotIn []string `protobuf:"bytes,11,rep,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// `WellKnown` rules provide advanced constraints against common string
	// patterns
	//
	// Types that are valid to be assigned to WellKnown:
	//
	//	*StringRules_Email
	//	*StringRules_Hostname
	//	*StringRules_Ip
	//	*StringRules_Ipv4
	//	*StringRules_Ipv6
	//	*StringRules_Uri
	//	*StringRules_UriRef
	//	*StringRules_Address
	//	*StringRules_Uuid
	//	*StringRules_WellKnownRegex
	WellKnown isStringRules_WellKnown `protobuf_oneof:"well_known"`
	// This applies to regexes `HTTP_HEADER_NAME` and `HTTP_HEADER_VALUE` to
	// enable strict header validation. By default, this is true, and HTTP header
	// validations are [RFC-compliant](https://tools.ietf.org/html/rfc7230#section-3). Setting to false will enable looser
	// validations that only disallow `\r\n\0` characters, which can be used to
	// bypass header matching rules.
	//
	// ```proto
	//
	//	message MyString {
	//	  // The field `value` must have be a valid HTTP headers, but not enforced with strict rules.
	//	  string value = 1 [(buf.validate.field).string.strict = false];
	//	}
	//
	// ```
	Strict        *bool `protobuf:"varint,25,opt,name=strict,proto3,oneof" json:"strict,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringRules) Reset() {
	*x = StringRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringRules) ProtoMessage() {}

func (x *StringRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringRules.ProtoReflect.Descriptor instead.
func (*StringRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{16}
}

func (x *StringRules) GetConst() string {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return ""
}

func (x *StringRules) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *StringRules) GetMinLen() uint64 {
	if x != nil && x.MinLen != nil {
		return *x.MinLen
	}
	return 0
}

func (x *StringRules) GetMaxLen() uint64 {
	if x != nil && x.MaxLen != nil {
		return *x.MaxLen
	}
	return 0
}

func (x *StringRules) GetLenBytes() uint64 {
	if x != nil && x.LenBytes != nil {
		return *x.LenBytes
	}
	return 0
}

func (x *StringRules) GetMinBytes() uint64 {
	if x != nil && x.MinBytes != nil {
		return *x.MinBytes
	}
	return 0
}

func (x *StringRules) GetMaxBytes() uint64 {
	if x != nil && x.MaxBytes != nil {
		return *x.MaxBytes
	}
	return 0
}

func (x *StringRules) GetPattern() string {
	if x != nil && x.Pattern != nil {
		return *x.Pattern
	}
	return ""
}

func (x *StringRules) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *StringRules) GetSuffix() string {
	if x != nil && x.Suffix != nil {
		return *x.Suffix
	}
	return ""
}

func (x *StringRules) GetContains() string {
	if x != nil && x.Contains != nil {
		return *x.Contains
	}
	return ""
}

func (x *StringRules) GetNotContains() string {
	if x != nil && x.NotContains != nil {
		return *x.NotContains
	}
	return ""
}

func (x *StringRules) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *StringRules) GetNotIn() []string {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *StringRules) GetWellKnown() isStringRules_WellKnown {
	if x != nil {
		return x.WellKnown
	}
	return nil
}

func (x *StringRules) GetEmail() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Email); ok {
			return x.Email
		}
	}
	return false
}

func (x *StringRules) GetHostname() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Hostname); ok {
			return x.Hostname
		}
	}
	return false
}

func (x *StringRules) GetIp() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Ip); ok {
			return x.Ip
		}
	}
	return false
}

func (x *StringRules) GetIpv4() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Ipv4); ok {
			return x.Ipv4
		}
	}
	return false
}

func (x *StringRules) GetIpv6() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Ipv6); ok {
			return x.Ipv6
		}
	}
	return false
}

func (x *StringRules) GetUri() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Uri); ok {
			return x.Uri
		}
	}
	return false
}

func (x *StringRules) GetUriRef() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_UriRef); ok {
			return x.UriRef
		}
	}
	return false
}

func (x *StringRules) GetAddress() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Address); ok {
			return x.Address
		}
	}
	return false
}

func (x *StringRules) GetUuid() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Uuid); ok {
			return x.Uuid
		}
	}
	return false
}

func (x *StringRules) GetWellKnownRegex() KnownRegex {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_WellKnownRegex); ok {
			return x.WellKnownRegex
		}
	}
	return KnownRegex_KNOWN_REGEX_UNSPECIFIED
}

func (x *StringRules) GetStrict() bool {
	if x != nil && x.Strict != nil {
		return *x.Strict
	}
	return false
}

type isStringRules_WellKnown interface {
	isStringRules_WellKnown()
}

type StringRules_Email struct {
	// `email` specifies that the field value must be a valid email address
	// (addr-spec only) as defined by [RFC 5322](https://tools.ietf.org/html/rfc5322#section-3.4.1).
	// If the field value isn't a valid email address, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value must be a valid email address
	//	  string value = 1 [(buf.validate.field).string.email = true];
	//	}
	//
	// ```
	Email bool `protobuf:"varint,12,opt,name=email,proto3,oneof"`
}

type StringRules_Hostname struct {
	// `hostname` specifies that the field value must be a valid
	// hostname as defined by [RFC 1034](https://tools.ietf.org/html/rfc1034#section-3.5). This constraint doesn't support
	// internationalized domain names (IDNs). If the field value isn't a
	// valid hostname, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value must be a valid hostname
	//	  string value = 1 [(buf.validate.field).string.hostname = true];
	//	}
	//
	// ```
	Hostname bool `protobuf:"varint,13,opt,name=hostname,proto3,oneof"`
}

type StringRules_Ip struct {
	// `ip` specifies that the field value must be a valid IP
	// (v4 or v6) address, without surrounding square brackets for IPv6 addresses.
	// If the field value isn't a valid IP address, an error message will be
	// generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value must be a valid IP address
	//	  string value = 1 [(buf.validate.field).string.ip = true];
	//	}
	//
	// ```
	Ip bool `protobuf:"varint,14,opt,name=ip,proto3,oneof"`
}

type StringRules_Ipv4 struct {
	// `ipv4` specifies that the field value must be a valid IPv4
	// address. If the field value isn't a valid IPv4 address, an error message
	// will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value must be a valid IPv4 address
	//	  string value = 1 [(buf.validate.field).string.ipv4 = true];
	//	}
	//
	// ```
	Ipv4 bool `protobuf:"varint,15,opt,name=ipv4,proto3,oneof"`
}

type StringRules_Ipv6 struct {
	// `ipv6` specifies that the field value must be a valid
	// IPv6 address, without surrounding square brackets. If the field value is
	// not a valid IPv6 address, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value must be a valid IPv6 address
	//	  string value = 1 [(buf.validate.field).string.ipv6 = true];
	//	}
	//
	// ```
	Ipv6 bool `protobuf:"varint,16,opt,name=ipv6,proto3,oneof"`
}

type StringRules_Uri struct {
	// `uri` specifies that the field value must be a valid,
	// absolute URI as defined by [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3). If the field value isn't a valid,
	// absolute URI, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value must be a valid URI
	//	  string value = 1 [(buf.validate.field).string.uri = true];
	//	}
	//
	// ```
	Uri bool `protobuf:"varint,17,opt,name=uri,proto3,oneof"`
}

type StringRules_UriRef struct {
	// `uri_ref` specifies that the field value must be a valid URI
	// as defined by [RFC 3986](https://tools.ietf.org/html/rfc3986#section-3) and may be either relative or absolute. If the
	// field value isn't a valid URI, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value must be a valid URI
	//	  string value = 1 [(buf.validate.field).string.uri_ref = true];
	//	}
	//
	// ```
	UriRef bool `protobuf:"varint,18,opt,name=uri_ref,json=uriRef,proto3,oneof"`
}

type StringRules_Address struct {
	// `address` specifies that the field value must be either a valid hostname
	// as defined by [RFC 1034](https://tools.ietf.org/html/rfc1034#section-3.5)
	// (which doesn't support internationalized domain names or IDNs) or a valid
	// IP (v4 or v6). If the field value isn't a valid hostname or IP, an error
	// message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value must be a valid hostname, or ip address
	//	  string value = 1 [(buf.validate.field).string.address = true];
	//	}
	//
	// ```
	Address bool `protobuf:"varint,21,opt,name=address,proto3,oneof"`
}

type StringRules_Uuid struct {
	// `uuid` specifies that the field value must be a valid UUID as defined by
	// [RFC 4122](https://tools.ietf.org/html/rfc4122#section-4.1.2). If the
	// field value isn't a valid UUID, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value must be a valid UUID
	//	  string value = 1 [(buf.validate.field).string.uuid = true];
	//	}
	//
	// ```
	Uuid bool `protobuf:"varint,22,opt,name=uuid,proto3,oneof"`
}

type StringRules_WellKnownRegex struct {
	// `well_known_regex` specifies a common well-known pattern
	// defined as a regex. If the field value doesn't match the well-known
	// regex, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	 // value must be a valid HTTP header value
	//	  string value = 1 [(buf.validate.field).string.well_known_regex = 2];
	//	}
	//
	// ```
	//
	// #### KnownRegex
	//
	// `well_known_regex` contains some well-known patterns.
	//
	// | Name                          | Number | Description                               |
	// |-------------------------------|--------|-------------------------------------------|
	// | KNOWN_REGEX_UNSPECIFIED       | 0      |                                           |
	// | KNOWN_REGEX_HTTP_HEADER_NAME  | 1      | HTTP header name as defined by [RFC 7230](https://tools.ietf.org/html/rfc7230#section-3.2)  |
	// | KNOWN_REGEX_HTTP_HEADER_VALUE | 2      | HTTP header value as defined by [RFC 7230](https://tools.ietf.org/html/rfc7230#section-3.2.4) |
	WellKnownRegex KnownRegex `protobuf:"varint,24,opt,name=well_known_regex,json=wellKnownRegex,proto3,enum=buf.validate.KnownRegex,oneof"`
}

func (*StringRules_Email) isStringRules_WellKnown() {}

func (*StringRules_Hostname) isStringRules_WellKnown() {}

func (*StringRules_Ip) isStringRules_WellKnown() {}

func (*StringRules_Ipv4) isStringRules_WellKnown() {}

func (*StringRules_Ipv6) isStringRules_WellKnown() {}

func (*StringRules_Uri) isStringRules_WellKnown() {}

func (*StringRules_UriRef) isStringRules_WellKnown() {}

func (*StringRules_Address) isStringRules_WellKnown() {}

func (*StringRules_Uuid) isStringRules_WellKnown() {}

func (*StringRules_WellKnownRegex) isStringRules_WellKnown() {}

// BytesRules describe the constraints applied to `bytes` values. These rules
// may also be applied to the `google.protobuf.BytesValue` Well-Known-Type.
type BytesRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified bytes
	// value. If the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyBytes {
	//	 // value must be "\x01\x02\x03\x04"
	//	  bytes value = 1 [(buf.validate.field).bytes.const = "\x01\x02\x03\x04"];
	//	}
	//
	// ```
	Const []byte `protobuf:"bytes,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// `len` requires the field value to have the specified length in bytes.
	// If the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyBytes {
	//	     // value length must be 4 bytes.
	//	     optional bytes value = 1 [(buf.validate.field).bytes.len = 4];
	//	}
	//
	// ```
	Len *uint64 `protobuf:"varint,13,opt,name=len,proto3,oneof" json:"len,omitempty"`
	// `min_len` requires the field value to have at least the specified minimum
	// length in bytes.
	// If the field value doesn't meet the requirement, an error message is generated.
	//
	// ```proto
	// message MyBytes {
	// // value length must be at least 2 bytes.
	// optional bytes value = 1 [(buf.validate.field).bytes.min_len = 2];
	// }
	// ```
	MinLen *uint64 `protobuf:"varint,2,opt,name=min_len,json=minLen,proto3,oneof" json:"min_len,omitempty"`
	// `max_len` requires the field value to have at most the specified maximum
	// length in bytes.
	// If the field value exceeds the requirement, an error message is generated.
	//
	// ```proto
	// message MyBytes {
	// // value must be at most 6 bytes.
	// optional bytes value = 1 [(buf.validate.field).bytes.max_len = 6];
	// }
	// ```
	MaxLen *uint64 `protobuf:"varint,3,opt,name=max_len,json=maxLen,proto3,oneof" json:"max_len,omitempty"`
	// `pattern` requires the field value to match the specified regular
	// expression ([RE2 syntax](https://github.com/google/re2/wiki/Syntax)).
	// The value of the field must be valid UTF-8 or validation will fail with a
	// runtime error.
	// If the field value doesn't match the pattern, an error message is generated.
	//
	// ```proto
	// message MyBytes {
	// // value must match regex pattern "^[a-zA-Z0-9]+$".
	// optional bytes value = 1 [(buf.validate.field).bytes.pattern = "^[a-zA-Z0-9]+$"];
	// }
	// ```
	Pattern *string `protobuf:"bytes,4,opt,name=pattern,proto3,oneof" json:"pattern,omitempty"`
	// `prefix` requires the field value to have the specified bytes at the
	// beginning of the string.
	// If the field value doesn't meet the requirement, an error message is generated.
	//
	// ```proto
	// message MyBytes {
	// // value does not have prefix \x01\x02
	// optional bytes value = 1 [(buf.validate.field).bytes.prefix = "\x01\x02"];
	// }
	// ```
	Prefix []byte `protobuf:"bytes,5,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	// `suffix` requires the field value to have the specified bytes at the end
	// of the string.
	// If the field value doesn't meet the requirement, an error message is generated.
	//
	// ```proto
	// message MyBytes {
	// // value does not have suffix \x03\x04
	// optional bytes value = 1 [(buf.validate.field).bytes.suffix = "\x03\x04"];
	// }
	// ```
	Suffix []byte `protobuf:"bytes,6,opt,name=suffix,proto3,oneof" json:"suffix,omitempty"`
	// `contains` requires the field value to have the specified bytes anywhere in
	// the string.
	// If the field value doesn't meet the requirement, an error message is generated.
	//
	// ```protobuf
	// message MyBytes {
	// // value does not contain \x02\x03
	// optional bytes value = 1 [(buf.validate.field).bytes.contains = "\x02\x03"];
	// }
	// ```
	Contains []byte `protobuf:"bytes,7,opt,name=contains,proto3,oneof" json:"contains,omitempty"`
	// `in` requires the field value to be equal to one of the specified
	// values. If the field value doesn't match any of the specified values, an
	// error message is generated.
	//
	// ```protobuf
	// message MyBytes {
	// // value must in ["\x01\x02", "\x02\x03", "\x03\x04"]
	// optional bytes value = 1 [(buf.validate.field).bytes.in = {"\x01\x02", "\x02\x03", "\x03\x04"}];
	// }
	// ```
	In [][]byte `protobuf:"bytes,8,rep,name=in,proto3" json:"in,omitempty"`
	// `not_in` requires the field value to be not equal to any of the specified
	// values.
	// If the field value matches any of the specified values, an error message is
	// generated.
	//
	// ```proto
	// message MyBytes {
	// // value must not in ["\x01\x02", "\x02\x03", "\x03\x04"]
	// optional bytes value = 1 [(buf.validate.field).bytes.not_in = {"\x01\x02", "\x02\x03", "\x03\x04"}];
	// }
	// ```
	NotIn [][]byte `protobuf:"bytes,9,rep,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// WellKnown rules provide advanced constraints against common byte
	// patterns
	//
	// Types that are valid to be assigned to WellKnown:
	//
	//	*BytesRules_Ip
	//	*BytesRules_Ipv4
	//	*BytesRules_Ipv6
	WellKnown     isBytesRules_WellKnown `protobuf_oneof:"well_known"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BytesRules) Reset() {
	*x = BytesRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BytesRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesRules) ProtoMessage() {}

func (x *BytesRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesRules.ProtoReflect.Descriptor instead.
func (*BytesRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{17}
}

func (x *BytesRules) GetConst() []byte {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *BytesRules) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *BytesRules) GetMinLen() uint64 {
	if x != nil && x.MinLen != nil {
		return *x.MinLen
	}
	return 0
}

func (x *BytesRules) GetMaxLen() uint64 {
	if x != nil && x.MaxLen != nil {
		return *x.MaxLen
	}
	return 0
}

func (x *BytesRules) GetPattern() string {
	if x != nil && x.Pattern != nil {
		return *x.Pattern
	}
	return ""
}

func (x *BytesRules) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *BytesRules) GetSuffix() []byte {
	if x != nil {
		return x.Suffix
	}
	return nil
}

func (x *BytesRules) GetContains() []byte {
	if x != nil {
		return x.Contains
	}
	return nil
}

func (x *BytesRules) GetIn() [][]byte {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *BytesRules) GetNotIn() [][]byte {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *BytesRules) GetWellKnown() isBytesRules_WellKnown {
	if x != nil {
		return x.WellKnown
	}
	return nil
}

func (x *BytesRules) GetIp() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*BytesRules_Ip); ok {
			return x.Ip
		}
	}
	return false
}

func (x *BytesRules) GetIpv4() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*BytesRules_Ipv4); ok {
			return x.Ipv4
		}
	}
	return false
}

func (x *BytesRules) GetIpv6() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*BytesRules_Ipv6); ok {
			return x.Ipv6
		}
	}
	return false
}

type isBytesRules_WellKnown interface {
	isBytesRules_WellKnown()
}

type BytesRules_Ip struct {
	// `ip` ensures that the field `value` is a valid IP address (v4 or v6) in byte format.
	// If the field value doesn't meet this constraint, an error message is generated.
	//
	// ```proto
	// message MyBytes {
	// // value must be a valid IP address
	// optional bytes value = 1 [(buf.validate.field).bytes.ip = true];
	// }
	// ```
	Ip bool `protobuf:"varint,10,opt,name=ip,proto3,oneof"`
}

type BytesRules_Ipv4 struct {
	// `ipv4` ensures that the field `value` is a valid IPv4 address in byte format.
	// If the field value doesn't meet this constraint, an error message is generated.
	//
	// ```proto
	// message MyBytes {
	// // value must be a valid IPv4 address
	// optional bytes value = 1 [(buf.validate.field).bytes.ipv4 = true];
	// }
	// ```
	Ipv4 bool `protobuf:"varint,11,opt,name=ipv4,proto3,oneof"`
}

type BytesRules_Ipv6 struct {
	// `ipv6` ensures that the field `value` is a valid IPv6 address in byte format.
	// If the field value doesn't meet this constraint, an error message is generated.
	// ```proto
	// message MyBytes {
	// // value must be a valid IPv6 address
	// optional bytes value = 1 [(buf.validate.field).bytes.ipv6 = true];
	// }
	// ```
	Ipv6 bool `protobuf:"varint,12,opt,name=ipv6,proto3,oneof"`
}

func (*BytesRules_Ip) isBytesRules_WellKnown() {}

func (*BytesRules_Ipv4) isBytesRules_WellKnown() {}

func (*BytesRules_Ipv6) isBytesRules_WellKnown() {}

// EnumRules describe the constraints applied to `enum` values.
type EnumRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified enum value.
	// If the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	enum MyEnum {
	//	 MY_ENUM_UNSPECIFIED = 0;
	//	 MY_ENUM_VALUE1 = 1;
	//	 MY_ENUM_VALUE2 = 2;
	//	}
	//
	//	message MyMessage {
	//	 // The field `value` must be exactly MY_ENUM_VALUE1.
	//	  MyEnum value = 1 [(buf.validate.field).enum.const = 1];
	//	}
	//
	// ```
	Const *int32 `protobuf:"varint,1,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// `defined_only` requires the field value to be one of the defined values for
	// this enum, failing on any undefined value.
	//
	// ```proto
	//
	//	enum MyEnum {
	//	 MY_ENUM_UNSPECIFIED = 0;
	//	 MY_ENUM_VALUE1 = 1;
	//	 MY_ENUM_VALUE2 = 2;
	//	}
	//
	//	message MyMessage {
	//	 // The field `value` must be a defined value of MyEnum.
	//	  MyEnum value = 1 [(buf.validate.field).enum.defined_only = true];
	//	}
	//
	// ```
	DefinedOnly *bool `protobuf:"varint,2,opt,name=defined_only,json=definedOnly,proto3,oneof" json:"defined_only,omitempty"`
	// `in` requires the field value to be equal to one of the
	// specified enum values. If the field value doesn't match any of the
	// specified values, an error message is generated.
	//
	// ```proto
	//
	//	enum MyEnum {
	//	 MY_ENUM_UNSPECIFIED = 0;
	//	 MY_ENUM_VALUE1 = 1;
	//	 MY_ENUM_VALUE2 = 2;
	//	}
	//
	//	message MyMessage {
	//	 // The field `value` must be equal to one of the specified values.
	//	  MyEnum value = 1 [(buf.validate.field).enum.in = {1, 2}];
	//	}
	//
	// ```
	In []int32 `protobuf:"varint,3,rep,packed,name=in,proto3" json:"in,omitempty"`
	// `not_in` requires the field value to be not equal to any of the
	// specified enum values. If the field value matches one of the specified
	// values, an error message is generated.
	//
	// ```proto
	//
	//	enum MyEnum {
	//	 MY_ENUM_UNSPECIFIED = 0;
	//	 MY_ENUM_VALUE1 = 1;
	//	 MY_ENUM_VALUE2 = 2;
	//	}
	//
	//	message MyMessage {
	//	 // The field `value` must not be equal to any of the specified values.
	//	  MyEnum value = 1 [(buf.validate.field).enum.not_in = {1, 2}];
	//	}
	//
	// ```
	NotIn         []int32 `protobuf:"varint,4,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnumRules) Reset() {
	*x = EnumRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnumRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumRules) ProtoMessage() {}

func (x *EnumRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumRules.ProtoReflect.Descriptor instead.
func (*EnumRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{18}
}

func (x *EnumRules) GetConst() int32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *EnumRules) GetDefinedOnly() bool {
	if x != nil && x.DefinedOnly != nil {
		return *x.DefinedOnly
	}
	return false
}

func (x *EnumRules) GetIn() []int32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *EnumRules) GetNotIn() []int32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// RepeatedRules describe the constraints applied to `repeated` values.
type RepeatedRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `min_items` requires that this field must contain at least the specified
	// minimum number of items.
	//
	// ```proto
	//
	//	message MyRepeated {
	//	 // value must contain at least  2 items
	//	 repeated string value = 1 [(buf.validate.field).repeated.min_items = 2];
	//	}
	//
	// ```
	MinItems *uint64 `protobuf:"varint,1,opt,name=min_items,json=minItems,proto3,oneof" json:"min_items,omitempty"`
	// `max_items` denotes that this field must not exceed a
	// certain number of items as the upper limit. If the field contains more
	// items than specified, an error message will be generated, requiring the
	// field to maintain no more than the specified number of items.
	//
	// ```proto
	//
	//	message MyRepeated {
	//	 // value must contain no more than 3 item(s)
	//	 repeated string value = 1 [(buf.validate.field).repeated.max_items = 3];
	//	}
	//
	// ```
	MaxItems *uint64 `protobuf:"varint,2,opt,name=max_items,json=maxItems,proto3,oneof" json:"max_items,omitempty"`
	// `unique` indicates that all elements in this field must
	// be unique. This constraint is strictly applicable to scalar and enum
	// types, with message types not being supported.
	//
	// ```proto
	// message MyRepeated {
	// // repeated value must contain unique items
	// repeated string value = 1 [(buf.validate.field).repeated.unique = true];
	// }
	// ```
	Unique *bool `protobuf:"varint,3,opt,name=unique,proto3,oneof" json:"unique,omitempty"`
	// `items` details the constraints to be applied to each item
	// in the field. Even for repeated message fields, validation is executed
	// against each item unless skip is explicitly specified.
	//
	// ```proto
	//
	//	message MyRepeated {
	//	 // The items in the field `value` must follow the specified constraints.
	//	 repeated string value = 1 [(buf.validate.field).repeated.items = {
	//	   string: {
	//	     min_len: 3
	//	     max_len: 10
	//	   }
	//	 }];
	//	}
	Items         *FieldConstraints `protobuf:"bytes,4,opt,name=items,proto3,oneof" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatedRules) Reset() {
	*x = RepeatedRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedRules) ProtoMessage() {}

func (x *RepeatedRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedRules.ProtoReflect.Descriptor instead.
func (*RepeatedRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{19}
}

func (x *RepeatedRules) GetMinItems() uint64 {
	if x != nil && x.MinItems != nil {
		return *x.MinItems
	}
	return 0
}

func (x *RepeatedRules) GetMaxItems() uint64 {
	if x != nil && x.MaxItems != nil {
		return *x.MaxItems
	}
	return 0
}

func (x *RepeatedRules) GetUnique() bool {
	if x != nil && x.Unique != nil {
		return *x.Unique
	}
	return false
}

func (x *RepeatedRules) GetItems() *FieldConstraints {
	if x != nil {
		return x.Items
	}
	return nil
}

// MapRules describe the constraints applied to `map` values.
type MapRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies the minimum number of key-value pairs allowed. If the field has
	// fewer key-value pairs than specified, an error message is generated.
	//
	// ```proto
	//
	//	message MyMap {
	//	 // The field `value` must have at least 2 key-value pairs.
	//	 map<string, string> value = 1 [(buf.validate.field).map.min_pairs = 2];
	//	}
	//
	// ```
	MinPairs *uint64 `protobuf:"varint,1,opt,name=min_pairs,json=minPairs,proto3,oneof" json:"min_pairs,omitempty"`
	// Specifies the maximum number of key-value pairs allowed. If the field has
	// more key-value pairs than specified, an error message is generated.
	//
	// ```proto
	//
	//	message MyMap {
	//	 // The field `value` must have at most 3 key-value pairs.
	//	 map<string, string> value = 1 [(buf.validate.field).map.max_pairs = 3];
	//	}
	//
	// ```
	MaxPairs *uint64 `protobuf:"varint,2,opt,name=max_pairs,json=maxPairs,proto3,oneof" json:"max_pairs,omitempty"`
	// Specifies the constraints to be applied to each key in the field.
	//
	// ```proto
	//
	//	message MyMap {
	//	 // The keys in the field `value` must follow the specified constraints.
	//	 map<string, string> value = 1 [(buf.validate.field).map.keys = {
	//	   string: {
	//	     min_len: 3
	//	     max_len: 10
	//	   }
	//	 }];
	//	}
	//
	// ```
	Keys *FieldConstraints `protobuf:"bytes,4,opt,name=keys,proto3,oneof" json:"keys,omitempty"`
	// Specifies the constraints to be applied to the value of each key in the
	// field. Message values will still have their validations evaluated unless
	// skip is specified here.
	//
	// ```proto
	//
	//	message MyMap {
	//	 // The values in the field `value` must follow the specified constraints.
	//	 map<string, string> value = 1 [(buf.validate.field).map.values = {
	//	   string: {
	//	     min_len: 5
	//	     max_len: 20
	//	   }
	//	 }];
	//	}
	//
	// ```
	Values        *FieldConstraints `protobuf:"bytes,5,opt,name=values,proto3,oneof" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapRules) Reset() {
	*x = MapRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRules) ProtoMessage() {}

func (x *MapRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRules.ProtoReflect.Descriptor instead.
func (*MapRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{20}
}

func (x *MapRules) GetMinPairs() uint64 {
	if x != nil && x.MinPairs != nil {
		return *x.MinPairs
	}
	return 0
}

func (x *MapRules) GetMaxPairs() uint64 {
	if x != nil && x.MaxPairs != nil {
		return *x.MaxPairs
	}
	return 0
}

func (x *MapRules) GetKeys() *FieldConstraints {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *MapRules) GetValues() *FieldConstraints {
	if x != nil {
		return x.Values
	}
	return nil
}

// AnyRules describe constraints applied exclusively to the `google.protobuf.Any` well-known type.
type AnyRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `in` requires the field's `type_url` to be equal to one of the
	// specified values. If it doesn't match any of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyAny {
	//	 //  The `value` field must have a `type_url` equal to one of the specified values.
	//	  google.protobuf.Any value = 1 [(buf.validate.field).any.in = ["type.googleapis.com/MyType1", "type.googleapis.com/MyType2"]];
	//	}
	//
	// ```
	In []string `protobuf:"bytes,2,rep,name=in,proto3" json:"in,omitempty"`
	// requires the field's type_url to be not equal to any of the specified values. If it matches any of the specified values, an error message is generated.
	//
	// ```proto
	//
	//	message MyAny {
	//	 // The field `value` must not have a `type_url` equal to any of the specified values.
	//	  google.protobuf.Any value = 1 [(buf.validate.field).any.not_in = ["type.googleapis.com/ForbiddenType1", "type.googleapis.com/ForbiddenType2"]];
	//	}
	//
	// ```
	NotIn         []string `protobuf:"bytes,3,rep,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnyRules) Reset() {
	*x = AnyRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnyRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyRules) ProtoMessage() {}

func (x *AnyRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyRules.ProtoReflect.Descriptor instead.
func (*AnyRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{21}
}

func (x *AnyRules) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *AnyRules) GetNotIn() []string {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// DurationRules describe the constraints applied exclusively to the `google.protobuf.Duration` well-known type.
type DurationRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` dictates that the field must match the specified value of the `google.protobuf.Duration` type exactly.
	// If the field's value deviates from the specified value, an error message
	// will be generated.
	//
	// ```proto
	//
	//	message MyDuration {
	//	 // value must equal 5s
	//	  google.protobuf.Duration value = 1 [(buf.validate.field).duration.const = "5s"];
	//	}
	//
	// ```
	Const *durationpb.Duration `protobuf:"bytes,2,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// `lt` stipulates that the field must be less than the specified value of the `google.protobuf.Duration` type,
	// exclusive. If the field's value is greater than or equal to the specified
	// value, an error message will be generated.
	//
	// ```proto
	//
	//	message MyDuration {
	//	 // value must be less than 5s
	//	  google.protobuf.Duration value = 1 [(buf.validate.field).duration.lt = "5s"];
	//	}
	//
	// ```
	Lt *durationpb.Duration `protobuf:"bytes,3,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` indicates that the field must be less than or equal to the specified
	// value of the `google.protobuf.Duration` type, inclusive. If the field's value is greater than the specified value,
	// an error message will be generated.
	//
	// ```proto
	//
	//	message MyDuration {
	//	 // value must be less than or equal to 10s
	//	  google.protobuf.Duration value = 1 [(buf.validate.field).duration.lte = "10s"];
	//	}
	//
	// ```
	Lte *durationpb.Duration `protobuf:"bytes,4,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` requires the duration field value to be greater than the specified
	// value (exclusive). If the value of `gt` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyDuration {
	//	 // duration must be greater than 5s [duration.gt]
	//	 google.protobuf.Duration value = 1 [(buf.validate.field).duration.gt = { seconds: 5 }];
	//
	//	 // duration must be greater than 5s and less than 10s [duration.gt_lt]
	//	 google.protobuf.Duration another_value = 2 [(buf.validate.field).duration = { gt: { seconds: 5 }, lt: { seconds: 10 } }];
	//
	//	 // duration must be greater than 10s or less than 5s [duration.gt_lt_exclusive]
	//	 google.protobuf.Duration other_value = 3 [(buf.validate.field).duration = { gt: { seconds: 10 }, lt: { seconds: 5 } }];
	//	}
	//
	// ```
	Gt *durationpb.Duration `protobuf:"bytes,5,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` requires the duration field value to be greater than or equal to the
	// specified value (exclusive). If the value of `gte` is larger than a
	// specified `lt` or `lte`, the range is reversed, and the field value must
	// be outside the specified range. If the field value doesn't meet the
	// required conditions, an error message is generated.
	//
	// ```proto
	//
	//	message MyDuration {
	//	 // duration must be greater than or equal to 5s [duration.gte]
	//	 google.protobuf.Duration value = 1 [(buf.validate.field).duration.gte = { seconds: 5 }];
	//
	//	 // duration must be greater than or equal to 5s and less than 10s [duration.gte_lt]
	//	 google.protobuf.Duration another_value = 2 [(buf.validate.field).duration = { gte: { seconds: 5 }, lt: { seconds: 10 } }];
	//
	//	 // duration must be greater than or equal to 10s or less than 5s [duration.gte_lt_exclusive]
	//	 google.protobuf.Duration other_value = 3 [(buf.validate.field).duration = { gte: { seconds: 10 }, lt: { seconds: 5 } }];
	//	}
	//
	// ```
	Gte *durationpb.Duration `protobuf:"bytes,6,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// `in` asserts that the field must be equal to one of the specified values of the `google.protobuf.Duration` type.
	// If the field's value doesn't correspond to any of the specified values,
	// an error message will be generated.
	//
	// ```proto
	//
	//	message MyDuration {
	//	 // value must be in list [1s, 2s, 3s]
	//	  google.protobuf.Duration value = 1 [(buf.validate.field).duration.in = ["1s", "2s", "3s"]];
	//	}
	//
	// ```
	In []*durationpb.Duration `protobuf:"bytes,7,rep,name=in,proto3" json:"in,omitempty"`
	// `not_in` denotes that the field must not be equal to
	// any of the specified values of the `google.protobuf.Duration` type.
	// If the field's value matches any of these values, an error message will be
	// generated.
	//
	// ```proto
	//
	//	message MyDuration {
	//	 // value must not be in list [1s, 2s, 3s]
	//	  google.protobuf.Duration value = 1 [(buf.validate.field).duration.not_in = ["1s", "2s", "3s"]];
	//	}
	//
	// ```
	NotIn         []*durationpb.Duration `protobuf:"bytes,8,rep,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DurationRules) Reset() {
	*x = DurationRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DurationRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationRules) ProtoMessage() {}

func (x *DurationRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationRules.ProtoReflect.Descriptor instead.
func (*DurationRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{22}
}

func (x *DurationRules) GetConst() *durationpb.Duration {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *DurationRules) GetLt() *durationpb.Duration {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *DurationRules) GetLte() *durationpb.Duration {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *DurationRules) GetGt() *durationpb.Duration {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *DurationRules) GetGte() *durationpb.Duration {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *DurationRules) GetIn() []*durationpb.Duration {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *DurationRules) GetNotIn() []*durationpb.Duration {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// TimestampRules describe the constraints applied exclusively to the `google.protobuf.Timestamp` well-known type.
type TimestampRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` dictates that this field, of the `google.protobuf.Timestamp` type, must exactly match the specified value. If the field value doesn't correspond to the specified timestamp, an error message will be generated.
	//
	// ```proto
	//
	//	message MyTimestamp {
	//	 // value must equal 2023-05-03T10:00:00Z
	//	  google.protobuf.Timestamp created_at = 1 [(buf.validate.field).timestamp.const = {seconds: 1727998800}];
	//	}
	//
	// ```
	Const *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=const,proto3,oneof" json:"const,omitempty"`
	// requires the duration field value to be less than the specified value (field < value). If the field value doesn't meet the required conditions, an error message is generated.
	//
	// ```proto
	//
	//	message MyDuration {
	//	  // duration must be less than 'P3D' [duration.lt]
	//	  google.protobuf.Duration value = 1 [(buf.validate.field).duration.lt = { seconds: 259200 }];
	//	}
	//
	// ```
	Lt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// requires the timestamp field value to be less than or equal to the specified value (field <= value). If the field value doesn't meet the required conditions, an error message is generated.
	//
	// ```proto
	//
	//	message MyTimestamp {
	//	  // timestamp must be less than or equal to '2023-05-14T00:00:00Z' [timestamp.lte]
	//	  google.protobuf.Timestamp value = 1 [(buf.validate.field).timestamp.lte = { seconds: 1678867200 }];
	//	}
	//
	// ```
	Lte *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` requires the timestamp field value to be greater than the specified
	// value (exclusive). If the value of `gt` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyTimestamp {
	//	 // timestamp must be greater than '2023-01-01T00:00:00Z' [timestamp.gt]
	//	 google.protobuf.Timestamp value = 1 [(buf.validate.field).timestamp.gt = { seconds: 1672444800 }];
	//
	//	 // timestamp must be greater than '2023-01-01T00:00:00Z' and less than '2023-01-02T00:00:00Z' [timestamp.gt_lt]
	//	 google.protobuf.Timestamp another_value = 2 [(buf.validate.field).timestamp = { gt: { seconds: 1672444800 }, lt: { seconds: 1672531200 } }];
	//
	//	 // timestamp must be greater than '2023-01-02T00:00:00Z' or less than '2023-01-01T00:00:00Z' [timestamp.gt_lt_exclusive]
	//	 google.protobuf.Timestamp other_value = 3 [(buf.validate.field).timestamp = { gt: { seconds: 1672531200 }, lt: { seconds: 1672444800 } }];
	//	}
	//
	// ```
	Gt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` requires the timestamp field value to be greater than or equal to the
	// specified value (exclusive). If the value of `gte` is larger than a
	// specified `lt` or `lte`, the range is reversed, and the field value
	// must be outside the specified range. If the field value doesn't meet
	// the required conditions, an error message is generated.
	//
	// ```proto
	//
	//	message MyTimestamp {
	//	 // timestamp must be greater than or equal to '2023-01-01T00:00:00Z' [timestamp.gte]
	//	 google.protobuf.Timestamp value = 1 [(buf.validate.field).timestamp.gte = { seconds: 1672444800 }];
	//
	//	 // timestamp must be greater than or equal to '2023-01-01T00:00:00Z' and less than '2023-01-02T00:00:00Z' [timestamp.gte_lt]
	//	 google.protobuf.Timestamp another_value = 2 [(buf.validate.field).timestamp = { gte: { seconds: 1672444800 }, lt: { seconds: 1672531200 } }];
	//
	//	 // timestamp must be greater than or equal to '2023-01-02T00:00:00Z' or less than '2023-01-01T00:00:00Z' [timestamp.gte_lt_exclusive]
	//	 google.protobuf.Timestamp other_value = 3 [(buf.validate.field).timestamp = { gte: { seconds: 1672531200 }, lt: { seconds: 1672444800 } }];
	//	}
	//
	// ```
	Gte *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// `lt_now` specifies that this field, of the `google.protobuf.Timestamp` type, must be less than the current time. `lt_now` can only be used with the `within` rule.
	//
	// ```proto
	//
	//	message MyTimestamp {
	//	 // value must be less than now
	//	  google.protobuf.Timestamp created_at = 1 [(buf.validate.field).timestamp.lt_now = true];
	//	}
	//
	// ```
	LtNow *bool `protobuf:"varint,7,opt,name=lt_now,json=ltNow,proto3,oneof" json:"lt_now,omitempty"`
	// `gt_now` specifies that this field, of the `google.protobuf.Timestamp` type, must be greater than the current time. `gt_now` can only be used with the `within` rule.
	//
	// ```proto
	//
	//	message MyTimestamp {
	//	 // value must be greater than now
	//	  google.protobuf.Timestamp created_at = 1 [(buf.validate.field).timestamp.gt_now = true];
	//	}
	//
	// ```
	GtNow *bool `protobuf:"varint,8,opt,name=gt_now,json=gtNow,proto3,oneof" json:"gt_now,omitempty"`
	// `within` specifies that this field, of the `google.protobuf.Timestamp` type, must be within the specified duration of the current time. If the field value isn't within the duration, an error message is generated.
	//
	// ```proto
	//
	//	message MyTimestamp {
	//	 // value must be within 1 hour of now
	//	  google.protobuf.Timestamp created_at = 1 [(buf.validate.field).timestamp.within = {seconds: 3600}];
	//	}
	//
	// ```
	Within        *durationpb.Duration `protobuf:"bytes,9,opt,name=within,proto3,oneof" json:"within,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimestampRules) Reset() {
	*x = TimestampRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimestampRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampRules) ProtoMessage() {}

func (x *TimestampRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampRules.ProtoReflect.Descriptor instead.
func (*TimestampRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{23}
}

func (x *TimestampRules) GetConst() *timestamppb.Timestamp {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *TimestampRules) GetLt() *timestamppb.Timestamp {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *TimestampRules) GetLte() *timestamppb.Timestamp {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TimestampRules) GetGt() *timestamppb.Timestamp {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TimestampRules) GetGte() *timestamppb.Timestamp {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TimestampRules) GetLtNow() bool {
	if x != nil && x.LtNow != nil {
		return *x.LtNow
	}
	return false
}

func (x *TimestampRules) GetGtNow() bool {
	if x != nil && x.GtNow != nil {
		return *x.GtNow
	}
	return false
}

func (x *TimestampRules) GetWithin() *durationpb.Duration {
	if x != nil {
		return x.Within
	}
	return nil
}

var file_buf_validate_validate_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*MessageConstraints)(nil),
		Field:         51071,
		Name:          "buf.validate.message",
		Tag:           "bytes,51071,opt,name=message",
		Filename:      "buf/validate/validate.proto",
	},
	{
		ExtendedType:  (*descriptorpb.OneofOptions)(nil),
		ExtensionType: (*OneofConstraints)(nil),
		Field:         51071,
		Name:          "buf.validate.oneof",
		Tag:           "bytes,51071,opt,name=oneof",
		Filename:      "buf/validate/validate.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*FieldConstraints)(nil),
		Field:         51071,
		Name:          "buf.validate.field",
		Tag:           "bytes,51071,opt,name=field",
		Filename:      "buf/validate/validate.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// Rules specify the validations to be performed on this message. By default,
	// no validation is performed against a message.
	//
	// optional buf.validate.MessageConstraints message = 51071;
	E_Message = &file_buf_validate_validate_proto_extTypes[0]
)

// Extension fields to descriptorpb.OneofOptions.
var (
	// Rules specify the validations to be performed on this oneof. By default,
	// no validation is performed against a oneof.
	//
	// optional buf.validate.OneofConstraints oneof = 51071;
	E_Oneof = &file_buf_validate_validate_proto_extTypes[1]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// Rules specify the validations to be performed on this field. By default,
	// no validation is performed against a field.
	//
	// optional buf.validate.FieldConstraints field = 51071;
	E_Field = &file_buf_validate_validate_proto_extTypes[2]
)

var File_buf_validate_validate_proto protoreflect.FileDescriptor

const file_buf_validate_validate_proto_rawDesc = "" +
	"\n" +
	"\x1bbuf/validate/validate.proto\x12\fbuf.validate\x1a\x1dbuf/validate/expression.proto\x1a\x1fbuf/validate/priv/private.proto\x1a google/protobuf/descriptor.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"n\n" +
	"\x12MessageConstraints\x12\x1f\n" +
	"\bdisabled\x18\x01 \x01(\bH\x00R\bdisabled\x88\x01\x01\x12*\n" +
	"\x03cel\x18\x03 \x03(\v2\x18.buf.validate.ConstraintR\x03celB\v\n" +
	"\t_disabled\"@\n" +
	"\x10OneofConstraints\x12\x1f\n" +
	"\brequired\x18\x01 \x01(\bH\x00R\brequired\x88\x01\x01B\v\n" +
	"\t_required\"\xf5\t\n" +
	"\x10FieldConstraints\x12*\n" +
	"\x03cel\x18\x17 \x03(\v2\x18.buf.validate.ConstraintR\x03cel\x12\x18\n" +
	"\askipped\x18\x18 \x01(\bR\askipped\x12\x1a\n" +
	"\brequired\x18\x19 \x01(\bR\brequired\x12!\n" +
	"\fignore_empty\x18\x1a \x01(\bR\vignoreEmpty\x120\n" +
	"\x05float\x18\x01 \x01(\v2\x18.buf.validate.FloatRulesH\x00R\x05float\x123\n" +
	"\x06double\x18\x02 \x01(\v2\x19.buf.validate.DoubleRulesH\x00R\x06double\x120\n" +
	"\x05int32\x18\x03 \x01(\v2\x18.buf.validate.Int32RulesH\x00R\x05int32\x120\n" +
	"\x05int64\x18\x04 \x01(\v2\x18.buf.validate.Int64RulesH\x00R\x05int64\x123\n" +
	"\x06uint32\x18\x05 \x01(\v2\x19.buf.validate.UInt32RulesH\x00R\x06uint32\x123\n" +
	"\x06uint64\x18\x06 \x01(\v2\x19.buf.validate.UInt64RulesH\x00R\x06uint64\x123\n" +
	"\x06sint32\x18\a \x01(\v2\x19.buf.validate.SInt32RulesH\x00R\x06sint32\x123\n" +
	"\x06sint64\x18\b \x01(\v2\x19.buf.validate.SInt64RulesH\x00R\x06sint64\x126\n" +
	"\afixed32\x18\t \x01(\v2\x1a.buf.validate.Fixed32RulesH\x00R\afixed32\x126\n" +
	"\afixed64\x18\n" +
	" \x01(\v2\x1a.buf.validate.Fixed64RulesH\x00R\afixed64\x129\n" +
	"\bsfixed32\x18\v \x01(\v2\x1b.buf.validate.SFixed32RulesH\x00R\bsfixed32\x129\n" +
	"\bsfixed64\x18\f \x01(\v2\x1b.buf.validate.SFixed64RulesH\x00R\bsfixed64\x12-\n" +
	"\x04bool\x18\r \x01(\v2\x17.buf.validate.BoolRulesH\x00R\x04bool\x123\n" +
	"\x06string\x18\x0e \x01(\v2\x19.buf.validate.StringRulesH\x00R\x06string\x120\n" +
	"\x05bytes\x18\x0f \x01(\v2\x18.buf.validate.BytesRulesH\x00R\x05bytes\x12-\n" +
	"\x04enum\x18\x10 \x01(\v2\x17.buf.validate.EnumRulesH\x00R\x04enum\x129\n" +
	"\brepeated\x18\x12 \x01(\v2\x1b.buf.validate.RepeatedRulesH\x00R\brepeated\x12*\n" +
	"\x03map\x18\x13 \x01(\v2\x16.buf.validate.MapRulesH\x00R\x03map\x12*\n" +
	"\x03any\x18\x14 \x01(\v2\x16.buf.validate.AnyRulesH\x00R\x03any\x129\n" +
	"\bduration\x18\x15 \x01(\v2\x1b.buf.validate.DurationRulesH\x00R\bduration\x12<\n" +
	"\ttimestamp\x18\x16 \x01(\v2\x1c.buf.validate.TimestampRulesH\x00R\ttimestampB\x06\n" +
	"\x04type\"\xf6\x14\n" +
	"\n" +
	"FloatRules\x12v\n" +
	"\x05const\x18\x01 \x01(\x02B[\x82\xf8\x18W\n" +
	"U\n" +
	"\vfloat.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''H\x00R\x05const\x88\x01\x01\x12\x92\x01\n" +
	"\x02lt\x18\x02 \x01(\x02B}\x82\xf8\x18y\n" +
	"w\n" +
	"\bfloat.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x01R\x02lt\x88\x01\x01\x12\xa5\x01\n" +
	"\x03lte\x18\x03 \x01(\x02B\x8d\x01\x82\xf8\x18\x88\x01\n" +
	"\x85\x01\n" +
	"\tfloat.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x02R\x03lte\x88\x01\x01\x12\x9f\a\n" +
	"\x02gt\x18\x04 \x01(\x02B\x89\a\x82\xf8\x18\x84\a\n" +
	"z\n" +
	"\bfloat.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb3\x01\n" +
	"\vfloat.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbb\x01\n" +
	"\x15float.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc3\x01\n" +
	"\ffloat.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcb\x01\n" +
	"\x16float.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x03R\x02gt\x88\x01\x01\x12\xec\a\n" +
	"\x03gte\x18\x05 \x01(\x02B\xd4\a\x82\xf8\x18\xcf\a\n" +
	"\x88\x01\n" +
	"\tfloat.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc2\x01\n" +
	"\ffloat.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xca\x01\n" +
	"\x16float.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd2\x01\n" +
	"\rfloat.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xda\x01\n" +
	"\x17float.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x04R\x03gte\x88\x01\x01\x12z\n" +
	"\x02in\x18\x06 \x03(\x02Bj\x82\xf8\x18f\n" +
	"d\n" +
	"\bfloat.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12~\n" +
	"\x06not_in\x18\a \x03(\x02Bg\x82\xf8\x18c\n" +
	"a\n" +
	"\ffloat.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notInB\b\n" +
	"\x06_constB\x05\n" +
	"\x03_ltB\x06\n" +
	"\x04_lteB\x05\n" +
	"\x03_gtB\x06\n" +
	"\x04_gte\"\x86\x15\n" +
	"\vDoubleRules\x12w\n" +
	"\x05const\x18\x01 \x01(\x01B\\\x82\xf8\x18X\n" +
	"V\n" +
	"\fdouble.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''H\x00R\x05const\x88\x01\x01\x12\x93\x01\n" +
	"\x02lt\x18\x02 \x01(\x01B~\x82\xf8\x18z\n" +
	"x\n" +
	"\tdouble.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x01R\x02lt\x88\x01\x01\x12\xa6\x01\n" +
	"\x03lte\x18\x03 \x01(\x01B\x8e\x01\x82\xf8\x18\x89\x01\n" +
	"\x86\x01\n" +
	"\n" +
	"double.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x02R\x03lte\x88\x01\x01\x12\xa4\a\n" +
	"\x02gt\x18\x04 \x01(\x01B\x8e\a\x82\xf8\x18\x89\a\n" +
	"{\n" +
	"\tdouble.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb4\x01\n" +
	"\fdouble.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbc\x01\n" +
	"\x16double.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc4\x01\n" +
	"\rdouble.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcc\x01\n" +
	"\x17double.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x03R\x02gt\x88\x01\x01\x12\xf1\a\n" +
	"\x03gte\x18\x05 \x01(\x01B\xd9\a\x82\xf8\x18\xd4\a\n" +
	"\x89\x01\n" +
	"\n" +
	"double.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc3\x01\n" +
	"\rdouble.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcb\x01\n" +
	"\x17double.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd3\x01\n" +
	"\x0edouble.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdb\x01\n" +
	"\x18double.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x04R\x03gte\x88\x01\x01\x12{\n" +
	"\x02in\x18\x06 \x03(\x01Bk\x82\xf8\x18g\n" +
	"e\n" +
	"\tdouble.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12\x7f\n" +
	"\x06not_in\x18\a \x03(\x01Bh\x82\xf8\x18d\n" +
	"b\n" +
	"\rdouble.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notInB\b\n" +
	"\x06_constB\x05\n" +
	"\x03_ltB\x06\n" +
	"\x04_lteB\x05\n" +
	"\x03_gtB\x06\n" +
	"\x04_gte\"\xf6\x14\n" +
	"\n" +
	"Int32Rules\x12v\n" +
	"\x05const\x18\x01 \x01(\x05B[\x82\xf8\x18W\n" +
	"U\n" +
	"\vint32.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''H\x00R\x05const\x88\x01\x01\x12\x92\x01\n" +
	"\x02lt\x18\x02 \x01(\x05B}\x82\xf8\x18y\n" +
	"w\n" +
	"\bint32.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x01R\x02lt\x88\x01\x01\x12\xa5\x01\n" +
	"\x03lte\x18\x03 \x01(\x05B\x8d\x01\x82\xf8\x18\x88\x01\n" +
	"\x85\x01\n" +
	"\tint32.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x02R\x03lte\x88\x01\x01\x12\x9f\a\n" +
	"\x02gt\x18\x04 \x01(\x05B\x89\a\x82\xf8\x18\x84\a\n" +
	"z\n" +
	"\bint32.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb3\x01\n" +
	"\vint32.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbb\x01\n" +
	"\x15int32.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc3\x01\n" +
	"\fint32.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcb\x01\n" +
	"\x16int32.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x03R\x02gt\x88\x01\x01\x12\xec\a\n" +
	"\x03gte\x18\x05 \x01(\x05B\xd4\a\x82\xf8\x18\xcf\a\n" +
	"\x88\x01\n" +
	"\tint32.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc2\x01\n" +
	"\fint32.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xca\x01\n" +
	"\x16int32.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd2\x01\n" +
	"\rint32.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xda\x01\n" +
	"\x17int32.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x04R\x03gte\x88\x01\x01\x12z\n" +
	"\x02in\x18\x06 \x03(\x05Bj\x82\xf8\x18f\n" +
	"d\n" +
	"\bint32.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12~\n" +
	"\x06not_in\x18\a \x03(\x05Bg\x82\xf8\x18c\n" +
	"a\n" +
	"\fint32.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notInB\b\n" +
	"\x06_constB\x05\n" +
	"\x03_ltB\x06\n" +
	"\x04_lteB\x05\n" +
	"\x03_gtB\x06\n" +
	"\x04_gte\"\xf6\x14\n" +
	"\n" +
	"Int64Rules\x12v\n" +
	"\x05const\x18\x01 \x01(\x03B[\x82\xf8\x18W\n" +
	"U\n" +
	"\vint64.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''H\x00R\x05const\x88\x01\x01\x12\x92\x01\n" +
	"\x02lt\x18\x02 \x01(\x03B}\x82\xf8\x18y\n" +
	"w\n" +
	"\bint64.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x01R\x02lt\x88\x01\x01\x12\xa5\x01\n" +
	"\x03lte\x18\x03 \x01(\x03B\x8d\x01\x82\xf8\x18\x88\x01\n" +
	"\x85\x01\n" +
	"\tint64.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x02R\x03lte\x88\x01\x01\x12\x9f\a\n" +
	"\x02gt\x18\x04 \x01(\x03B\x89\a\x82\xf8\x18\x84\a\n" +
	"z\n" +
	"\bint64.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb3\x01\n" +
	"\vint64.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbb\x01\n" +
	"\x15int64.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc3\x01\n" +
	"\fint64.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcb\x01\n" +
	"\x16int64.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x03R\x02gt\x88\x01\x01\x12\xec\a\n" +
	"\x03gte\x18\x05 \x01(\x03B\xd4\a\x82\xf8\x18\xcf\a\n" +
	"\x88\x01\n" +
	"\tint64.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc2\x01\n" +
	"\fint64.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xca\x01\n" +
	"\x16int64.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd2\x01\n" +
	"\rint64.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xda\x01\n" +
	"\x17int64.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x04R\x03gte\x88\x01\x01\x12z\n" +
	"\x02in\x18\x06 \x03(\x03Bj\x82\xf8\x18f\n" +
	"d\n" +
	"\bint64.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12~\n" +
	"\x06not_in\x18\a \x03(\x03Bg\x82\xf8\x18c\n" +
	"a\n" +
	"\fint64.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notInB\b\n" +
	"\x06_constB\x05\n" +
	"\x03_ltB\x06\n" +
	"\x04_lteB\x05\n" +
	"\x03_gtB\x06\n" +
	"\x04_gte\"\x86\x15\n" +
	"\vUInt32Rules\x12w\n" +
	"\x05const\x18\x01 \x01(\rB\\\x82\xf8\x18X\n" +
	"V\n" +
	"\fuint32.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''H\x00R\x05const\x88\x01\x01\x12\x93\x01\n" +
	"\x02lt\x18\x02 \x01(\rB~\x82\xf8\x18z\n" +
	"x\n" +
	"\tuint32.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x01R\x02lt\x88\x01\x01\x12\xa6\x01\n" +
	"\x03lte\x18\x03 \x01(\rB\x8e\x01\x82\xf8\x18\x89\x01\n" +
	"\x86\x01\n" +
	"\n" +
	"uint32.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x02R\x03lte\x88\x01\x01\x12\xa4\a\n" +
	"\x02gt\x18\x04 \x01(\rB\x8e\a\x82\xf8\x18\x89\a\n" +
	"{\n" +
	"\tuint32.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb4\x01\n" +
	"\fuint32.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbc\x01\n" +
	"\x16uint32.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc4\x01\n" +
	"\ruint32.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcc\x01\n" +
	"\x17uint32.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x03R\x02gt\x88\x01\x01\x12\xf1\a\n" +
	"\x03gte\x18\x05 \x01(\rB\xd9\a\x82\xf8\x18\xd4\a\n" +
	"\x89\x01\n" +
	"\n" +
	"uint32.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc3\x01\n" +
	"\ruint32.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcb\x01\n" +
	"\x17uint32.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd3\x01\n" +
	"\x0euint32.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdb\x01\n" +
	"\x18uint32.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x04R\x03gte\x88\x01\x01\x12{\n" +
	"\x02in\x18\x06 \x03(\rBk\x82\xf8\x18g\n" +
	"e\n" +
	"\tuint32.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12\x7f\n" +
	"\x06not_in\x18\a \x03(\rBh\x82\xf8\x18d\n" +
	"b\n" +
	"\ruint32.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notInB\b\n" +
	"\x06_constB\x05\n" +
	"\x03_ltB\x06\n" +
	"\x04_lteB\x05\n" +
	"\x03_gtB\x06\n" +
	"\x04_gte\"\x86\x15\n" +
	"\vUInt64Rules\x12w\n" +
	"\x05const\x18\x01 \x01(\x04B\\\x82\xf8\x18X\n" +
	"V\n" +
	"\fuint64.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''H\x00R\x05const\x88\x01\x01\x12\x93\x01\n" +
	"\x02lt\x18\x02 \x01(\x04B~\x82\xf8\x18z\n" +
	"x\n" +
	"\tuint64.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x01R\x02lt\x88\x01\x01\x12\xa6\x01\n" +
	"\x03lte\x18\x03 \x01(\x04B\x8e\x01\x82\xf8\x18\x89\x01\n" +
	"\x86\x01\n" +
	"\n" +
	"uint64.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x02R\x03lte\x88\x01\x01\x12\xa4\a\n" +
	"\x02gt\x18\x04 \x01(\x04B\x8e\a\x82\xf8\x18\x89\a\n" +
	"{\n" +
	"\tuint64.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb4\x01\n" +
	"\fuint64.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbc\x01\n" +
	"\x16uint64.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc4\x01\n" +
	"\ruint64.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcc\x01\n" +
	"\x17uint64.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x03R\x02gt\x88\x01\x01\x12\xf1\a\n" +
	"\x03gte\x18\x05 \x01(\x04B\xd9\a\x82\xf8\x18\xd4\a\n" +
	"\x89\x01\n" +
	"\n" +
	"uint64.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc3\x01\n" +
	"\ruint64.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcb\x01\n" +
	"\x17uint64.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd3\x01\n" +
	"\x0euint64.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdb\x01\n" +
	"\x18uint64.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x04R\x03gte\x88\x01\x01\x12{\n" +
	"\x02in\x18\x06 \x03(\x04Bk\x82\xf8\x18g\n" +
	"e\n" +
	"\tuint64.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12\x7f\n" +
	"\x06not_in\x18\a \x03(\x04Bh\x82\xf8\x18d\n" +
	"b\n" +
	"\ruint64.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notInB\b\n" +
	"\x06_constB\x05\n" +
	"\x03_ltB\x06\n" +
	"\x04_lteB\x05\n" +
	"\x03_gtB\x06\n" +
	"\x04_gte\"\x86\x15\n" +
	"\vSInt32Rules\x12w\n" +
	"\x05const\x18\x01 \x01(\x11B\\\x82\xf8\x18X\n" +
	"V\n" +
	"\fsint32.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''H\x00R\x05const\x88\x01\x01\x12\x93\x01\n" +
	"\x02lt\x18\x02 \x01(\x11B~\x82\xf8\x18z\n" +
	"x\n" +
	"\tsint32.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x01R\x02lt\x88\x01\x01\x12\xa6\x01\n" +
	"\x03lte\x18\x03 \x01(\x11B\x8e\x01\x82\xf8\x18\x89\x01\n" +
	"\x86\x01\n" +
	"\n" +
	"sint32.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x02R\x03lte\x88\x01\x01\x12\xa4\a\n" +
	"\x02gt\x18\x04 \x01(\x11B\x8e\a\x82\xf8\x18\x89\a\n" +
	"{\n" +
	"\tsint32.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb4\x01\n" +
	"\fsint32.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbc\x01\n" +
	"\x16sint32.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc4\x01\n" +
	"\rsint32.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcc\x01\n" +
	"\x17sint32.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x03R\x02gt\x88\x01\x01\x12\xf1\a\n" +
	"\x03gte\x18\x05 \x01(\x11B\xd9\a\x82\xf8\x18\xd4\a\n" +
	"\x89\x01\n" +
	"\n" +
	"sint32.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc3\x01\n" +
	"\rsint32.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcb\x01\n" +
	"\x17sint32.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd3\x01\n" +
	"\x0esint32.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdb\x01\n" +
	"\x18sint32.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x04R\x03gte\x88\x01\x01\x12{\n" +
	"\x02in\x18\x06 \x03(\x11Bk\x82\xf8\x18g\n" +
	"e\n" +
	"\tsint32.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12\x7f\n" +
	"\x06not_in\x18\a \x03(\x11Bh\x82\xf8\x18d\n" +
	"b\n" +
	"\rsint32.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notInB\b\n" +
	"\x06_constB\x05\n" +
	"\x03_ltB\x06\n" +
	"\x04_lteB\x05\n" +
	"\x03_gtB\x06\n" +
	"\x04_gte\"\x86\x15\n" +
	"\vSInt64Rules\x12w\n" +
	"\x05const\x18\x01 \x01(\x12B\\\x82\xf8\x18X\n" +
	"V\n" +
	"\fsint64.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''H\x00R\x05const\x88\x01\x01\x12\x93\x01\n" +
	"\x02lt\x18\x02 \x01(\x12B~\x82\xf8\x18z\n" +
	"x\n" +
	"\tsint64.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x01R\x02lt\x88\x01\x01\x12\xa6\x01\n" +
	"\x03lte\x18\x03 \x01(\x12B\x8e\x01\x82\xf8\x18\x89\x01\n" +
	"\x86\x01\n" +
	"\n" +
	"sint64.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x02R\x03lte\x88\x01\x01\x12\xa4\a\n" +
	"\x02gt\x18\x04 \x01(\x12B\x8e\a\x82\xf8\x18\x89\a\n" +
	"{\n" +
	"\tsint64.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb4\x01\n" +
	"\fsint64.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbc\x01\n" +
	"\x16sint64.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc4\x01\n" +
	"\rsint64.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcc\x01\n" +
	"\x17sint64.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x03R\x02gt\x88\x01\x01\x12\xf1\a\n" +
	"\x03gte\x18\x05 \x01(\x12B\xd9\a\x82\xf8\x18\xd4\a\n" +
	"\x89\x01\n" +
	"\n" +
	"sint64.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc3\x01\n" +
	"\rsint64.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcb\x01\n" +
	"\x17sint64.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd3\x01\n" +
	"\x0esint64.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdb\x01\n" +
	"\x18sint64.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x04R\x03gte\x88\x01\x01\x12{\n" +
	"\x02in\x18\x06 \x03(\x12Bk\x82\xf8\x18g\n" +
	"e\n" +
	"\tsint64.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12\x7f\n" +
	"\x06not_in\x18\a \x03(\x12Bh\x82\xf8\x18d\n" +
	"b\n" +
	"\rsint64.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notInB\b\n" +
	"\x06_constB\x05\n" +
	"\x03_ltB\x06\n" +
	"\x04_lteB\x05\n" +
	"\x03_gtB\x06\n" +
	"\x04_gte\"\x97\x15\n" +
	"\fFixed32Rules\x12x\n" +
	"\x05const\x18\x01 \x01(\aB]\x82\xf8\x18Y\n" +
	"W\n" +
	"\rfixed32.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''H\x00R\x05const\x88\x01\x01\x12\x94\x01\n" +
	"\x02lt\x18\x02 \x01(\aB\x7f\x82\xf8\x18{\n" +
	"y\n" +
	"\n" +
	"fixed32.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x01R\x02lt\x88\x01\x01\x12\xa7\x01\n" +
	"\x03lte\x18\x03 \x01(\aB\x8f\x01\x82\xf8\x18\x8a\x01\n" +
	"\x87\x01\n" +
	"\vfixed32.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x02R\x03lte\x88\x01\x01\x12\xa9\a\n" +
	"\x02gt\x18\x04 \x01(\aB\x93\a\x82\xf8\x18\x8e\a\n" +
	"|\n" +
	"\n" +
	"fixed32.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb5\x01\n" +
	"\rfixed32.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbd\x01\n" +
	"\x17fixed32.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc5\x01\n" +
	"\x0efixed32.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcd\x01\n" +
	"\x18fixed32.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x03R\x02gt\x88\x01\x01\x12\xf6\a\n" +
	"\x03gte\x18\x05 \x01(\aB\xde\a\x82\xf8\x18\xd9\a\n" +
	"\x8a\x01\n" +
	"\vfixed32.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc4\x01\n" +
	"\x0efixed32.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcc\x01\n" +
	"\x18fixed32.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd4\x01\n" +
	"\x0ffixed32.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdc\x01\n" +
	"\x19fixed32.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x04R\x03gte\x88\x01\x01\x12|\n" +
	"\x02in\x18\x06 \x03(\aBl\x82\xf8\x18h\n" +
	"f\n" +
	"\n" +
	"fixed32.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12\x80\x01\n" +
	"\x06not_in\x18\a \x03(\aBi\x82\xf8\x18e\n" +
	"c\n" +
	"\x0efixed32.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notInB\b\n" +
	"\x06_constB\x05\n" +
	"\x03_ltB\x06\n" +
	"\x04_lteB\x05\n" +
	"\x03_gtB\x06\n" +
	"\x04_gte\"\x97\x15\n" +
	"\fFixed64Rules\x12x\n" +
	"\x05const\x18\x01 \x01(\x06B]\x82\xf8\x18Y\n" +
	"W\n" +
	"\rfixed64.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''H\x00R\x05const\x88\x01\x01\x12\x94\x01\n" +
	"\x02lt\x18\x02 \x01(\x06B\x7f\x82\xf8\x18{\n" +
	"y\n" +
	"\n" +
	"fixed64.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x01R\x02lt\x88\x01\x01\x12\xa7\x01\n" +
	"\x03lte\x18\x03 \x01(\x06B\x8f\x01\x82\xf8\x18\x8a\x01\n" +
	"\x87\x01\n" +
	"\vfixed64.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x02R\x03lte\x88\x01\x01\x12\xa9\a\n" +
	"\x02gt\x18\x04 \x01(\x06B\x93\a\x82\xf8\x18\x8e\a\n" +
	"|\n" +
	"\n" +
	"fixed64.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb5\x01\n" +
	"\rfixed64.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbd\x01\n" +
	"\x17fixed64.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc5\x01\n" +
	"\x0efixed64.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcd\x01\n" +
	"\x18fixed64.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x03R\x02gt\x88\x01\x01\x12\xf6\a\n" +
	"\x03gte\x18\x05 \x01(\x06B\xde\a\x82\xf8\x18\xd9\a\n" +
	"\x8a\x01\n" +
	"\vfixed64.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc4\x01\n" +
	"\x0efixed64.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcc\x01\n" +
	"\x18fixed64.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd4\x01\n" +
	"\x0ffixed64.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdc\x01\n" +
	"\x19fixed64.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x04R\x03gte\x88\x01\x01\x12|\n" +
	"\x02in\x18\x06 \x03(\x06Bl\x82\xf8\x18h\n" +
	"f\n" +
	"\n" +
	"fixed64.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12\x80\x01\n" +
	"\x06not_in\x18\a \x03(\x06Bi\x82\xf8\x18e\n" +
	"c\n" +
	"\x0efixed64.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notInB\b\n" +
	"\x06_constB\x05\n" +
	"\x03_ltB\x06\n" +
	"\x04_lteB\x05\n" +
	"\x03_gtB\x06\n" +
	"\x04_gte\"\xa8\x15\n" +
	"\rSFixed32Rules\x12y\n" +
	"\x05const\x18\x01 \x01(\x0fB^\x82\xf8\x18Z\n" +
	"X\n" +
	"\x0esfixed32.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''H\x00R\x05const\x88\x01\x01\x12\x96\x01\n" +
	"\x02lt\x18\x02 \x01(\x0fB\x80\x01\x82\xf8\x18|\n" +
	"z\n" +
	"\vsfixed32.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x01R\x02lt\x88\x01\x01\x12\xa8\x01\n" +
	"\x03lte\x18\x03 \x01(\x0fB\x90\x01\x82\xf8\x18\x8b\x01\n" +
	"\x88\x01\n" +
	"\fsfixed32.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x02R\x03lte\x88\x01\x01\x12\xae\a\n" +
	"\x02gt\x18\x04 \x01(\x0fB\x98\a\x82\xf8\x18\x93\a\n" +
	"}\n" +
	"\vsfixed32.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb6\x01\n" +
	"\x0esfixed32.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbe\x01\n" +
	"\x18sfixed32.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc6\x01\n" +
	"\x0fsfixed32.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xce\x01\n" +
	"\x19sfixed32.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x03R\x02gt\x88\x01\x01\x12\xfb\a\n" +
	"\x03gte\x18\x05 \x01(\x0fB\xe3\a\x82\xf8\x18\xde\a\n" +
	"\x8b\x01\n" +
	"\fsfixed32.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc5\x01\n" +
	"\x0fsfixed32.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcd\x01\n" +
	"\x19sfixed32.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd5\x01\n" +
	"\x10sfixed32.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdd\x01\n" +
	"\x1asfixed32.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x04R\x03gte\x88\x01\x01\x12}\n" +
	"\x02in\x18\x06 \x03(\x0fBm\x82\xf8\x18i\n" +
	"g\n" +
	"\vsfixed32.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12\x81\x01\n" +
	"\x06not_in\x18\a \x03(\x0fBj\x82\xf8\x18f\n" +
	"d\n" +
	"\x0fsfixed32.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notInB\b\n" +
	"\x06_constB\x05\n" +
	"\x03_ltB\x06\n" +
	"\x04_lteB\x05\n" +
	"\x03_gtB\x06\n" +
	"\x04_gte\"\xa8\x15\n" +
	"\rSFixed64Rules\x12y\n" +
	"\x05const\x18\x01 \x01(\x10B^\x82\xf8\x18Z\n" +
	"X\n" +
	"\x0esfixed64.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''H\x00R\x05const\x88\x01\x01\x12\x96\x01\n" +
	"\x02lt\x18\x02 \x01(\x10B\x80\x01\x82\xf8\x18|\n" +
	"z\n" +
	"\vsfixed64.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x01R\x02lt\x88\x01\x01\x12\xa8\x01\n" +
	"\x03lte\x18\x03 \x01(\x10B\x90\x01\x82\xf8\x18\x8b\x01\n" +
	"\x88\x01\n" +
	"\fsfixed64.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x02R\x03lte\x88\x01\x01\x12\xae\a\n" +
	"\x02gt\x18\x04 \x01(\x10B\x98\a\x82\xf8\x18\x93\a\n" +
	"}\n" +
	"\vsfixed64.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb6\x01\n" +
	"\x0esfixed64.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbe\x01\n" +
	"\x18sfixed64.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc6\x01\n" +
	"\x0fsfixed64.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xce\x01\n" +
	"\x19sfixed64.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x03R\x02gt\x88\x01\x01\x12\xfb\a\n" +
	"\x03gte\x18\x05 \x01(\x10B\xe3\a\x82\xf8\x18\xde\a\n" +
	"\x8b\x01\n" +
	"\fsfixed64.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc5\x01\n" +
	"\x0fsfixed64.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcd\x01\n" +
	"\x19sfixed64.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd5\x01\n" +
	"\x10sfixed64.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdd\x01\n" +
	"\x1asfixed64.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x04R\x03gte\x88\x01\x01\x12}\n" +
	"\x02in\x18\x06 \x03(\x10Bm\x82\xf8\x18i\n" +
	"g\n" +
	"\vsfixed64.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12\x81\x01\n" +
	"\x06not_in\x18\a \x03(\x10Bj\x82\xf8\x18f\n" +
	"d\n" +
	"\x0fsfixed64.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notInB\b\n" +
	"\x06_constB\x05\n" +
	"\x03_ltB\x06\n" +
	"\x04_lteB\x05\n" +
	"\x03_gtB\x06\n" +
	"\x04_gte\"\x8c\x01\n" +
	"\tBoolRules\x12u\n" +
	"\x05const\x18\x01 \x01(\bBZ\x82\xf8\x18V\n" +
	"T\n" +
	"\n" +
	"bool.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''H\x00R\x05const\x88\x01\x01B\b\n" +
	"\x06_const\"\xd4\x1e\n" +
	"\vStringRules\x12y\n" +
	"\x05const\x18\x01 \x01(\tB^\x82\xf8\x18Z\n" +
	"X\n" +
	"\fstring.const\x1aHthis != rules.const ? 'value must equal `%s`'.format([rules.const]) : ''H\x01R\x05const\x88\x01\x01\x12\x89\x01\n" +
	"\x03len\x18\x13 \x01(\x04Br\x82\xf8\x18n\n" +
	"l\n" +
	"\n" +
	"string.len\x1a^uint(this.size()) != rules.len ? 'value length must be %s characters'.format([rules.len]) : ''H\x02R\x03len\x88\x01\x01\x12\xa7\x01\n" +
	"\amin_len\x18\x02 \x01(\x04B\x88\x01\x82\xf8\x18\x83\x01\n" +
	"\x80\x01\n" +
	"\x0estring.min_len\x1anuint(this.size()) < rules.min_len ? 'value length must be at least %s characters'.format([rules.min_len]) : ''H\x03R\x06minLen\x88\x01\x01\x12\xa5\x01\n" +
	"\amax_len\x18\x03 \x01(\x04B\x86\x01\x82\xf8\x18\x81\x01\n" +
	"\x7f\n" +
	"\x0estring.max_len\x1amuint(this.size()) > rules.max_len ? 'value length must be at most %s characters'.format([rules.max_len]) : ''H\x04R\x06maxLen\x88\x01\x01\x12\xab\x01\n" +
	"\tlen_bytes\x18\x14 \x01(\x04B\x88\x01\x82\xf8\x18\x83\x01\n" +
	"\x80\x01\n" +
	"\x10string.len_bytes\x1aluint(bytes(this).size()) != rules.len_bytes ? 'value length must be %s bytes'.format([rules.len_bytes]) : ''H\x05R\blenBytes\x88\x01\x01\x12\xb3\x01\n" +
	"\tmin_bytes\x18\x04 \x01(\x04B\x90\x01\x82\xf8\x18\x8b\x01\n" +
	"\x88\x01\n" +
	"\x10string.min_bytes\x1atuint(bytes(this).size()) < rules.min_bytes ? 'value length must be at least %s bytes'.format([rules.min_bytes]) : ''H\x06R\bminBytes\x88\x01\x01\x12\xb2\x01\n" +
	"\tmax_bytes\x18\x05 \x01(\x04B\x8f\x01\x82\xf8\x18\x8a\x01\n" +
	"\x87\x01\n" +
	"\x10string.max_bytes\x1asuint(bytes(this).size()) > rules.max_bytes ? 'value length must be at most %s bytes'.format([rules.max_bytes]) : ''H\aR\bmaxBytes\x88\x01\x01\x12\x9c\x01\n" +
	"\apattern\x18\x06 \x01(\tB}\x82\xf8\x18y\n" +
	"w\n" +
	"\x0estring.pattern\x1ae!this.matches(rules.pattern) ? 'value does not match regex pattern `%s`'.format([rules.pattern]) : ''H\bR\apattern\x88\x01\x01\x12\x92\x01\n" +
	"\x06prefix\x18\a \x01(\tBu\x82\xf8\x18q\n" +
	"o\n" +
	"\rstring.prefix\x1a^!this.startsWith(rules.prefix) ? 'value does not have prefix `%s`'.format([rules.prefix]) : ''H\tR\x06prefix\x88\x01\x01\x12\x90\x01\n" +
	"\x06suffix\x18\b \x01(\tBs\x82\xf8\x18o\n" +
	"m\n" +
	"\rstring.suffix\x1a\\!this.endsWith(rules.suffix) ? 'value does not have suffix `%s`'.format([rules.suffix]) : ''H\n" +
	"R\x06suffix\x88\x01\x01\x12\xa0\x01\n" +
	"\bcontains\x18\t \x01(\tB\x7f\x82\xf8\x18{\n" +
	"y\n" +
	"\x0fstring.contains\x1af!this.contains(rules.contains) ? 'value does not contain substring `%s`'.format([rules.contains]) : ''H\vR\bcontains\x88\x01\x01\x12\xab\x01\n" +
	"\fnot_contains\x18\x17 \x01(\tB\x82\x01\x82\xf8\x18~\n" +
	"|\n" +
	"\x13string.not_contains\x1aethis.contains(rules.not_contains) ? 'value contains substring `%s`'.format([rules.not_contains]) : ''H\fR\vnotContains\x88\x01\x01\x12{\n" +
	"\x02in\x18\n" +
	" \x03(\tBk\x82\xf8\x18g\n" +
	"e\n" +
	"\tstring.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12\x7f\n" +
	"\x06not_in\x18\v \x03(\tBh\x82\xf8\x18d\n" +
	"b\n" +
	"\rstring.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x12a\n" +
	"\x05email\x18\f \x01(\bBI\x82\xf8\x18E\n" +
	"C\n" +
	"\fstring.email\x12#value must be a valid email address\x1a\x0ethis.isEmail()H\x00R\x05email\x12h\n" +
	"\bhostname\x18\r \x01(\bBJ\x82\xf8\x18F\n" +
	"D\n" +
	"\x0fstring.hostname\x12\x1evalue must be a valid hostname\x1a\x11this.isHostname()H\x00R\bhostname\x12R\n" +
	"\x02ip\x18\x0e \x01(\bB@\x82\xf8\x18<\n" +
	":\n" +
	"\tstring.ip\x12 value must be a valid IP address\x1a\vthis.isIp()H\x00R\x02ip\x12[\n" +
	"\x04ipv4\x18\x0f \x01(\bBE\x82\xf8\x18A\n" +
	"?\n" +
	"\vstring.ipv4\x12\"value must be a valid IPv4 address\x1a\fthis.isIp(4)H\x00R\x04ipv4\x12[\n" +
	"\x04ipv6\x18\x10 \x01(\bBE\x82\xf8\x18A\n" +
	"?\n" +
	"\vstring.ipv6\x12\"value must be a valid IPv6 address\x1a\fthis.isIp(6)H\x00R\x04ipv6\x12O\n" +
	"\x03uri\x18\x11 \x01(\bB;\x82\xf8\x187\n" +
	"5\n" +
	"\n" +
	"string.uri\x12\x19value must be a valid URI\x1a\fthis.isUri()H\x00R\x03uri\x12]\n" +
	"\auri_ref\x18\x12 \x01(\bBB\x82\xf8\x18>\n" +
	"<\n" +
	"\x0estring.uri_ref\x12\x19value must be a valid URI\x1a\x0fthis.isUriRef()H\x00R\x06uriRef\x12\x83\x01\n" +
	"\aaddress\x18\x15 \x01(\bBg\x82\xf8\x18c\n" +
	"a\n" +
	"\x0estring.address\x12-value must be a valid hostname, or ip address\x1a this.isHostname() || this.isIp()H\x00R\aaddress\x12\xb1\x01\n" +
	"\x04uuid\x18\x16 \x01(\bB\x9a\x01\x82\xf8\x18\x95\x01\n" +
	"\x92\x01\n" +
	"\vstring.uuid\x1a\x82\x01!this.matches('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$') ? 'value must be a valid UUID' : ''H\x00R\x04uuid\x12\xad\x04\n" +
	"\x10well_known_regex\x18\x18 \x01(\x0e2\x18.buf.validate.KnownRegexB\xe6\x03\x82\xf8\x18\xe1\x03\n" +
	"\xeb\x01\n" +
	"#string.well_known_regex.header_name\x1a\xc3\x01rules.well_known_regex == 1 && !this.matches(!has(rules.strict) || rules.strict ?'^:?[0-9a-zA-Z!#$%&\\'*+-.^_|~\\x60]+$' :'^[^\\u0000\\u000A\\u000D]+$') ? 'value must be a valid HTTP header name' : ''\n" +
	"\xf0\x01\n" +
	"$string.well_known_regex.header_value\x1a\xc7\x01rules.well_known_regex == 2 && !this.matches(!has(rules.strict) || rules.strict ?'^[^\\u0000-\\u0008\\u000A-\\u001F\\u007F]*$' :'^[^\\u0000\\u000A\\u000D]*$') ? 'value must be a valid HTTP header value' : ''H\x00R\x0ewellKnownRegex\x12\x1b\n" +
	"\x06strict\x18\x19 \x01(\bH\rR\x06strict\x88\x01\x01B\f\n" +
	"\n" +
	"well_knownB\b\n" +
	"\x06_constB\x06\n" +
	"\x04_lenB\n" +
	"\n" +
	"\b_min_lenB\n" +
	"\n" +
	"\b_max_lenB\f\n" +
	"\n" +
	"_len_bytesB\f\n" +
	"\n" +
	"_min_bytesB\f\n" +
	"\n" +
	"_max_bytesB\n" +
	"\n" +
	"\b_patternB\t\n" +
	"\a_prefixB\t\n" +
	"\a_suffixB\v\n" +
	"\t_containsB\x0f\n" +
	"\r_not_containsB\t\n" +
	"\a_strict\"\xe9\x0e\n" +
	"\n" +
	"BytesRules\x12s\n" +
	"\x05const\x18\x01 \x01(\fBX\x82\xf8\x18T\n" +
	"R\n" +
	"\vbytes.const\x1aCthis != rules.const ? 'value must be %x'.format([rules.const]) : ''H\x01R\x05const\x88\x01\x01\x12\x83\x01\n" +
	"\x03len\x18\r \x01(\x04Bl\x82\xf8\x18h\n" +
	"f\n" +
	"\tbytes.len\x1aYuint(this.size()) != rules.len ? 'value length must be %s bytes'.format([rules.len]) : ''H\x02R\x03len\x88\x01\x01\x12\x9f\x01\n" +
	"\amin_len\x18\x02 \x01(\x04B\x80\x01\x82\xf8\x18|\n" +
	"z\n" +
	"\rbytes.min_len\x1aiuint(this.size()) < rules.min_len ? 'value length must be at least %s bytes'.format([rules.min_len]) : ''H\x03R\x06minLen\x88\x01\x01\x12\x96\x01\n" +
	"\amax_len\x18\x03 \x01(\x04Bx\x82\xf8\x18t\n" +
	"r\n" +
	"\rbytes.max_len\x1aauint(this.size()) > rules.max_len ? 'value must be at most %s bytes'.format([rules.max_len]) : ''H\x04R\x06maxLen\x88\x01\x01\x12\xa0\x01\n" +
	"\apattern\x18\x04 \x01(\tB\x80\x01\x82\xf8\x18|\n" +
	"z\n" +
	"\rbytes.pattern\x1ai!string(this).matches(rules.pattern) ? 'value must match regex pattern `%s`'.format([rules.pattern]) : ''H\x05R\apattern\x88\x01\x01\x12\x8f\x01\n" +
	"\x06prefix\x18\x05 \x01(\fBr\x82\xf8\x18n\n" +
	"l\n" +
	"\fbytes.prefix\x1a\\!this.startsWith(rules.prefix) ? 'value does not have prefix %x'.format([rules.prefix]) : ''H\x06R\x06prefix\x88\x01\x01\x12\x8d\x01\n" +
	"\x06suffix\x18\x06 \x01(\fBp\x82\xf8\x18l\n" +
	"j\n" +
	"\fbytes.suffix\x1aZ!this.endsWith(rules.suffix) ? 'value does not have suffix %x'.format([rules.suffix]) : ''H\aR\x06suffix\x88\x01\x01\x12\x93\x01\n" +
	"\bcontains\x18\a \x01(\fBr\x82\xf8\x18n\n" +
	"l\n" +
	"\x0ebytes.contains\x1aZ!this.contains(rules.contains) ? 'value does not contain %x'.format([rules.contains]) : ''H\bR\bcontains\x88\x01\x01\x12\x9c\x01\n" +
	"\x02in\x18\b \x03(\fB\x8b\x01\x82\xf8\x18\x86\x01\n" +
	"\x83\x01\n" +
	"\bbytes.in\x1awdyn(rules)['in'].size() > 0 && !(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12~\n" +
	"\x06not_in\x18\t \x03(\fBg\x82\xf8\x18c\n" +
	"a\n" +
	"\fbytes.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x12s\n" +
	"\x02ip\x18\n" +
	" \x01(\bBa\x82\xf8\x18]\n" +
	"[\n" +
	"\bbytes.ip\x1aOthis.size() != 4 && this.size() != 16 ? 'value must be a valid IP address' : ''H\x00R\x02ip\x12f\n" +
	"\x04ipv4\x18\v \x01(\bBP\x82\xf8\x18L\n" +
	"J\n" +
	"\n" +
	"bytes.ipv4\x1a<this.size() != 4 ? 'value must be a valid IPv4 address' : ''H\x00R\x04ipv4\x12g\n" +
	"\x04ipv6\x18\f \x01(\bBQ\x82\xf8\x18M\n" +
	"K\n" +
	"\n" +
	"bytes.ipv6\x1a=this.size() != 16 ? 'value must be a valid IPv6 address' : ''H\x00R\x04ipv6B\f\n" +
	"\n" +
	"well_knownB\b\n" +
	"\x06_constB\x06\n" +
	"\x04_lenB\n" +
	"\n" +
	"\b_min_lenB\n" +
	"\n" +
	"\b_max_lenB\n" +
	"\n" +
	"\b_patternB\t\n" +
	"\a_prefixB\t\n" +
	"\a_suffixB\v\n" +
	"\t_contains\"\xbf\x03\n" +
	"\tEnumRules\x12u\n" +
	"\x05const\x18\x01 \x01(\x05BZ\x82\xf8\x18V\n" +
	"T\n" +
	"\n" +
	"enum.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''H\x00R\x05const\x88\x01\x01\x12&\n" +
	"\fdefined_only\x18\x02 \x01(\bH\x01R\vdefinedOnly\x88\x01\x01\x12y\n" +
	"\x02in\x18\x03 \x03(\x05Bi\x82\xf8\x18e\n" +
	"c\n" +
	"\aenum.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12}\n" +
	"\x06not_in\x18\x04 \x03(\x05Bf\x82\xf8\x18b\n" +
	"`\n" +
	"\venum.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notInB\b\n" +
	"\x06_constB\x0f\n" +
	"\r_defined_only\"\xd0\x04\n" +
	"\rRepeatedRules\x12\xae\x01\n" +
	"\tmin_items\x18\x01 \x01(\x04B\x8b\x01\x82\xf8\x18\x86\x01\n" +
	"\x83\x01\n" +
	"\x12repeated.min_items\x1amuint(this.size()) < rules.min_items ? 'value must contain at least %d item(s)'.format([rules.min_items]) : ''H\x00R\bminItems\x88\x01\x01\x12\xb2\x01\n" +
	"\tmax_items\x18\x02 \x01(\x04B\x8f\x01\x82\xf8\x18\x8a\x01\n" +
	"\x87\x01\n" +
	"\x12repeated.max_items\x1aquint(this.size()) > rules.max_items ? 'value must contain no more than %s item(s)'.format([rules.max_items]) : ''H\x01R\bmaxItems\x88\x01\x01\x12m\n" +
	"\x06unique\x18\x03 \x01(\bBP\x82\xf8\x18L\n" +
	"J\n" +
	"\x0frepeated.unique\x12(repeated value must contain unique items\x1a\rthis.unique()H\x02R\x06unique\x88\x01\x01\x129\n" +
	"\x05items\x18\x04 \x01(\v2\x1e.buf.validate.FieldConstraintsH\x03R\x05items\x88\x01\x01B\f\n" +
	"\n" +
	"_min_itemsB\f\n" +
	"\n" +
	"_max_itemsB\t\n" +
	"\a_uniqueB\b\n" +
	"\x06_items\"\xf3\x03\n" +
	"\bMapRules\x12\x9f\x01\n" +
	"\tmin_pairs\x18\x01 \x01(\x04B}\x82\xf8\x18y\n" +
	"w\n" +
	"\rmap.min_pairs\x1afuint(this.size()) < rules.min_pairs ? 'map must be at least %d entries'.format([rules.min_pairs]) : ''H\x00R\bminPairs\x88\x01\x01\x12\x9e\x01\n" +
	"\tmax_pairs\x18\x02 \x01(\x04B|\x82\xf8\x18x\n" +
	"v\n" +
	"\rmap.max_pairs\x1aeuint(this.size()) > rules.max_pairs ? 'map must be at most %d entries'.format([rules.max_pairs]) : ''H\x01R\bmaxPairs\x88\x01\x01\x127\n" +
	"\x04keys\x18\x04 \x01(\v2\x1e.buf.validate.FieldConstraintsH\x02R\x04keys\x88\x01\x01\x12;\n" +
	"\x06values\x18\x05 \x01(\v2\x1e.buf.validate.FieldConstraintsH\x03R\x06values\x88\x01\x01B\f\n" +
	"\n" +
	"_min_pairsB\f\n" +
	"\n" +
	"_max_pairsB\a\n" +
	"\x05_keysB\t\n" +
	"\a_values\"1\n" +
	"\bAnyRules\x12\x0e\n" +
	"\x02in\x18\x02 \x03(\tR\x02in\x12\x15\n" +
	"\x06not_in\x18\x03 \x03(\tR\x05notIn\"\xe7\x16\n" +
	"\rDurationRules\x12\x94\x01\n" +
	"\x05const\x18\x02 \x01(\v2\x19.google.protobuf.DurationB^\x82\xf8\x18Z\n" +
	"X\n" +
	"\x0eduration.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''H\x00R\x05const\x88\x01\x01\x12\xb1\x01\n" +
	"\x02lt\x18\x03 \x01(\v2\x19.google.protobuf.DurationB\x80\x01\x82\xf8\x18|\n" +
	"z\n" +
	"\vduration.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x01R\x02lt\x88\x01\x01\x12\xc3\x01\n" +
	"\x03lte\x18\x04 \x01(\v2\x19.google.protobuf.DurationB\x90\x01\x82\xf8\x18\x8b\x01\n" +
	"\x88\x01\n" +
	"\fduration.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x02R\x03lte\x88\x01\x01\x12\xc9\a\n" +
	"\x02gt\x18\x05 \x01(\v2\x19.google.protobuf.DurationB\x98\a\x82\xf8\x18\x93\a\n" +
	"}\n" +
	"\vduration.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb6\x01\n" +
	"\x0eduration.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbe\x01\n" +
	"\x18duration.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc6\x01\n" +
	"\x0fduration.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xce\x01\n" +
	"\x19duration.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x03R\x02gt\x88\x01\x01\x12\x96\b\n" +
	"\x03gte\x18\x06 \x01(\v2\x19.google.protobuf.DurationB\xe3\a\x82\xf8\x18\xde\a\n" +
	"\x8b\x01\n" +
	"\fduration.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc5\x01\n" +
	"\x0fduration.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcd\x01\n" +
	"\x19duration.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd5\x01\n" +
	"\x10duration.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdd\x01\n" +
	"\x1aduration.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x04R\x03gte\x88\x01\x01\x12\x98\x01\n" +
	"\x02in\x18\a \x03(\v2\x19.google.protobuf.DurationBm\x82\xf8\x18i\n" +
	"g\n" +
	"\vduration.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12\x9c\x01\n" +
	"\x06not_in\x18\b \x03(\v2\x19.google.protobuf.DurationBj\x82\xf8\x18f\n" +
	"d\n" +
	"\x0fduration.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notInB\b\n" +
	"\x06_constB\x05\n" +
	"\x03_ltB\x06\n" +
	"\x04_lteB\x05\n" +
	"\x03_gtB\x06\n" +
	"\x04_gte\"\xfb\x17\n" +
	"\x0eTimestampRules\x12\x96\x01\n" +
	"\x05const\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampB_\x82\xf8\x18[\n" +
	"Y\n" +
	"\x0ftimestamp.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''H\x00R\x05const\x88\x01\x01\x12\xb3\x01\n" +
	"\x02lt\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB\x81\x01\x82\xf8\x18}\n" +
	"{\n" +
	"\ftimestamp.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x01R\x02lt\x88\x01\x01\x12\xc5\x01\n" +
	"\x03lte\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampB\x91\x01\x82\xf8\x18\x8c\x01\n" +
	"\x89\x01\n" +
	"\rtimestamp.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x02R\x03lte\x88\x01\x01\x12\xcf\a\n" +
	"\x02gt\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\x9d\a\x82\xf8\x18\x98\a\n" +
	"~\n" +
	"\ftimestamp.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb7\x01\n" +
	"\x0ftimestamp.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbf\x01\n" +
	"\x19timestamp.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc7\x01\n" +
	"\x10timestamp.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcf\x01\n" +
	"\x1atimestamp.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x03R\x02gt\x88\x01\x01\x12\x9c\b\n" +
	"\x03gte\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampB\xe8\a\x82\xf8\x18\xe3\a\n" +
	"\x8c\x01\n" +
	"\rtimestamp.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc6\x01\n" +
	"\x10timestamp.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xce\x01\n" +
	"\x1atimestamp.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd6\x01\n" +
	"\x11timestamp.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xde\x01\n" +
	"\x1btimestamp.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x04R\x03gte\x88\x01\x01\x12e\n" +
	"\x06lt_now\x18\a \x01(\bBI\x82\xf8\x18E\n" +
	"C\n" +
	"\x10timestamp.lt_now\x1a/this > now ? 'value must be less than now' : ''H\x05R\x05ltNow\x88\x01\x01\x12h\n" +
	"\x06gt_now\x18\b \x01(\bBL\x82\xf8\x18H\n" +
	"F\n" +
	"\x10timestamp.gt_now\x1a2this < now ? 'value must be greater than now' : ''H\x06R\x05gtNow\x88\x01\x01\x12\xc6\x01\n" +
	"\x06within\x18\t \x01(\v2\x19.google.protobuf.DurationB\x8d\x01\x82\xf8\x18\x88\x01\n" +
	"\x85\x01\n" +
	"\x10timestamp.within\x1aqthis < now-rules.within || this > now+rules.within ? 'value must be within %s of now'.format([rules.within]) : ''H\aR\x06within\x88\x01\x01B\b\n" +
	"\x06_constB\x05\n" +
	"\x03_ltB\x06\n" +
	"\x04_lteB\x05\n" +
	"\x03_gtB\x06\n" +
	"\x04_gteB\t\n" +
	"\a_lt_nowB\t\n" +
	"\a_gt_nowB\t\n" +
	"\a_within*n\n" +
	"\n" +
	"KnownRegex\x12\x1b\n" +
	"\x17KNOWN_REGEX_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cKNOWN_REGEX_HTTP_HEADER_NAME\x10\x01\x12!\n" +
	"\x1dKNOWN_REGEX_HTTP_HEADER_VALUE\x10\x02:`\n" +
	"\amessage\x12\x1f.google.protobuf.MessageOptions\x18\xff\x8e\x03 \x01(\v2 .buf.validate.MessageConstraintsR\amessage\x88\x01\x01:X\n" +
	"\x05oneof\x12\x1d.google.protobuf.OneofOptions\x18\xff\x8e\x03 \x01(\v2\x1e.buf.validate.OneofConstraintsR\x05oneof\x88\x01\x01:X\n" +
	"\x05field\x12\x1d.google.protobuf.FieldOptions\x18\xff\x8e\x03 \x01(\v2\x1e.buf.validate.FieldConstraintsR\x05field\x88\x01\x01BIZGbuf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validateb\x06proto3"

var (
	file_buf_validate_validate_proto_rawDescOnce sync.Once
	file_buf_validate_validate_proto_rawDescData []byte
)

func file_buf_validate_validate_proto_rawDescGZIP() []byte {
	file_buf_validate_validate_proto_rawDescOnce.Do(func() {
		file_buf_validate_validate_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_buf_validate_validate_proto_rawDesc), len(file_buf_validate_validate_proto_rawDesc)))
	})
	return file_buf_validate_validate_proto_rawDescData
}

var file_buf_validate_validate_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_buf_validate_validate_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_buf_validate_validate_proto_goTypes = []any{
	(KnownRegex)(0),                     // 0: buf.validate.KnownRegex
	(*MessageConstraints)(nil),          // 1: buf.validate.MessageConstraints
	(*OneofConstraints)(nil),            // 2: buf.validate.OneofConstraints
	(*FieldConstraints)(nil),            // 3: buf.validate.FieldConstraints
	(*FloatRules)(nil),                  // 4: buf.validate.FloatRules
	(*DoubleRules)(nil),                 // 5: buf.validate.DoubleRules
	(*Int32Rules)(nil),                  // 6: buf.validate.Int32Rules
	(*Int64Rules)(nil),                  // 7: buf.validate.Int64Rules
	(*UInt32Rules)(nil),                 // 8: buf.validate.UInt32Rules
	(*UInt64Rules)(nil),                 // 9: buf.validate.UInt64Rules
	(*SInt32Rules)(nil),                 // 10: buf.validate.SInt32Rules
	(*SInt64Rules)(nil),                 // 11: buf.validate.SInt64Rules
	(*Fixed32Rules)(nil),                // 12: buf.validate.Fixed32Rules
	(*Fixed64Rules)(nil),                // 13: buf.validate.Fixed64Rules
	(*SFixed32Rules)(nil),               // 14: buf.validate.SFixed32Rules
	(*SFixed64Rules)(nil),               // 15: buf.validate.SFixed64Rules
	(*BoolRules)(nil),                   // 16: buf.validate.BoolRules
	(*StringRules)(nil),                 // 17: buf.validate.StringRules
	(*BytesRules)(nil),                  // 18: buf.validate.BytesRules
	(*EnumRules)(nil),                   // 19: buf.validate.EnumRules
	(*RepeatedRules)(nil),               // 20: buf.validate.RepeatedRules
	(*MapRules)(nil),                    // 21: buf.validate.MapRules
	(*AnyRules)(nil),                    // 22: buf.validate.AnyRules
	(*DurationRules)(nil),               // 23: buf.validate.DurationRules
	(*TimestampRules)(nil),              // 24: buf.validate.TimestampRules
	(*Constraint)(nil),                  // 25: buf.validate.Constraint
	(*durationpb.Duration)(nil),         // 26: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),       // 27: google.protobuf.Timestamp
	(*descriptorpb.MessageOptions)(nil), // 28: google.protobuf.MessageOptions
	(*descriptorpb.OneofOptions)(nil),   // 29: google.protobuf.OneofOptions
	(*descriptorpb.FieldOptions)(nil),   // 30: google.protobuf.FieldOptions
}
var file_buf_validate_validate_proto_depIdxs = []int32{
	25, // 0: buf.validate.MessageConstraints.cel:type_name -> buf.validate.Constraint
	25, // 1: buf.validate.FieldConstraints.cel:type_name -> buf.validate.Constraint
	4,  // 2: buf.validate.FieldConstraints.float:type_name -> buf.validate.FloatRules
	5,  // 3: buf.validate.FieldConstraints.double:type_name -> buf.validate.DoubleRules
	6,  // 4: buf.validate.FieldConstraints.int32:type_name -> buf.validate.Int32Rules
	7,  // 5: buf.validate.FieldConstraints.int64:type_name -> buf.validate.Int64Rules
	8,  // 6: buf.validate.FieldConstraints.uint32:type_name -> buf.validate.UInt32Rules
	9,  // 7: buf.validate.FieldConstraints.uint64:type_name -> buf.validate.UInt64Rules
	10, // 8: buf.validate.FieldConstraints.sint32:type_name -> buf.validate.SInt32Rules
	11, // 9: buf.validate.FieldConstraints.sint64:type_name -> buf.validate.SInt64Rules
	12, // 10: buf.validate.FieldConstraints.fixed32:type_name -> buf.validate.Fixed32Rules
	13, // 11: buf.validate.FieldConstraints.fixed64:type_name -> buf.validate.Fixed64Rules
	14, // 12: buf.validate.FieldConstraints.sfixed32:type_name -> buf.validate.SFixed32Rules
	15, // 13: buf.validate.FieldConstraints.sfixed64:type_name -> buf.validate.SFixed64Rules
	16, // 14: buf.validate.FieldConstraints.bool:type_name -> buf.validate.BoolRules
	17, // 15: buf.validate.FieldConstraints.string:type_name -> buf.validate.StringRules
	18, // 16: buf.validate.FieldConstraints.bytes:type_name -> buf.validate.BytesRules
	19, // 17: buf.validate.FieldConstraints.enum:type_name -> buf.validate.EnumRules
	20, // 18: buf.validate.FieldConstraints.repeated:type_name -> buf.validate.RepeatedRules
	21, // 19: buf.validate.FieldConstraints.map:type_name -> buf.validate.MapRules
	22, // 20: buf.validate.FieldConstraints.any:type_name -> buf.validate.AnyRules
	23, // 21: buf.validate.FieldConstraints.duration:type_name -> buf.validate.DurationRules
	24, // 22: buf.validate.FieldConstraints.timestamp:type_name -> buf.validate.TimestampRules
	0,  // 23: buf.validate.StringRules.well_known_regex:type_name -> buf.validate.KnownRegex
	3,  // 24: buf.validate.RepeatedRules.items:type_name -> buf.validate.FieldConstraints
	3,  // 25: buf.validate.MapRules.keys:type_name -> buf.validate.FieldConstraints
	3,  // 26: buf.validate.MapRules.values:type_name -> buf.validate.FieldConstraints
	26, // 27: buf.validate.DurationRules.const:type_name -> google.protobuf.Duration
	26, // 28: buf.validate.DurationRules.lt:type_name -> google.protobuf.Duration
	26, // 29: buf.validate.DurationRules.lte:type_name -> google.protobuf.Duration
	26, // 30: buf.validate.DurationRules.gt:type_name -> google.protobuf.Duration
	26, // 31: buf.validate.DurationRules.gte:type_name -> google.protobuf.Duration
	26, // 32: buf.validate.DurationRules.in:type_name -> google.protobuf.Duration
	26, // 33: buf.validate.DurationRules.not_in:type_name -> google.protobuf.Duration
	27, // 34: buf.validate.TimestampRules.const:type_name -> google.protobuf.Timestamp
	27, // 35: buf.validate.TimestampRules.lt:type_name -> google.protobuf.Timestamp
	27, // 36: buf.validate.TimestampRules.lte:type_name -> google.protobuf.Timestamp
	27, // 37: buf.validate.TimestampRules.gt:type_name -> google.protobuf.Timestamp
	27, // 38: buf.validate.TimestampRules.gte:type_name -> google.protobuf.Timestamp
	26, // 39: buf.validate.TimestampRules.within:type_name -> google.protobuf.Duration
	28, // 40: buf.validate.message:extendee -> google.protobuf.MessageOptions
	29, // 41: buf.validate.oneof:extendee -> google.protobuf.OneofOptions
	30, // 42: buf.validate.field:extendee -> google.protobuf.FieldOptions
	1,  // 43: buf.validate.message:type_name -> buf.validate.MessageConstraints
	2,  // 44: buf.validate.oneof:type_name -> buf.validate.OneofConstraints
	3,  // 45: buf.validate.field:type_name -> buf.validate.FieldConstraints
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	43, // [43:46] is the sub-list for extension type_name
	40, // [40:43] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_buf_validate_validate_proto_init() }
func file_buf_validate_validate_proto_init() {
	if File_buf_validate_validate_proto != nil {
		return
	}
	file_buf_validate_expression_proto_init()
	file_buf_validate_validate_proto_msgTypes[0].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[1].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[2].OneofWrappers = []any{
		(*FieldConstraints_Float)(nil),
		(*FieldConstraints_Double)(nil),
		(*FieldConstraints_Int32)(nil),
		(*FieldConstraints_Int64)(nil),
		(*FieldConstraints_Uint32)(nil),
		(*FieldConstraints_Uint64)(nil),
		(*FieldConstraints_Sint32)(nil),
		(*FieldConstraints_Sint64)(nil),
		(*FieldConstraints_Fixed32)(nil),
		(*FieldConstraints_Fixed64)(nil),
		(*FieldConstraints_Sfixed32)(nil),
		(*FieldConstraints_Sfixed64)(nil),
		(*FieldConstraints_Bool)(nil),
		(*FieldConstraints_String_)(nil),
		(*FieldConstraints_Bytes)(nil),
		(*FieldConstraints_Enum)(nil),
		(*FieldConstraints_Repeated)(nil),
		(*FieldConstraints_Map)(nil),
		(*FieldConstraints_Any)(nil),
		(*FieldConstraints_Duration)(nil),
		(*FieldConstraints_Timestamp)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[3].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[4].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[5].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[6].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[7].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[8].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[9].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[10].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[11].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[12].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[13].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[14].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[15].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[16].OneofWrappers = []any{
		(*StringRules_Email)(nil),
		(*StringRules_Hostname)(nil),
		(*StringRules_Ip)(nil),
		(*StringRules_Ipv4)(nil),
		(*StringRules_Ipv6)(nil),
		(*StringRules_Uri)(nil),
		(*StringRules_UriRef)(nil),
		(*StringRules_Address)(nil),
		(*StringRules_Uuid)(nil),
		(*StringRules_WellKnownRegex)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[17].OneofWrappers = []any{
		(*BytesRules_Ip)(nil),
		(*BytesRules_Ipv4)(nil),
		(*BytesRules_Ipv6)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[18].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[19].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[20].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[22].OneofWrappers = []any{}
	file_buf_validate_validate_proto_msgTypes[23].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_buf_validate_validate_proto_rawDesc), len(file_buf_validate_validate_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 3,
			NumServices:   0,
		},
		GoTypes:           file_buf_validate_validate_proto_goTypes,
		DependencyIndexes: file_buf_validate_validate_proto_depIdxs,
		EnumInfos:         file_buf_validate_validate_proto_enumTypes,
		MessageInfos:      file_buf_validate_validate_proto_msgTypes,
		ExtensionInfos:    file_buf_validate_validate_proto_extTypes,
	}.Build()
	File_buf_validate_validate_proto = out.File
	file_buf_validate_validate_proto_goTypes = nil
	file_buf_validate_validate_proto_depIdxs = nil
}
