// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: buf/validate/expression.proto

package validate

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// `Constraint` represents a validation rule written in the Common Expression
// Language (CEL) syntax. Each Constraint includes a unique identifier, an
// optional error message, and the CEL expression to evaluate. For more
// information on CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
//
// ```proto
//
//	message Foo {
//	  option (buf.validate.message).cel = {
//	    id: "foo.bar"
//	    message: "bar must be greater than 0"
//	    expression: "this.bar > 0"
//	  };
//	  int32 bar = 1;
//	}
//
// ```
type Constraint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `id` is a string that serves as a machine-readable name for this Constraint.
	// It should be unique within its scope, which could be either a message or a field.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// `message` is an optional field that provides a human-readable error message
	// for this Constraint when the CEL expression evaluates to false. If a
	// non-empty message is provided, any strings resulting from the CEL
	// expression evaluation are ignored.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// `expression` is the actual CEL expression that will be evaluated for
	// validation. This string must resolve to either a boolean or a string
	// value. If the expression evaluates to false or a non-empty string, the
	// validation is considered failed, and the message is rejected.
	Expression    string `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Constraint) Reset() {
	*x = Constraint{}
	mi := &file_buf_validate_expression_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constraint) ProtoMessage() {}

func (x *Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_expression_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constraint.ProtoReflect.Descriptor instead.
func (*Constraint) Descriptor() ([]byte, []int) {
	return file_buf_validate_expression_proto_rawDescGZIP(), []int{0}
}

func (x *Constraint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Constraint) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Constraint) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

// `Violations` is a collection of `Violation` messages. This message type is returned by
// protovalidate when a proto message fails to meet the requirements set by the `Constraint` validation rules.
// Each individual violation is represented by a `Violation` message.
type Violations struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `violations` is a repeated field that contains all the `Violation` messages corresponding to the violations detected.
	Violations    []*Violation `protobuf:"bytes,1,rep,name=violations,proto3" json:"violations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Violations) Reset() {
	*x = Violations{}
	mi := &file_buf_validate_expression_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Violations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Violations) ProtoMessage() {}

func (x *Violations) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_expression_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Violations.ProtoReflect.Descriptor instead.
func (*Violations) Descriptor() ([]byte, []int) {
	return file_buf_validate_expression_proto_rawDescGZIP(), []int{1}
}

func (x *Violations) GetViolations() []*Violation {
	if x != nil {
		return x.Violations
	}
	return nil
}

// `Violation` represents a single instance where a validation rule, expressed
// as a `Constraint`, was not met. It provides information about the field that
// caused the violation, the specific constraint that wasn't fulfilled, and a
// human-readable error message.
//
// ```json
//
//	{
//	  "fieldPath": "bar",
//	  "constraintId": "foo.bar",
//	  "message": "bar must be greater than 0"
//	}
//
// ```
type Violation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `field_path` is a machine-readable identifier that points to the specific field that failed the validation.
	// This could be a nested field, in which case the path will include all the parent fields leading to the actual field that caused the violation.
	FieldPath string `protobuf:"bytes,1,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
	// `constraint_id` is the unique identifier of the `Constraint` that was not fulfilled.
	// This is the same `id` that was specified in the `Constraint` message, allowing easy tracing of which rule was violated.
	ConstraintId string `protobuf:"bytes,2,opt,name=constraint_id,json=constraintId,proto3" json:"constraint_id,omitempty"`
	// `message` is a human-readable error message that describes the nature of the violation.
	// This can be the default error message from the violated `Constraint`, or it can be a custom message that gives more context about the violation.
	Message       string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Violation) Reset() {
	*x = Violation{}
	mi := &file_buf_validate_expression_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Violation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Violation) ProtoMessage() {}

func (x *Violation) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_expression_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Violation.ProtoReflect.Descriptor instead.
func (*Violation) Descriptor() ([]byte, []int) {
	return file_buf_validate_expression_proto_rawDescGZIP(), []int{2}
}

func (x *Violation) GetFieldPath() string {
	if x != nil {
		return x.FieldPath
	}
	return ""
}

func (x *Violation) GetConstraintId() string {
	if x != nil {
		return x.ConstraintId
	}
	return ""
}

func (x *Violation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_buf_validate_expression_proto protoreflect.FileDescriptor

const file_buf_validate_expression_proto_rawDesc = "" +
	"\n" +
	"\x1dbuf/validate/expression.proto\x12\fbuf.validate\"V\n" +
	"\n" +
	"Constraint\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1e\n" +
	"\n" +
	"expression\x18\x03 \x01(\tR\n" +
	"expression\"E\n" +
	"\n" +
	"Violations\x127\n" +
	"\n" +
	"violations\x18\x01 \x03(\v2\x17.buf.validate.ViolationR\n" +
	"violations\"i\n" +
	"\tViolation\x12\x1d\n" +
	"\n" +
	"field_path\x18\x01 \x01(\tR\tfieldPath\x12#\n" +
	"\rconstraint_id\x18\x02 \x01(\tR\fconstraintId\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessageBIZGbuf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validateb\x06proto3"

var (
	file_buf_validate_expression_proto_rawDescOnce sync.Once
	file_buf_validate_expression_proto_rawDescData []byte
)

func file_buf_validate_expression_proto_rawDescGZIP() []byte {
	file_buf_validate_expression_proto_rawDescOnce.Do(func() {
		file_buf_validate_expression_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_buf_validate_expression_proto_rawDesc), len(file_buf_validate_expression_proto_rawDesc)))
	})
	return file_buf_validate_expression_proto_rawDescData
}

var file_buf_validate_expression_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_buf_validate_expression_proto_goTypes = []any{
	(*Constraint)(nil), // 0: buf.validate.Constraint
	(*Violations)(nil), // 1: buf.validate.Violations
	(*Violation)(nil),  // 2: buf.validate.Violation
}
var file_buf_validate_expression_proto_depIdxs = []int32{
	2, // 0: buf.validate.Violations.violations:type_name -> buf.validate.Violation
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_buf_validate_expression_proto_init() }
func file_buf_validate_expression_proto_init() {
	if File_buf_validate_expression_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_buf_validate_expression_proto_rawDesc), len(file_buf_validate_expression_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_buf_validate_expression_proto_goTypes,
		DependencyIndexes: file_buf_validate_expression_proto_depIdxs,
		MessageInfos:      file_buf_validate_expression_proto_msgTypes,
	}.Build()
	File_buf_validate_expression_proto = out.File
	file_buf_validate_expression_proto_goTypes = nil
	file_buf_validate_expression_proto_depIdxs = nil
}
