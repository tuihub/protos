// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: librarian/sephirah/v1/base.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FileTag int32

const (
	FileTag_FILE_TAG_UNSPECIFIED FileTag = 0
	FileTag_FILE_TAG_GEBURA_SAVE FileTag = 1
)

var FileTag_name = map[int32]string{
	0: "FILE_TAG_UNSPECIFIED",
	1: "FILE_TAG_GEBURA_SAVE",
}

var FileTag_value = map[string]int32{
	"FILE_TAG_UNSPECIFIED": 0,
	"FILE_TAG_GEBURA_SAVE": 1,
}

func (x FileTag) String() string {
	return proto.EnumName(FileTag_name, int32(x))
}

func (FileTag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c5295985c2a04d97, []int{0}
}

// A globally unique identifier generated by `Searcher`
type InternalID struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InternalID) Reset()         { *m = InternalID{} }
func (m *InternalID) String() string { return proto.CompactTextString(m) }
func (*InternalID) ProtoMessage()    {}
func (*InternalID) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5295985c2a04d97, []int{0}
}
func (m *InternalID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalID.Merge(m, src)
}
func (m *InternalID) XXX_Size() int {
	return m.Size()
}
func (m *InternalID) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalID.DiscardUnknown(m)
}

var xxx_messageInfo_InternalID proto.InternalMessageInfo

func (m *InternalID) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type FileMetadata struct {
	// Types that are valid to be assigned to XId:
	//
	//	*FileMetadata_Id
	XId                  isFileMetadata_XId `protobuf_oneof:"_id"`
	Name                 string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Size_                int64              `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	ChunkSize            int64              `protobuf:"varint,4,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	Tag                  []FileTag          `protobuf:"varint,5,rep,packed,name=tag,proto3,enum=librarian.sephirah.v1.FileTag" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FileMetadata) Reset()         { *m = FileMetadata{} }
func (m *FileMetadata) String() string { return proto.CompactTextString(m) }
func (*FileMetadata) ProtoMessage()    {}
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5295985c2a04d97, []int{1}
}
func (m *FileMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileMetadata.Merge(m, src)
}
func (m *FileMetadata) XXX_Size() int {
	return m.Size()
}
func (m *FileMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_FileMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_FileMetadata proto.InternalMessageInfo

type isFileMetadata_XId interface {
	isFileMetadata_XId()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FileMetadata_Id struct {
	Id *InternalID `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (*FileMetadata_Id) isFileMetadata_XId() {}

func (m *FileMetadata) GetXId() isFileMetadata_XId {
	if m != nil {
		return m.XId
	}
	return nil
}

func (m *FileMetadata) GetId() *InternalID {
	if x, ok := m.GetXId().(*FileMetadata_Id); ok {
		return x.Id
	}
	return nil
}

func (m *FileMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileMetadata) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *FileMetadata) GetChunkSize() int64 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

func (m *FileMetadata) GetTag() []FileTag {
	if m != nil {
		return m.Tag
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FileMetadata) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FileMetadata_Id)(nil),
	}
}

func init() {
	proto.RegisterEnum("librarian.sephirah.v1.FileTag", FileTag_name, FileTag_value)
	proto.RegisterType((*InternalID)(nil), "librarian.sephirah.v1.InternalID")
	proto.RegisterType((*FileMetadata)(nil), "librarian.sephirah.v1.FileMetadata")
}

func init() { proto.RegisterFile("librarian/sephirah/v1/base.proto", fileDescriptor_c5295985c2a04d97) }

var fileDescriptor_c5295985c2a04d97 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xc8, 0xc9, 0x4c, 0x2a,
	0x4a, 0x2c, 0xca, 0x4c, 0xcc, 0xd3, 0x2f, 0x4e, 0x2d, 0xc8, 0xc8, 0x2c, 0x4a, 0xcc, 0xd0, 0x2f,
	0x33, 0xd4, 0x4f, 0x4a, 0x2c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x85, 0xab,
	0xd0, 0x83, 0xa9, 0xd0, 0x2b, 0x33, 0x54, 0x92, 0xe1, 0xe2, 0xf2, 0xcc, 0x2b, 0x49, 0x2d, 0xca,
	0x4b, 0xcc, 0xf1, 0x74, 0x11, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60,
	0x0e, 0x62, 0xca, 0x4c, 0x51, 0x3a, 0xc6, 0xc8, 0xc5, 0xe3, 0x96, 0x99, 0x93, 0xea, 0x9b, 0x5a,
	0x92, 0x98, 0x92, 0x58, 0x92, 0x28, 0x64, 0x06, 0x57, 0xc0, 0x6d, 0xa4, 0xa8, 0x87, 0xd5, 0x48,
	0x3d, 0x84, 0x79, 0x1e, 0x0c, 0x20, 0x53, 0x3a, 0x18, 0x19, 0x85, 0x84, 0xb8, 0x58, 0xf2, 0x12,
	0x73, 0x53, 0x25, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x90, 0x58, 0x71, 0x66, 0x55,
	0xaa, 0x04, 0x33, 0xd8, 0x3a, 0x30, 0x5b, 0x48, 0x96, 0x8b, 0x2b, 0x39, 0xa3, 0x34, 0x2f, 0x3b,
	0x1e, 0x2c, 0xc3, 0x02, 0x96, 0xe1, 0x04, 0x8b, 0x04, 0x83, 0xa4, 0x0d, 0xb8, 0x98, 0x4b, 0x12,
	0xd3, 0x25, 0x58, 0x15, 0x98, 0x35, 0xf8, 0x8c, 0xe4, 0x70, 0xd8, 0x0f, 0x72, 0x70, 0x48, 0x62,
	0x7a, 0x10, 0x48, 0xa9, 0x13, 0x2b, 0x17, 0x73, 0x7c, 0x66, 0x8a, 0x96, 0x2d, 0x17, 0x3b, 0x54,
	0x58, 0x48, 0x82, 0x4b, 0xc4, 0xcd, 0xd3, 0xc7, 0x35, 0x3e, 0xc4, 0xd1, 0x3d, 0x3e, 0xd4, 0x2f,
	0x38, 0xc0, 0xd5, 0xd9, 0xd3, 0xcd, 0xd3, 0xd5, 0x45, 0x80, 0x01, 0x45, 0xc6, 0xdd, 0xd5, 0x29,
	0x34, 0xc8, 0x31, 0x3e, 0xd8, 0x31, 0xcc, 0x55, 0x80, 0xd1, 0x29, 0xfe, 0xc4, 0x23, 0x39, 0xc6,
	0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x3d, 0x3d,
	0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0xbf, 0xa4, 0x34, 0x33, 0xa3, 0x34, 0x49,
	0x1f, 0x33, 0x0a, 0xac, 0xcb, 0x0c, 0x57, 0x31, 0x29, 0x87, 0x94, 0x66, 0x7a, 0x94, 0x26, 0xe9,
	0x05, 0x80, 0xa2, 0xa1, 0x58, 0xcf, 0x07, 0xee, 0xe6, 0x60, 0x98, 0x9b, 0xc3, 0x0c, 0x93, 0xd8,
	0xc0, 0x91, 0x64, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x4d, 0xf9, 0x9c, 0xc8, 0x01, 0x00,
	0x00,
}

func (m *InternalID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintBase(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FileMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tag) > 0 {
		dAtA2 := make([]byte, len(m.Tag)*10)
		var j1 int
		for _, num := range m.Tag {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintBase(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if m.ChunkSize != 0 {
		i = encodeVarintBase(dAtA, i, uint64(m.ChunkSize))
		i--
		dAtA[i] = 0x20
	}
	if m.Size_ != 0 {
		i = encodeVarintBase(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBase(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.XId != nil {
		{
			size := m.XId.Size()
			i -= size
			if _, err := m.XId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *FileMetadata_Id) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileMetadata_Id) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func encodeVarintBase(dAtA []byte, offset int, v uint64) int {
	offset -= sovBase(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InternalID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBase(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XId != nil {
		n += m.XId.Size()
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBase(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovBase(uint64(m.Size_))
	}
	if m.ChunkSize != 0 {
		n += 1 + sovBase(uint64(m.ChunkSize))
	}
	if len(m.Tag) > 0 {
		l = 0
		for _, e := range m.Tag {
			l += sovBase(uint64(e))
		}
		n += 1 + sovBase(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileMetadata_Id) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovBase(uint64(l))
	}
	return n
}

func sovBase(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBase(x uint64) (n int) {
	return sovBase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InternalID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InternalID{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XId = &FileMetadata_Id{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkSize", wireType)
			}
			m.ChunkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v FileTag
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= FileTag(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tag = append(m.Tag, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBase
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBase
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBase
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Tag) == 0 {
					m.Tag = make([]FileTag, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v FileTag
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBase
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= FileTag(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tag = append(m.Tag, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBase
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBase
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBase
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBase        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBase          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBase = fmt.Errorf("proto: unexpected end of group")
)
