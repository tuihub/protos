// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: librarian/sephirah/v1/porter/sephitah_porter_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LibrarianSephirahPorterService_AcquireUserToken_FullMethodName     = "/librarian.sephirah.v1.porter.LibrarianSephirahPorterService/AcquireUserToken"
	LibrarianSephirahPorterService_GetNotifyTargetItems_FullMethodName = "/librarian.sephirah.v1.porter.LibrarianSephirahPorterService/GetNotifyTargetItems"
	LibrarianSephirahPorterService_UpsertFeed_FullMethodName           = "/librarian.sephirah.v1.porter.LibrarianSephirahPorterService/UpsertFeed"
	LibrarianSephirahPorterService_GetFeed_FullMethodName              = "/librarian.sephirah.v1.porter.LibrarianSephirahPorterService/GetFeed"
)

// LibrarianSephirahPorterServiceClient is the client API for LibrarianSephirahPorterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibrarianSephirahPorterServiceClient interface {
	// `Tiphereth` `Porter` Obtain access_token of a specific user after user authorization.
	// This token can be used to perform actions on behalf of the user.
	AcquireUserToken(ctx context.Context, in *AcquireUserTokenRequest, opts ...grpc.CallOption) (*AcquireUserTokenResponse, error)
	// `Netzach` `Porter`
	GetNotifyTargetItems(ctx context.Context, in *GetNotifyTargetItemsRequest, opts ...grpc.CallOption) (*GetNotifyTargetItemsResponse, error)
	// `Yesod` `Porter`
	UpsertFeed(ctx context.Context, in *UpsertFeedRequest, opts ...grpc.CallOption) (*UpsertFeedResponse, error)
	// `Yesod` `Porter`
	GetFeed(ctx context.Context, in *GetFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error)
}

type librarianSephirahPorterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibrarianSephirahPorterServiceClient(cc grpc.ClientConnInterface) LibrarianSephirahPorterServiceClient {
	return &librarianSephirahPorterServiceClient{cc}
}

func (c *librarianSephirahPorterServiceClient) AcquireUserToken(ctx context.Context, in *AcquireUserTokenRequest, opts ...grpc.CallOption) (*AcquireUserTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcquireUserTokenResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahPorterService_AcquireUserToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahPorterServiceClient) GetNotifyTargetItems(ctx context.Context, in *GetNotifyTargetItemsRequest, opts ...grpc.CallOption) (*GetNotifyTargetItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotifyTargetItemsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahPorterService_GetNotifyTargetItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahPorterServiceClient) UpsertFeed(ctx context.Context, in *UpsertFeedRequest, opts ...grpc.CallOption) (*UpsertFeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertFeedResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahPorterService_UpsertFeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahPorterServiceClient) GetFeed(ctx context.Context, in *GetFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahPorterService_GetFeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibrarianSephirahPorterServiceServer is the server API for LibrarianSephirahPorterService service.
// All implementations must embed UnimplementedLibrarianSephirahPorterServiceServer
// for forward compatibility.
type LibrarianSephirahPorterServiceServer interface {
	// `Tiphereth` `Porter` Obtain access_token of a specific user after user authorization.
	// This token can be used to perform actions on behalf of the user.
	AcquireUserToken(context.Context, *AcquireUserTokenRequest) (*AcquireUserTokenResponse, error)
	// `Netzach` `Porter`
	GetNotifyTargetItems(context.Context, *GetNotifyTargetItemsRequest) (*GetNotifyTargetItemsResponse, error)
	// `Yesod` `Porter`
	UpsertFeed(context.Context, *UpsertFeedRequest) (*UpsertFeedResponse, error)
	// `Yesod` `Porter`
	GetFeed(context.Context, *GetFeedRequest) (*GetFeedResponse, error)
	mustEmbedUnimplementedLibrarianSephirahPorterServiceServer()
}

// UnimplementedLibrarianSephirahPorterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLibrarianSephirahPorterServiceServer struct{}

func (UnimplementedLibrarianSephirahPorterServiceServer) AcquireUserToken(context.Context, *AcquireUserTokenRequest) (*AcquireUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireUserToken not implemented")
}
func (UnimplementedLibrarianSephirahPorterServiceServer) GetNotifyTargetItems(context.Context, *GetNotifyTargetItemsRequest) (*GetNotifyTargetItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifyTargetItems not implemented")
}
func (UnimplementedLibrarianSephirahPorterServiceServer) UpsertFeed(context.Context, *UpsertFeedRequest) (*UpsertFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertFeed not implemented")
}
func (UnimplementedLibrarianSephirahPorterServiceServer) GetFeed(context.Context, *GetFeedRequest) (*GetFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (UnimplementedLibrarianSephirahPorterServiceServer) mustEmbedUnimplementedLibrarianSephirahPorterServiceServer() {
}
func (UnimplementedLibrarianSephirahPorterServiceServer) testEmbeddedByValue() {}

// UnsafeLibrarianSephirahPorterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibrarianSephirahPorterServiceServer will
// result in compilation errors.
type UnsafeLibrarianSephirahPorterServiceServer interface {
	mustEmbedUnimplementedLibrarianSephirahPorterServiceServer()
}

func RegisterLibrarianSephirahPorterServiceServer(s grpc.ServiceRegistrar, srv LibrarianSephirahPorterServiceServer) {
	// If the following call pancis, it indicates UnimplementedLibrarianSephirahPorterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LibrarianSephirahPorterService_ServiceDesc, srv)
}

func _LibrarianSephirahPorterService_AcquireUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahPorterServiceServer).AcquireUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahPorterService_AcquireUserToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahPorterServiceServer).AcquireUserToken(ctx, req.(*AcquireUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahPorterService_GetNotifyTargetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifyTargetItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahPorterServiceServer).GetNotifyTargetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahPorterService_GetNotifyTargetItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahPorterServiceServer).GetNotifyTargetItems(ctx, req.(*GetNotifyTargetItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahPorterService_UpsertFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahPorterServiceServer).UpsertFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahPorterService_UpsertFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahPorterServiceServer).UpsertFeed(ctx, req.(*UpsertFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahPorterService_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahPorterServiceServer).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahPorterService_GetFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahPorterServiceServer).GetFeed(ctx, req.(*GetFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibrarianSephirahPorterService_ServiceDesc is the grpc.ServiceDesc for LibrarianSephirahPorterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibrarianSephirahPorterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "librarian.sephirah.v1.porter.LibrarianSephirahPorterService",
	HandlerType: (*LibrarianSephirahPorterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcquireUserToken",
			Handler:    _LibrarianSephirahPorterService_AcquireUserToken_Handler,
		},
		{
			MethodName: "GetNotifyTargetItems",
			Handler:    _LibrarianSephirahPorterService_GetNotifyTargetItems_Handler,
		},
		{
			MethodName: "UpsertFeed",
			Handler:    _LibrarianSephirahPorterService_UpsertFeed_Handler,
		},
		{
			MethodName: "GetFeed",
			Handler:    _LibrarianSephirahPorterService_GetFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "librarian/sephirah/v1/porter/sephitah_porter_service.proto",
}
