// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: librarian/sephirah/v1/sephirah_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tuihub/protos/pkg/librarian/sephirah/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LibrarianSephirahServiceName is the fully-qualified name of the LibrarianSephirahService service.
	LibrarianSephirahServiceName = "librarian.sephirah.v1.LibrarianSephirahService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LibrarianSephirahServiceGetServerInformationProcedure is the fully-qualified name of the
	// LibrarianSephirahService's GetServerInformation RPC.
	LibrarianSephirahServiceGetServerInformationProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/GetServerInformation"
	// LibrarianSephirahServiceListenServerEventProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListenServerEvent RPC.
	LibrarianSephirahServiceListenServerEventProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListenServerEvent"
	// LibrarianSephirahServiceGetTokenProcedure is the fully-qualified name of the
	// LibrarianSephirahService's GetToken RPC.
	LibrarianSephirahServiceGetTokenProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/GetToken"
	// LibrarianSephirahServiceRefreshTokenProcedure is the fully-qualified name of the
	// LibrarianSephirahService's RefreshToken RPC.
	LibrarianSephirahServiceRefreshTokenProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/RefreshToken"
	// LibrarianSephirahServiceGetUserProcedure is the fully-qualified name of the
	// LibrarianSephirahService's GetUser RPC.
	LibrarianSephirahServiceGetUserProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/GetUser"
	// LibrarianSephirahServiceRegisterUserProcedure is the fully-qualified name of the
	// LibrarianSephirahService's RegisterUser RPC.
	LibrarianSephirahServiceRegisterUserProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/RegisterUser"
	// LibrarianSephirahServiceUpdateUserProcedure is the fully-qualified name of the
	// LibrarianSephirahService's UpdateUser RPC.
	LibrarianSephirahServiceUpdateUserProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateUser"
	// LibrarianSephirahServiceRegisterDeviceProcedure is the fully-qualified name of the
	// LibrarianSephirahService's RegisterDevice RPC.
	LibrarianSephirahServiceRegisterDeviceProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/RegisterDevice"
	// LibrarianSephirahServiceListUserSessionsProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListUserSessions RPC.
	LibrarianSephirahServiceListUserSessionsProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListUserSessions"
	// LibrarianSephirahServiceDeleteUserSessionProcedure is the fully-qualified name of the
	// LibrarianSephirahService's DeleteUserSession RPC.
	LibrarianSephirahServiceDeleteUserSessionProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/DeleteUserSession"
	// LibrarianSephirahServiceLinkAccountProcedure is the fully-qualified name of the
	// LibrarianSephirahService's LinkAccount RPC.
	LibrarianSephirahServiceLinkAccountProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/LinkAccount"
	// LibrarianSephirahServiceUnLinkAccountProcedure is the fully-qualified name of the
	// LibrarianSephirahService's UnLinkAccount RPC.
	LibrarianSephirahServiceUnLinkAccountProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/UnLinkAccount"
	// LibrarianSephirahServiceListLinkAccountsProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListLinkAccounts RPC.
	LibrarianSephirahServiceListLinkAccountsProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListLinkAccounts"
	// LibrarianSephirahServiceListPorterDigestsProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListPorterDigests RPC.
	LibrarianSephirahServiceListPorterDigestsProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListPorterDigests"
	// LibrarianSephirahServiceCreatePorterContextProcedure is the fully-qualified name of the
	// LibrarianSephirahService's CreatePorterContext RPC.
	LibrarianSephirahServiceCreatePorterContextProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/CreatePorterContext"
	// LibrarianSephirahServiceListPorterContextsProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListPorterContexts RPC.
	LibrarianSephirahServiceListPorterContextsProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListPorterContexts"
	// LibrarianSephirahServiceUpdatePorterContextProcedure is the fully-qualified name of the
	// LibrarianSephirahService's UpdatePorterContext RPC.
	LibrarianSephirahServiceUpdatePorterContextProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/UpdatePorterContext"
	// LibrarianSephirahServiceGetStorageCapacityUsageProcedure is the fully-qualified name of the
	// LibrarianSephirahService's GetStorageCapacityUsage RPC.
	LibrarianSephirahServiceGetStorageCapacityUsageProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/GetStorageCapacityUsage"
	// LibrarianSephirahServiceUploadFileProcedure is the fully-qualified name of the
	// LibrarianSephirahService's UploadFile RPC.
	LibrarianSephirahServiceUploadFileProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/UploadFile"
	// LibrarianSephirahServiceDownloadFileProcedure is the fully-qualified name of the
	// LibrarianSephirahService's DownloadFile RPC.
	LibrarianSephirahServiceDownloadFileProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/DownloadFile"
	// LibrarianSephirahServiceSimpleUploadFileProcedure is the fully-qualified name of the
	// LibrarianSephirahService's SimpleUploadFile RPC.
	LibrarianSephirahServiceSimpleUploadFileProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/SimpleUploadFile"
	// LibrarianSephirahServiceSimpleDownloadFileProcedure is the fully-qualified name of the
	// LibrarianSephirahService's SimpleDownloadFile RPC.
	LibrarianSephirahServiceSimpleDownloadFileProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/SimpleDownloadFile"
	// LibrarianSephirahServicePresignedUploadFileProcedure is the fully-qualified name of the
	// LibrarianSephirahService's PresignedUploadFile RPC.
	LibrarianSephirahServicePresignedUploadFileProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/PresignedUploadFile"
	// LibrarianSephirahServicePresignedUploadFileStatusProcedure is the fully-qualified name of the
	// LibrarianSephirahService's PresignedUploadFileStatus RPC.
	LibrarianSephirahServicePresignedUploadFileStatusProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/PresignedUploadFileStatus"
	// LibrarianSephirahServicePresignedDownloadFileProcedure is the fully-qualified name of the
	// LibrarianSephirahService's PresignedDownloadFile RPC.
	LibrarianSephirahServicePresignedDownloadFileProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/PresignedDownloadFile"
	// LibrarianSephirahServiceUploadImageProcedure is the fully-qualified name of the
	// LibrarianSephirahService's UploadImage RPC.
	LibrarianSephirahServiceUploadImageProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/UploadImage"
	// LibrarianSephirahServiceUpdateImageProcedure is the fully-qualified name of the
	// LibrarianSephirahService's UpdateImage RPC.
	LibrarianSephirahServiceUpdateImageProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateImage"
	// LibrarianSephirahServiceListImagesProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListImages RPC.
	LibrarianSephirahServiceListImagesProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListImages"
	// LibrarianSephirahServiceSearchImagesProcedure is the fully-qualified name of the
	// LibrarianSephirahService's SearchImages RPC.
	LibrarianSephirahServiceSearchImagesProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/SearchImages"
	// LibrarianSephirahServiceGetImageProcedure is the fully-qualified name of the
	// LibrarianSephirahService's GetImage RPC.
	LibrarianSephirahServiceGetImageProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/GetImage"
	// LibrarianSephirahServiceDownloadImageProcedure is the fully-qualified name of the
	// LibrarianSephirahService's DownloadImage RPC.
	LibrarianSephirahServiceDownloadImageProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/DownloadImage"
	// LibrarianSephirahServiceSearchStoreAppsProcedure is the fully-qualified name of the
	// LibrarianSephirahService's SearchStoreApps RPC.
	LibrarianSephirahServiceSearchStoreAppsProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/SearchStoreApps"
	// LibrarianSephirahServiceGetStoreAppSummaryProcedure is the fully-qualified name of the
	// LibrarianSephirahService's GetStoreAppSummary RPC.
	LibrarianSephirahServiceGetStoreAppSummaryProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/GetStoreAppSummary"
	// LibrarianSephirahServiceAcquireStoreAppProcedure is the fully-qualified name of the
	// LibrarianSephirahService's AcquireStoreApp RPC.
	LibrarianSephirahServiceAcquireStoreAppProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/AcquireStoreApp"
	// LibrarianSephirahServiceListStoreAppBinariesProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListStoreAppBinaries RPC.
	LibrarianSephirahServiceListStoreAppBinariesProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListStoreAppBinaries"
	// LibrarianSephirahServiceListStoreAppBinaryFilesProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListStoreAppBinaryFiles RPC.
	LibrarianSephirahServiceListStoreAppBinaryFilesProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListStoreAppBinaryFiles"
	// LibrarianSephirahServiceDownloadStoreAppBinaryProcedure is the fully-qualified name of the
	// LibrarianSephirahService's DownloadStoreAppBinary RPC.
	LibrarianSephirahServiceDownloadStoreAppBinaryProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/DownloadStoreAppBinary"
	// LibrarianSephirahServiceListStoreAppSaveFilesProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListStoreAppSaveFiles RPC.
	LibrarianSephirahServiceListStoreAppSaveFilesProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListStoreAppSaveFiles"
	// LibrarianSephirahServiceDownloadStoreAppSaveFileProcedure is the fully-qualified name of the
	// LibrarianSephirahService's DownloadStoreAppSaveFile RPC.
	LibrarianSephirahServiceDownloadStoreAppSaveFileProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/DownloadStoreAppSaveFile"
	// LibrarianSephirahServiceSearchAppInfosProcedure is the fully-qualified name of the
	// LibrarianSephirahService's SearchAppInfos RPC.
	LibrarianSephirahServiceSearchAppInfosProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/SearchAppInfos"
	// LibrarianSephirahServiceCreateAppProcedure is the fully-qualified name of the
	// LibrarianSephirahService's CreateApp RPC.
	LibrarianSephirahServiceCreateAppProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/CreateApp"
	// LibrarianSephirahServiceUpdateAppProcedure is the fully-qualified name of the
	// LibrarianSephirahService's UpdateApp RPC.
	LibrarianSephirahServiceUpdateAppProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateApp"
	// LibrarianSephirahServiceListAppsProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListApps RPC.
	LibrarianSephirahServiceListAppsProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListApps"
	// LibrarianSephirahServiceDeleteAppProcedure is the fully-qualified name of the
	// LibrarianSephirahService's DeleteApp RPC.
	LibrarianSephirahServiceDeleteAppProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/DeleteApp"
	// LibrarianSephirahServiceBatchCreateAppRunTimeProcedure is the fully-qualified name of the
	// LibrarianSephirahService's BatchCreateAppRunTime RPC.
	LibrarianSephirahServiceBatchCreateAppRunTimeProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/BatchCreateAppRunTime"
	// LibrarianSephirahServiceSumAppRunTimeProcedure is the fully-qualified name of the
	// LibrarianSephirahService's SumAppRunTime RPC.
	LibrarianSephirahServiceSumAppRunTimeProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/SumAppRunTime"
	// LibrarianSephirahServiceListAppRunTimesProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListAppRunTimes RPC.
	LibrarianSephirahServiceListAppRunTimesProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListAppRunTimes"
	// LibrarianSephirahServiceDeleteAppRunTimeProcedure is the fully-qualified name of the
	// LibrarianSephirahService's DeleteAppRunTime RPC.
	LibrarianSephirahServiceDeleteAppRunTimeProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/DeleteAppRunTime"
	// LibrarianSephirahServiceUploadAppSaveFileProcedure is the fully-qualified name of the
	// LibrarianSephirahService's UploadAppSaveFile RPC.
	LibrarianSephirahServiceUploadAppSaveFileProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/UploadAppSaveFile"
	// LibrarianSephirahServiceDownloadAppSaveFileProcedure is the fully-qualified name of the
	// LibrarianSephirahService's DownloadAppSaveFile RPC.
	LibrarianSephirahServiceDownloadAppSaveFileProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/DownloadAppSaveFile"
	// LibrarianSephirahServiceListAppSaveFilesProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListAppSaveFiles RPC.
	LibrarianSephirahServiceListAppSaveFilesProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListAppSaveFiles"
	// LibrarianSephirahServiceDeleteAppSaveFileProcedure is the fully-qualified name of the
	// LibrarianSephirahService's DeleteAppSaveFile RPC.
	LibrarianSephirahServiceDeleteAppSaveFileProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/DeleteAppSaveFile"
	// LibrarianSephirahServicePinAppSaveFileProcedure is the fully-qualified name of the
	// LibrarianSephirahService's PinAppSaveFile RPC.
	LibrarianSephirahServicePinAppSaveFileProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/PinAppSaveFile"
	// LibrarianSephirahServiceUnpinAppSaveFileProcedure is the fully-qualified name of the
	// LibrarianSephirahService's UnpinAppSaveFile RPC.
	LibrarianSephirahServiceUnpinAppSaveFileProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/UnpinAppSaveFile"
	// LibrarianSephirahServiceGetAppSaveFileCapacityProcedure is the fully-qualified name of the
	// LibrarianSephirahService's GetAppSaveFileCapacity RPC.
	LibrarianSephirahServiceGetAppSaveFileCapacityProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/GetAppSaveFileCapacity"
	// LibrarianSephirahServiceSetAppSaveFileCapacityProcedure is the fully-qualified name of the
	// LibrarianSephirahService's SetAppSaveFileCapacity RPC.
	LibrarianSephirahServiceSetAppSaveFileCapacityProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/SetAppSaveFileCapacity"
	// LibrarianSephirahServiceListAppCategoriesProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListAppCategories RPC.
	LibrarianSephirahServiceListAppCategoriesProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListAppCategories"
	// LibrarianSephirahServiceCreateAppCategoryProcedure is the fully-qualified name of the
	// LibrarianSephirahService's CreateAppCategory RPC.
	LibrarianSephirahServiceCreateAppCategoryProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/CreateAppCategory"
	// LibrarianSephirahServiceUpdateAppCategoryProcedure is the fully-qualified name of the
	// LibrarianSephirahService's UpdateAppCategory RPC.
	LibrarianSephirahServiceUpdateAppCategoryProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateAppCategory"
	// LibrarianSephirahServiceDeleteAppCategoryProcedure is the fully-qualified name of the
	// LibrarianSephirahService's DeleteAppCategory RPC.
	LibrarianSephirahServiceDeleteAppCategoryProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/DeleteAppCategory"
	// LibrarianSephirahServiceCreateNotifyTargetProcedure is the fully-qualified name of the
	// LibrarianSephirahService's CreateNotifyTarget RPC.
	LibrarianSephirahServiceCreateNotifyTargetProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/CreateNotifyTarget"
	// LibrarianSephirahServiceUpdateNotifyTargetProcedure is the fully-qualified name of the
	// LibrarianSephirahService's UpdateNotifyTarget RPC.
	LibrarianSephirahServiceUpdateNotifyTargetProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateNotifyTarget"
	// LibrarianSephirahServiceListNotifyTargetsProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListNotifyTargets RPC.
	LibrarianSephirahServiceListNotifyTargetsProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListNotifyTargets"
	// LibrarianSephirahServiceCreateNotifyFlowProcedure is the fully-qualified name of the
	// LibrarianSephirahService's CreateNotifyFlow RPC.
	LibrarianSephirahServiceCreateNotifyFlowProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/CreateNotifyFlow"
	// LibrarianSephirahServiceUpdateNotifyFlowProcedure is the fully-qualified name of the
	// LibrarianSephirahService's UpdateNotifyFlow RPC.
	LibrarianSephirahServiceUpdateNotifyFlowProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateNotifyFlow"
	// LibrarianSephirahServiceListNotifyFlowsProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListNotifyFlows RPC.
	LibrarianSephirahServiceListNotifyFlowsProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListNotifyFlows"
	// LibrarianSephirahServiceListSystemNotificationsProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListSystemNotifications RPC.
	LibrarianSephirahServiceListSystemNotificationsProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListSystemNotifications"
	// LibrarianSephirahServiceUpdateSystemNotificationProcedure is the fully-qualified name of the
	// LibrarianSephirahService's UpdateSystemNotification RPC.
	LibrarianSephirahServiceUpdateSystemNotificationProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateSystemNotification"
	// LibrarianSephirahServiceCreateFeedConfigProcedure is the fully-qualified name of the
	// LibrarianSephirahService's CreateFeedConfig RPC.
	LibrarianSephirahServiceCreateFeedConfigProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/CreateFeedConfig"
	// LibrarianSephirahServiceUpdateFeedConfigProcedure is the fully-qualified name of the
	// LibrarianSephirahService's UpdateFeedConfig RPC.
	LibrarianSephirahServiceUpdateFeedConfigProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateFeedConfig"
	// LibrarianSephirahServiceListFeedConfigsProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListFeedConfigs RPC.
	LibrarianSephirahServiceListFeedConfigsProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedConfigs"
	// LibrarianSephirahServiceCreateFeedActionSetProcedure is the fully-qualified name of the
	// LibrarianSephirahService's CreateFeedActionSet RPC.
	LibrarianSephirahServiceCreateFeedActionSetProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/CreateFeedActionSet"
	// LibrarianSephirahServiceUpdateFeedActionSetProcedure is the fully-qualified name of the
	// LibrarianSephirahService's UpdateFeedActionSet RPC.
	LibrarianSephirahServiceUpdateFeedActionSetProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateFeedActionSet"
	// LibrarianSephirahServiceListFeedActionSetsProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListFeedActionSets RPC.
	LibrarianSephirahServiceListFeedActionSetsProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedActionSets"
	// LibrarianSephirahServiceListFeedCategoriesProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListFeedCategories RPC.
	LibrarianSephirahServiceListFeedCategoriesProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedCategories"
	// LibrarianSephirahServiceListFeedPlatformsProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListFeedPlatforms RPC.
	LibrarianSephirahServiceListFeedPlatformsProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedPlatforms"
	// LibrarianSephirahServiceListFeedItemsProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListFeedItems RPC.
	LibrarianSephirahServiceListFeedItemsProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedItems"
	// LibrarianSephirahServiceGetFeedItemProcedure is the fully-qualified name of the
	// LibrarianSephirahService's GetFeedItem RPC.
	LibrarianSephirahServiceGetFeedItemProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/GetFeedItem"
	// LibrarianSephirahServiceGetBatchFeedItemsProcedure is the fully-qualified name of the
	// LibrarianSephirahService's GetBatchFeedItems RPC.
	LibrarianSephirahServiceGetBatchFeedItemsProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/GetBatchFeedItems"
	// LibrarianSephirahServiceReadFeedItemProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ReadFeedItem RPC.
	LibrarianSephirahServiceReadFeedItemProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ReadFeedItem"
	// LibrarianSephirahServiceCreateFeedItemCollectionProcedure is the fully-qualified name of the
	// LibrarianSephirahService's CreateFeedItemCollection RPC.
	LibrarianSephirahServiceCreateFeedItemCollectionProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/CreateFeedItemCollection"
	// LibrarianSephirahServiceUpdateFeedItemCollectionProcedure is the fully-qualified name of the
	// LibrarianSephirahService's UpdateFeedItemCollection RPC.
	LibrarianSephirahServiceUpdateFeedItemCollectionProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateFeedItemCollection"
	// LibrarianSephirahServiceListFeedItemCollectionsProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListFeedItemCollections RPC.
	LibrarianSephirahServiceListFeedItemCollectionsProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedItemCollections"
	// LibrarianSephirahServiceAddFeedItemToCollectionProcedure is the fully-qualified name of the
	// LibrarianSephirahService's AddFeedItemToCollection RPC.
	LibrarianSephirahServiceAddFeedItemToCollectionProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/AddFeedItemToCollection"
	// LibrarianSephirahServiceRemoveFeedItemFromCollectionProcedure is the fully-qualified name of the
	// LibrarianSephirahService's RemoveFeedItemFromCollection RPC.
	LibrarianSephirahServiceRemoveFeedItemFromCollectionProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/RemoveFeedItemFromCollection"
	// LibrarianSephirahServiceListFeedItemsInCollectionProcedure is the fully-qualified name of the
	// LibrarianSephirahService's ListFeedItemsInCollection RPC.
	LibrarianSephirahServiceListFeedItemsInCollectionProcedure = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedItemsInCollection"
)

// LibrarianSephirahServiceClient is a client for the librarian.sephirah.v1.LibrarianSephirahService
// service.
type LibrarianSephirahServiceClient interface {
	// Allow anonymous call, use accessToken to get complete information
	GetServerInformation(context.Context, *connect.Request[v1.GetServerInformationRequest]) (*connect.Response[v1.GetServerInformationResponse], error)
	// `Normal` Client can use this to subscribe to server events.
	//
	// Server should send `SERVER_EVENT_LISTENER_CONNECTED` event immediately if the connection is valid.
	// Otherwise, client should treat the connection as failed.
	//
	// Server can close the stream at any time, client should reconnect if needed **with backoff**.
	// Only used to improve real-time experience, no guarantee of delivery.
	ListenServerEvent(context.Context, *connect.Request[v1.ListenServerEventRequest]) (*connect.ServerStreamForClient[v1.ListenServerEventResponse], error)
	// `Tiphereth` `Normal` Login via password and get two token
	GetToken(context.Context, *connect.Request[v1.GetTokenRequest]) (*connect.Response[v1.GetTokenResponse], error)
	// `Tiphereth` `Normal` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	// `Tiphereth`
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	// `Tiphereth` Self register as a new normal user
	RegisterUser(context.Context, *connect.Request[v1.RegisterUserRequest]) (*connect.Response[v1.RegisterUserResponse], error)
	// `Tiphereth` `Normal` Update self user info
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// `Tiphereth` `Normal` Client should register device after the first login
	// and store the device_id locally.
	// The server could add extra limits to non-registered device
	RegisterDevice(context.Context, *connect.Request[v1.RegisterDeviceRequest]) (*connect.Response[v1.RegisterDeviceResponse], error)
	// `Tiphereth` `Normal`
	ListUserSessions(context.Context, *connect.Request[v1.ListUserSessionsRequest]) (*connect.Response[v1.ListUserSessionsResponse], error)
	// `Tiphereth` `Normal` delete session will revoke refresh_token immediately.
	// NOTE: This can also be used to log out at server side.
	// NOTE2: Delete session will not affect device registration.
	DeleteUserSession(context.Context, *connect.Request[v1.DeleteUserSessionRequest]) (*connect.Response[v1.DeleteUserSessionResponse], error)
	// `Tiphereth` `Normal` Bind third-party account to current user.
	LinkAccount(context.Context, *connect.Request[v1.LinkAccountRequest]) (*connect.Response[v1.LinkAccountResponse], error)
	// `Tiphereth` `Normal` Unbind third-party account from current user.
	UnLinkAccount(context.Context, *connect.Request[v1.UnLinkAccountRequest]) (*connect.Response[v1.UnLinkAccountResponse], error)
	// `Tiphereth` `Normal` List third-party account binded to current user.
	ListLinkAccounts(context.Context, *connect.Request[v1.ListLinkAccountsRequest]) (*connect.Response[v1.ListLinkAccountsResponse], error)
	// `Tiphereth` `Normal`
	ListPorterDigests(context.Context, *connect.Request[v1.ListPorterDigestsRequest]) (*connect.Response[v1.ListPorterDigestsResponse], error)
	// `Tiphereth` `Normal`
	CreatePorterContext(context.Context, *connect.Request[v1.CreatePorterContextRequest]) (*connect.Response[v1.CreatePorterContextResponse], error)
	// `Tiphereth` `Normal`
	ListPorterContexts(context.Context, *connect.Request[v1.ListPorterContextsRequest]) (*connect.Response[v1.ListPorterContextsResponse], error)
	// `Tiphereth` `Normal` Set porter context.
	UpdatePorterContext(context.Context, *connect.Request[v1.UpdatePorterContextRequest]) (*connect.Response[v1.UpdatePorterContextResponse], error)
	// `Binah` `Normal`
	GetStorageCapacityUsage(context.Context, *connect.Request[v1.GetStorageCapacityUsageRequest]) (*connect.Response[v1.GetStorageCapacityUsageResponse], error)
	// `Binah` `upload_token`
	UploadFile(context.Context) *connect.BidiStreamForClient[v1.UploadFileRequest, v1.UploadFileResponse]
	// `Binah` `download_token`
	DownloadFile(context.Context) *connect.BidiStreamForClient[v1.DownloadFileRequest, v1.DownloadFileResponse]
	// `Binah` `upload_token`
	// Maximum 256M
	// Server must send response at least once a minute to keepalive.
	// Client should ignore in_process response and wait for success or error response.
	SimpleUploadFile(context.Context) *connect.BidiStreamForClient[v1.SimpleUploadFileRequest, v1.SimpleUploadFileResponse]
	// `Binah` `download_token`
	// Server will not check the receiving state
	SimpleDownloadFile(context.Context, *connect.Request[v1.SimpleDownloadFileRequest]) (*connect.ServerStreamForClient[v1.SimpleDownloadFileResponse], error)
	// `Binah` `upload_token`
	// Upload file through http url
	PresignedUploadFile(context.Context, *connect.Request[v1.PresignedUploadFileRequest]) (*connect.Response[v1.PresignedUploadFileResponse], error)
	// `Binah` `upload_token`
	// Report file transfer status. Mainly used to trigger server post-process immediately
	PresignedUploadFileStatus(context.Context, *connect.Request[v1.PresignedUploadFileStatusRequest]) (*connect.Response[v1.PresignedUploadFileStatusResponse], error)
	// `Binah` `download_token`
	// Download file through http url
	PresignedDownloadFile(context.Context, *connect.Request[v1.PresignedDownloadFileRequest]) (*connect.Response[v1.PresignedDownloadFileResponse], error)
	// `Chesed` `Normal`
	UploadImage(context.Context, *connect.Request[v1.UploadImageRequest]) (*connect.Response[v1.UploadImageResponse], error)
	// `Chesed` `Normal`
	UpdateImage(context.Context, *connect.Request[v1.UpdateImageRequest]) (*connect.Response[v1.UpdateImageResponse], error)
	// `Chesed` `Normal`
	ListImages(context.Context, *connect.Request[v1.ListImagesRequest]) (*connect.Response[v1.ListImagesResponse], error)
	// `Chesed` `Normal`
	SearchImages(context.Context, *connect.Request[v1.SearchImagesRequest]) (*connect.Response[v1.SearchImagesResponse], error)
	// `Chesed` `Normal`
	GetImage(context.Context, *connect.Request[v1.GetImageRequest]) (*connect.Response[v1.GetImageResponse], error)
	// `Chesed` `Normal`
	DownloadImage(context.Context, *connect.Request[v1.DownloadImageRequest]) (*connect.Response[v1.DownloadImageResponse], error)
	// `Gebura` `Normal`
	SearchStoreApps(context.Context, *connect.Request[v1.SearchStoreAppsRequest]) (*connect.Response[v1.SearchStoreAppsResponse], error)
	// `Gebura` `Normal`
	GetStoreAppSummary(context.Context, *connect.Request[v1.GetStoreAppSummaryRequest]) (*connect.Response[v1.GetStoreAppSummaryResponse], error)
	// `Gebura` `Normal`
	AcquireStoreApp(context.Context, *connect.Request[v1.AcquireStoreAppRequest]) (*connect.Response[v1.AcquireStoreAppResponse], error)
	// `Gebura` `Normal`
	ListStoreAppBinaries(context.Context, *connect.Request[v1.ListStoreAppBinariesRequest]) (*connect.Response[v1.ListStoreAppBinariesResponse], error)
	// `Gebura` `Normal`
	ListStoreAppBinaryFiles(context.Context, *connect.Request[v1.ListStoreAppBinaryFilesRequest]) (*connect.Response[v1.ListStoreAppBinaryFilesResponse], error)
	// `Gebura` `Normal`
	DownloadStoreAppBinary(context.Context, *connect.Request[v1.DownloadStoreAppBinaryRequest]) (*connect.Response[v1.DownloadStoreAppBinaryResponse], error)
	// `Gebura` `Normal`
	ListStoreAppSaveFiles(context.Context, *connect.Request[v1.ListStoreAppSaveFilesRequest]) (*connect.Response[v1.ListStoreAppSaveFilesResponse], error)
	// `Gebura` `Normal`
	DownloadStoreAppSaveFile(context.Context, *connect.Request[v1.DownloadStoreAppSaveFileRequest]) (*connect.Response[v1.DownloadStoreAppSaveFileResponse], error)
	// `Gebura` `Normal` Search app infos
	SearchAppInfos(context.Context, *connect.Request[v1.SearchAppInfosRequest]) (*connect.Response[v1.SearchAppInfosResponse], error)
	// `Gebura` `Normal`
	CreateApp(context.Context, *connect.Request[v1.CreateAppRequest]) (*connect.Response[v1.CreateAppResponse], error)
	// `Gebura` `Normal`
	UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error)
	// `Gebura` `Normal`
	ListApps(context.Context, *connect.Request[v1.ListAppsRequest]) (*connect.Response[v1.ListAppsResponse], error)
	// `Gebura` `Normal`
	DeleteApp(context.Context, *connect.Request[v1.DeleteAppRequest]) (*connect.Response[v1.DeleteAppResponse], error)
	// `Gebura` `Normal`
	BatchCreateAppRunTime(context.Context, *connect.Request[v1.BatchCreateAppRunTimeRequest]) (*connect.Response[v1.BatchCreateAppRunTimeResponse], error)
	// `Gebura` `Normal`
	SumAppRunTime(context.Context, *connect.Request[v1.SumAppRunTimeRequest]) (*connect.Response[v1.SumAppRunTimeResponse], error)
	// `Gebura` `Normal`
	ListAppRunTimes(context.Context, *connect.Request[v1.ListAppRunTimesRequest]) (*connect.Response[v1.ListAppRunTimesResponse], error)
	// `Gebura` `Normal`
	DeleteAppRunTime(context.Context, *connect.Request[v1.DeleteAppRunTimeRequest]) (*connect.Response[v1.DeleteAppRunTimeResponse], error)
	// `Gebura` `Normal`
	UploadAppSaveFile(context.Context, *connect.Request[v1.UploadAppSaveFileRequest]) (*connect.Response[v1.UploadAppSaveFileResponse], error)
	// `Gebura` `Normal`
	DownloadAppSaveFile(context.Context, *connect.Request[v1.DownloadAppSaveFileRequest]) (*connect.Response[v1.DownloadAppSaveFileResponse], error)
	// `Gebura` `Normal`
	ListAppSaveFiles(context.Context, *connect.Request[v1.ListAppSaveFilesRequest]) (*connect.Response[v1.ListAppSaveFilesResponse], error)
	// `Gebura` `Normal`
	DeleteAppSaveFile(context.Context, *connect.Request[v1.DeleteAppSaveFileRequest]) (*connect.Response[v1.DeleteAppSaveFileResponse], error)
	// `Gebura` `Normal`
	PinAppSaveFile(context.Context, *connect.Request[v1.PinAppSaveFileRequest]) (*connect.Response[v1.PinAppSaveFileResponse], error)
	// `Gebura` `Normal`
	UnpinAppSaveFile(context.Context, *connect.Request[v1.UnpinAppSaveFileRequest]) (*connect.Response[v1.UnpinAppSaveFileResponse], error)
	// `Gebura` `Normal`
	GetAppSaveFileCapacity(context.Context, *connect.Request[v1.GetAppSaveFileCapacityRequest]) (*connect.Response[v1.GetAppSaveFileCapacityResponse], error)
	// `Gebura` `Normal`
	SetAppSaveFileCapacity(context.Context, *connect.Request[v1.SetAppSaveFileCapacityRequest]) (*connect.Response[v1.SetAppSaveFileCapacityResponse], error)
	// `Gebura` `Normal`
	ListAppCategories(context.Context, *connect.Request[v1.ListAppCategoriesRequest]) (*connect.Response[v1.ListAppCategoriesResponse], error)
	// `Gebura` `Normal`
	CreateAppCategory(context.Context, *connect.Request[v1.CreateAppCategoryRequest]) (*connect.Response[v1.CreateAppCategoryResponse], error)
	// `Gebura` `Normal`
	UpdateAppCategory(context.Context, *connect.Request[v1.UpdateAppCategoryRequest]) (*connect.Response[v1.UpdateAppCategoryResponse], error)
	// `Gebura` `Normal`
	DeleteAppCategory(context.Context, *connect.Request[v1.DeleteAppCategoryRequest]) (*connect.Response[v1.DeleteAppCategoryResponse], error)
	// `Netzach` `Normal`
	CreateNotifyTarget(context.Context, *connect.Request[v1.CreateNotifyTargetRequest]) (*connect.Response[v1.CreateNotifyTargetResponse], error)
	// `Netzach` `Normal`
	UpdateNotifyTarget(context.Context, *connect.Request[v1.UpdateNotifyTargetRequest]) (*connect.Response[v1.UpdateNotifyTargetResponse], error)
	// `Netzach` `Normal`
	ListNotifyTargets(context.Context, *connect.Request[v1.ListNotifyTargetsRequest]) (*connect.Response[v1.ListNotifyTargetsResponse], error)
	// `Netzach` `Normal`
	CreateNotifyFlow(context.Context, *connect.Request[v1.CreateNotifyFlowRequest]) (*connect.Response[v1.CreateNotifyFlowResponse], error)
	// `Netzach` `Normal`
	UpdateNotifyFlow(context.Context, *connect.Request[v1.UpdateNotifyFlowRequest]) (*connect.Response[v1.UpdateNotifyFlowResponse], error)
	// `Netzach` `Normal`
	ListNotifyFlows(context.Context, *connect.Request[v1.ListNotifyFlowsRequest]) (*connect.Response[v1.ListNotifyFlowsResponse], error)
	// `Netzach` `Normal`
	ListSystemNotifications(context.Context, *connect.Request[v1.ListSystemNotificationsRequest]) (*connect.Response[v1.ListSystemNotificationsResponse], error)
	// `Netzach` `Normal`
	UpdateSystemNotification(context.Context, *connect.Request[v1.UpdateSystemNotificationRequest]) (*connect.Response[v1.UpdateSystemNotificationResponse], error)
	// `Yesod` `Normal`
	CreateFeedConfig(context.Context, *connect.Request[v1.CreateFeedConfigRequest]) (*connect.Response[v1.CreateFeedConfigResponse], error)
	// `Yesod` `Normal`
	UpdateFeedConfig(context.Context, *connect.Request[v1.UpdateFeedConfigRequest]) (*connect.Response[v1.UpdateFeedConfigResponse], error)
	// `Yesod` `Normal`
	ListFeedConfigs(context.Context, *connect.Request[v1.ListFeedConfigsRequest]) (*connect.Response[v1.ListFeedConfigsResponse], error)
	// `Yesod` `Normal`
	CreateFeedActionSet(context.Context, *connect.Request[v1.CreateFeedActionSetRequest]) (*connect.Response[v1.CreateFeedActionSetResponse], error)
	// `Yesod` `Normal`
	UpdateFeedActionSet(context.Context, *connect.Request[v1.UpdateFeedActionSetRequest]) (*connect.Response[v1.UpdateFeedActionSetResponse], error)
	// `Yesod` `Normal`
	ListFeedActionSets(context.Context, *connect.Request[v1.ListFeedActionSetsRequest]) (*connect.Response[v1.ListFeedActionSetsResponse], error)
	// `Yesod` `Normal`
	ListFeedCategories(context.Context, *connect.Request[v1.ListFeedCategoriesRequest]) (*connect.Response[v1.ListFeedCategoriesResponse], error)
	// `Yesod` `Normal`
	ListFeedPlatforms(context.Context, *connect.Request[v1.ListFeedPlatformsRequest]) (*connect.Response[v1.ListFeedPlatformsResponse], error)
	// `Yesod` `Normal`
	ListFeedItems(context.Context, *connect.Request[v1.ListFeedItemsRequest]) (*connect.Response[v1.ListFeedItemsResponse], error)
	// `Yesod` `Normal`
	GetFeedItem(context.Context, *connect.Request[v1.GetFeedItemRequest]) (*connect.Response[v1.GetFeedItemResponse], error)
	// `Yesod` `Normal`
	GetBatchFeedItems(context.Context, *connect.Request[v1.GetBatchFeedItemsRequest]) (*connect.Response[v1.GetBatchFeedItemsResponse], error)
	// `Yesod` `Normal`
	ReadFeedItem(context.Context, *connect.Request[v1.ReadFeedItemRequest]) (*connect.Response[v1.ReadFeedItemResponse], error)
	// `Yesod` `Normal`
	CreateFeedItemCollection(context.Context, *connect.Request[v1.CreateFeedItemCollectionRequest]) (*connect.Response[v1.CreateFeedItemCollectionResponse], error)
	// `Yesod` `Normal`
	UpdateFeedItemCollection(context.Context, *connect.Request[v1.UpdateFeedItemCollectionRequest]) (*connect.Response[v1.UpdateFeedItemCollectionResponse], error)
	// `Yesod` `Normal`
	ListFeedItemCollections(context.Context, *connect.Request[v1.ListFeedItemCollectionsRequest]) (*connect.Response[v1.ListFeedItemCollectionsResponse], error)
	// `Yesod` `Normal`
	AddFeedItemToCollection(context.Context, *connect.Request[v1.AddFeedItemToCollectionRequest]) (*connect.Response[v1.AddFeedItemToCollectionResponse], error)
	// `Yesod` `Normal`
	RemoveFeedItemFromCollection(context.Context, *connect.Request[v1.RemoveFeedItemFromCollectionRequest]) (*connect.Response[v1.RemoveFeedItemFromCollectionResponse], error)
	// `Yesod` `Normal`
	ListFeedItemsInCollection(context.Context, *connect.Request[v1.ListFeedItemsInCollectionRequest]) (*connect.Response[v1.ListFeedItemsInCollectionResponse], error)
}

// NewLibrarianSephirahServiceClient constructs a client for the
// librarian.sephirah.v1.LibrarianSephirahService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLibrarianSephirahServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LibrarianSephirahServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	librarianSephirahServiceMethods := v1.File_librarian_sephirah_v1_sephirah_service_proto.Services().ByName("LibrarianSephirahService").Methods()
	return &librarianSephirahServiceClient{
		getServerInformation: connect.NewClient[v1.GetServerInformationRequest, v1.GetServerInformationResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceGetServerInformationProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("GetServerInformation")),
			connect.WithClientOptions(opts...),
		),
		listenServerEvent: connect.NewClient[v1.ListenServerEventRequest, v1.ListenServerEventResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListenServerEventProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListenServerEvent")),
			connect.WithClientOptions(opts...),
		),
		getToken: connect.NewClient[v1.GetTokenRequest, v1.GetTokenResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceGetTokenProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("GetToken")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceRefreshTokenProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceGetUserProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		registerUser: connect.NewClient[v1.RegisterUserRequest, v1.RegisterUserResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceRegisterUserProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("RegisterUser")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceUpdateUserProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		registerDevice: connect.NewClient[v1.RegisterDeviceRequest, v1.RegisterDeviceResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceRegisterDeviceProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("RegisterDevice")),
			connect.WithClientOptions(opts...),
		),
		listUserSessions: connect.NewClient[v1.ListUserSessionsRequest, v1.ListUserSessionsResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListUserSessionsProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListUserSessions")),
			connect.WithClientOptions(opts...),
		),
		deleteUserSession: connect.NewClient[v1.DeleteUserSessionRequest, v1.DeleteUserSessionResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceDeleteUserSessionProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("DeleteUserSession")),
			connect.WithClientOptions(opts...),
		),
		linkAccount: connect.NewClient[v1.LinkAccountRequest, v1.LinkAccountResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceLinkAccountProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("LinkAccount")),
			connect.WithClientOptions(opts...),
		),
		unLinkAccount: connect.NewClient[v1.UnLinkAccountRequest, v1.UnLinkAccountResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceUnLinkAccountProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("UnLinkAccount")),
			connect.WithClientOptions(opts...),
		),
		listLinkAccounts: connect.NewClient[v1.ListLinkAccountsRequest, v1.ListLinkAccountsResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListLinkAccountsProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListLinkAccounts")),
			connect.WithClientOptions(opts...),
		),
		listPorterDigests: connect.NewClient[v1.ListPorterDigestsRequest, v1.ListPorterDigestsResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListPorterDigestsProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListPorterDigests")),
			connect.WithClientOptions(opts...),
		),
		createPorterContext: connect.NewClient[v1.CreatePorterContextRequest, v1.CreatePorterContextResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceCreatePorterContextProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("CreatePorterContext")),
			connect.WithClientOptions(opts...),
		),
		listPorterContexts: connect.NewClient[v1.ListPorterContextsRequest, v1.ListPorterContextsResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListPorterContextsProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListPorterContexts")),
			connect.WithClientOptions(opts...),
		),
		updatePorterContext: connect.NewClient[v1.UpdatePorterContextRequest, v1.UpdatePorterContextResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceUpdatePorterContextProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdatePorterContext")),
			connect.WithClientOptions(opts...),
		),
		getStorageCapacityUsage: connect.NewClient[v1.GetStorageCapacityUsageRequest, v1.GetStorageCapacityUsageResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceGetStorageCapacityUsageProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("GetStorageCapacityUsage")),
			connect.WithClientOptions(opts...),
		),
		uploadFile: connect.NewClient[v1.UploadFileRequest, v1.UploadFileResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceUploadFileProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("UploadFile")),
			connect.WithClientOptions(opts...),
		),
		downloadFile: connect.NewClient[v1.DownloadFileRequest, v1.DownloadFileResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceDownloadFileProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("DownloadFile")),
			connect.WithClientOptions(opts...),
		),
		simpleUploadFile: connect.NewClient[v1.SimpleUploadFileRequest, v1.SimpleUploadFileResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceSimpleUploadFileProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("SimpleUploadFile")),
			connect.WithClientOptions(opts...),
		),
		simpleDownloadFile: connect.NewClient[v1.SimpleDownloadFileRequest, v1.SimpleDownloadFileResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceSimpleDownloadFileProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("SimpleDownloadFile")),
			connect.WithClientOptions(opts...),
		),
		presignedUploadFile: connect.NewClient[v1.PresignedUploadFileRequest, v1.PresignedUploadFileResponse](
			httpClient,
			baseURL+LibrarianSephirahServicePresignedUploadFileProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("PresignedUploadFile")),
			connect.WithClientOptions(opts...),
		),
		presignedUploadFileStatus: connect.NewClient[v1.PresignedUploadFileStatusRequest, v1.PresignedUploadFileStatusResponse](
			httpClient,
			baseURL+LibrarianSephirahServicePresignedUploadFileStatusProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("PresignedUploadFileStatus")),
			connect.WithClientOptions(opts...),
		),
		presignedDownloadFile: connect.NewClient[v1.PresignedDownloadFileRequest, v1.PresignedDownloadFileResponse](
			httpClient,
			baseURL+LibrarianSephirahServicePresignedDownloadFileProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("PresignedDownloadFile")),
			connect.WithClientOptions(opts...),
		),
		uploadImage: connect.NewClient[v1.UploadImageRequest, v1.UploadImageResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceUploadImageProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("UploadImage")),
			connect.WithClientOptions(opts...),
		),
		updateImage: connect.NewClient[v1.UpdateImageRequest, v1.UpdateImageResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceUpdateImageProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateImage")),
			connect.WithClientOptions(opts...),
		),
		listImages: connect.NewClient[v1.ListImagesRequest, v1.ListImagesResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListImagesProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListImages")),
			connect.WithClientOptions(opts...),
		),
		searchImages: connect.NewClient[v1.SearchImagesRequest, v1.SearchImagesResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceSearchImagesProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("SearchImages")),
			connect.WithClientOptions(opts...),
		),
		getImage: connect.NewClient[v1.GetImageRequest, v1.GetImageResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceGetImageProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("GetImage")),
			connect.WithClientOptions(opts...),
		),
		downloadImage: connect.NewClient[v1.DownloadImageRequest, v1.DownloadImageResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceDownloadImageProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("DownloadImage")),
			connect.WithClientOptions(opts...),
		),
		searchStoreApps: connect.NewClient[v1.SearchStoreAppsRequest, v1.SearchStoreAppsResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceSearchStoreAppsProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("SearchStoreApps")),
			connect.WithClientOptions(opts...),
		),
		getStoreAppSummary: connect.NewClient[v1.GetStoreAppSummaryRequest, v1.GetStoreAppSummaryResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceGetStoreAppSummaryProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("GetStoreAppSummary")),
			connect.WithClientOptions(opts...),
		),
		acquireStoreApp: connect.NewClient[v1.AcquireStoreAppRequest, v1.AcquireStoreAppResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceAcquireStoreAppProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("AcquireStoreApp")),
			connect.WithClientOptions(opts...),
		),
		listStoreAppBinaries: connect.NewClient[v1.ListStoreAppBinariesRequest, v1.ListStoreAppBinariesResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListStoreAppBinariesProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListStoreAppBinaries")),
			connect.WithClientOptions(opts...),
		),
		listStoreAppBinaryFiles: connect.NewClient[v1.ListStoreAppBinaryFilesRequest, v1.ListStoreAppBinaryFilesResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListStoreAppBinaryFilesProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListStoreAppBinaryFiles")),
			connect.WithClientOptions(opts...),
		),
		downloadStoreAppBinary: connect.NewClient[v1.DownloadStoreAppBinaryRequest, v1.DownloadStoreAppBinaryResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceDownloadStoreAppBinaryProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("DownloadStoreAppBinary")),
			connect.WithClientOptions(opts...),
		),
		listStoreAppSaveFiles: connect.NewClient[v1.ListStoreAppSaveFilesRequest, v1.ListStoreAppSaveFilesResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListStoreAppSaveFilesProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListStoreAppSaveFiles")),
			connect.WithClientOptions(opts...),
		),
		downloadStoreAppSaveFile: connect.NewClient[v1.DownloadStoreAppSaveFileRequest, v1.DownloadStoreAppSaveFileResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceDownloadStoreAppSaveFileProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("DownloadStoreAppSaveFile")),
			connect.WithClientOptions(opts...),
		),
		searchAppInfos: connect.NewClient[v1.SearchAppInfosRequest, v1.SearchAppInfosResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceSearchAppInfosProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("SearchAppInfos")),
			connect.WithClientOptions(opts...),
		),
		createApp: connect.NewClient[v1.CreateAppRequest, v1.CreateAppResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceCreateAppProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("CreateApp")),
			connect.WithClientOptions(opts...),
		),
		updateApp: connect.NewClient[v1.UpdateAppRequest, v1.UpdateAppResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceUpdateAppProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateApp")),
			connect.WithClientOptions(opts...),
		),
		listApps: connect.NewClient[v1.ListAppsRequest, v1.ListAppsResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListAppsProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListApps")),
			connect.WithClientOptions(opts...),
		),
		deleteApp: connect.NewClient[v1.DeleteAppRequest, v1.DeleteAppResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceDeleteAppProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("DeleteApp")),
			connect.WithClientOptions(opts...),
		),
		batchCreateAppRunTime: connect.NewClient[v1.BatchCreateAppRunTimeRequest, v1.BatchCreateAppRunTimeResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceBatchCreateAppRunTimeProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("BatchCreateAppRunTime")),
			connect.WithClientOptions(opts...),
		),
		sumAppRunTime: connect.NewClient[v1.SumAppRunTimeRequest, v1.SumAppRunTimeResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceSumAppRunTimeProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("SumAppRunTime")),
			connect.WithClientOptions(opts...),
		),
		listAppRunTimes: connect.NewClient[v1.ListAppRunTimesRequest, v1.ListAppRunTimesResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListAppRunTimesProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListAppRunTimes")),
			connect.WithClientOptions(opts...),
		),
		deleteAppRunTime: connect.NewClient[v1.DeleteAppRunTimeRequest, v1.DeleteAppRunTimeResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceDeleteAppRunTimeProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("DeleteAppRunTime")),
			connect.WithClientOptions(opts...),
		),
		uploadAppSaveFile: connect.NewClient[v1.UploadAppSaveFileRequest, v1.UploadAppSaveFileResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceUploadAppSaveFileProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("UploadAppSaveFile")),
			connect.WithClientOptions(opts...),
		),
		downloadAppSaveFile: connect.NewClient[v1.DownloadAppSaveFileRequest, v1.DownloadAppSaveFileResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceDownloadAppSaveFileProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("DownloadAppSaveFile")),
			connect.WithClientOptions(opts...),
		),
		listAppSaveFiles: connect.NewClient[v1.ListAppSaveFilesRequest, v1.ListAppSaveFilesResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListAppSaveFilesProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListAppSaveFiles")),
			connect.WithClientOptions(opts...),
		),
		deleteAppSaveFile: connect.NewClient[v1.DeleteAppSaveFileRequest, v1.DeleteAppSaveFileResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceDeleteAppSaveFileProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("DeleteAppSaveFile")),
			connect.WithClientOptions(opts...),
		),
		pinAppSaveFile: connect.NewClient[v1.PinAppSaveFileRequest, v1.PinAppSaveFileResponse](
			httpClient,
			baseURL+LibrarianSephirahServicePinAppSaveFileProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("PinAppSaveFile")),
			connect.WithClientOptions(opts...),
		),
		unpinAppSaveFile: connect.NewClient[v1.UnpinAppSaveFileRequest, v1.UnpinAppSaveFileResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceUnpinAppSaveFileProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("UnpinAppSaveFile")),
			connect.WithClientOptions(opts...),
		),
		getAppSaveFileCapacity: connect.NewClient[v1.GetAppSaveFileCapacityRequest, v1.GetAppSaveFileCapacityResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceGetAppSaveFileCapacityProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("GetAppSaveFileCapacity")),
			connect.WithClientOptions(opts...),
		),
		setAppSaveFileCapacity: connect.NewClient[v1.SetAppSaveFileCapacityRequest, v1.SetAppSaveFileCapacityResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceSetAppSaveFileCapacityProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("SetAppSaveFileCapacity")),
			connect.WithClientOptions(opts...),
		),
		listAppCategories: connect.NewClient[v1.ListAppCategoriesRequest, v1.ListAppCategoriesResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListAppCategoriesProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListAppCategories")),
			connect.WithClientOptions(opts...),
		),
		createAppCategory: connect.NewClient[v1.CreateAppCategoryRequest, v1.CreateAppCategoryResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceCreateAppCategoryProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("CreateAppCategory")),
			connect.WithClientOptions(opts...),
		),
		updateAppCategory: connect.NewClient[v1.UpdateAppCategoryRequest, v1.UpdateAppCategoryResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceUpdateAppCategoryProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateAppCategory")),
			connect.WithClientOptions(opts...),
		),
		deleteAppCategory: connect.NewClient[v1.DeleteAppCategoryRequest, v1.DeleteAppCategoryResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceDeleteAppCategoryProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("DeleteAppCategory")),
			connect.WithClientOptions(opts...),
		),
		createNotifyTarget: connect.NewClient[v1.CreateNotifyTargetRequest, v1.CreateNotifyTargetResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceCreateNotifyTargetProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("CreateNotifyTarget")),
			connect.WithClientOptions(opts...),
		),
		updateNotifyTarget: connect.NewClient[v1.UpdateNotifyTargetRequest, v1.UpdateNotifyTargetResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceUpdateNotifyTargetProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateNotifyTarget")),
			connect.WithClientOptions(opts...),
		),
		listNotifyTargets: connect.NewClient[v1.ListNotifyTargetsRequest, v1.ListNotifyTargetsResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListNotifyTargetsProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListNotifyTargets")),
			connect.WithClientOptions(opts...),
		),
		createNotifyFlow: connect.NewClient[v1.CreateNotifyFlowRequest, v1.CreateNotifyFlowResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceCreateNotifyFlowProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("CreateNotifyFlow")),
			connect.WithClientOptions(opts...),
		),
		updateNotifyFlow: connect.NewClient[v1.UpdateNotifyFlowRequest, v1.UpdateNotifyFlowResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceUpdateNotifyFlowProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateNotifyFlow")),
			connect.WithClientOptions(opts...),
		),
		listNotifyFlows: connect.NewClient[v1.ListNotifyFlowsRequest, v1.ListNotifyFlowsResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListNotifyFlowsProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListNotifyFlows")),
			connect.WithClientOptions(opts...),
		),
		listSystemNotifications: connect.NewClient[v1.ListSystemNotificationsRequest, v1.ListSystemNotificationsResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListSystemNotificationsProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListSystemNotifications")),
			connect.WithClientOptions(opts...),
		),
		updateSystemNotification: connect.NewClient[v1.UpdateSystemNotificationRequest, v1.UpdateSystemNotificationResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceUpdateSystemNotificationProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateSystemNotification")),
			connect.WithClientOptions(opts...),
		),
		createFeedConfig: connect.NewClient[v1.CreateFeedConfigRequest, v1.CreateFeedConfigResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceCreateFeedConfigProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("CreateFeedConfig")),
			connect.WithClientOptions(opts...),
		),
		updateFeedConfig: connect.NewClient[v1.UpdateFeedConfigRequest, v1.UpdateFeedConfigResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceUpdateFeedConfigProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateFeedConfig")),
			connect.WithClientOptions(opts...),
		),
		listFeedConfigs: connect.NewClient[v1.ListFeedConfigsRequest, v1.ListFeedConfigsResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListFeedConfigsProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListFeedConfigs")),
			connect.WithClientOptions(opts...),
		),
		createFeedActionSet: connect.NewClient[v1.CreateFeedActionSetRequest, v1.CreateFeedActionSetResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceCreateFeedActionSetProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("CreateFeedActionSet")),
			connect.WithClientOptions(opts...),
		),
		updateFeedActionSet: connect.NewClient[v1.UpdateFeedActionSetRequest, v1.UpdateFeedActionSetResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceUpdateFeedActionSetProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateFeedActionSet")),
			connect.WithClientOptions(opts...),
		),
		listFeedActionSets: connect.NewClient[v1.ListFeedActionSetsRequest, v1.ListFeedActionSetsResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListFeedActionSetsProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListFeedActionSets")),
			connect.WithClientOptions(opts...),
		),
		listFeedCategories: connect.NewClient[v1.ListFeedCategoriesRequest, v1.ListFeedCategoriesResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListFeedCategoriesProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListFeedCategories")),
			connect.WithClientOptions(opts...),
		),
		listFeedPlatforms: connect.NewClient[v1.ListFeedPlatformsRequest, v1.ListFeedPlatformsResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListFeedPlatformsProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListFeedPlatforms")),
			connect.WithClientOptions(opts...),
		),
		listFeedItems: connect.NewClient[v1.ListFeedItemsRequest, v1.ListFeedItemsResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListFeedItemsProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListFeedItems")),
			connect.WithClientOptions(opts...),
		),
		getFeedItem: connect.NewClient[v1.GetFeedItemRequest, v1.GetFeedItemResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceGetFeedItemProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("GetFeedItem")),
			connect.WithClientOptions(opts...),
		),
		getBatchFeedItems: connect.NewClient[v1.GetBatchFeedItemsRequest, v1.GetBatchFeedItemsResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceGetBatchFeedItemsProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("GetBatchFeedItems")),
			connect.WithClientOptions(opts...),
		),
		readFeedItem: connect.NewClient[v1.ReadFeedItemRequest, v1.ReadFeedItemResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceReadFeedItemProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ReadFeedItem")),
			connect.WithClientOptions(opts...),
		),
		createFeedItemCollection: connect.NewClient[v1.CreateFeedItemCollectionRequest, v1.CreateFeedItemCollectionResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceCreateFeedItemCollectionProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("CreateFeedItemCollection")),
			connect.WithClientOptions(opts...),
		),
		updateFeedItemCollection: connect.NewClient[v1.UpdateFeedItemCollectionRequest, v1.UpdateFeedItemCollectionResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceUpdateFeedItemCollectionProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateFeedItemCollection")),
			connect.WithClientOptions(opts...),
		),
		listFeedItemCollections: connect.NewClient[v1.ListFeedItemCollectionsRequest, v1.ListFeedItemCollectionsResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListFeedItemCollectionsProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListFeedItemCollections")),
			connect.WithClientOptions(opts...),
		),
		addFeedItemToCollection: connect.NewClient[v1.AddFeedItemToCollectionRequest, v1.AddFeedItemToCollectionResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceAddFeedItemToCollectionProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("AddFeedItemToCollection")),
			connect.WithClientOptions(opts...),
		),
		removeFeedItemFromCollection: connect.NewClient[v1.RemoveFeedItemFromCollectionRequest, v1.RemoveFeedItemFromCollectionResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceRemoveFeedItemFromCollectionProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("RemoveFeedItemFromCollection")),
			connect.WithClientOptions(opts...),
		),
		listFeedItemsInCollection: connect.NewClient[v1.ListFeedItemsInCollectionRequest, v1.ListFeedItemsInCollectionResponse](
			httpClient,
			baseURL+LibrarianSephirahServiceListFeedItemsInCollectionProcedure,
			connect.WithSchema(librarianSephirahServiceMethods.ByName("ListFeedItemsInCollection")),
			connect.WithClientOptions(opts...),
		),
	}
}

// librarianSephirahServiceClient implements LibrarianSephirahServiceClient.
type librarianSephirahServiceClient struct {
	getServerInformation         *connect.Client[v1.GetServerInformationRequest, v1.GetServerInformationResponse]
	listenServerEvent            *connect.Client[v1.ListenServerEventRequest, v1.ListenServerEventResponse]
	getToken                     *connect.Client[v1.GetTokenRequest, v1.GetTokenResponse]
	refreshToken                 *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
	getUser                      *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	registerUser                 *connect.Client[v1.RegisterUserRequest, v1.RegisterUserResponse]
	updateUser                   *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	registerDevice               *connect.Client[v1.RegisterDeviceRequest, v1.RegisterDeviceResponse]
	listUserSessions             *connect.Client[v1.ListUserSessionsRequest, v1.ListUserSessionsResponse]
	deleteUserSession            *connect.Client[v1.DeleteUserSessionRequest, v1.DeleteUserSessionResponse]
	linkAccount                  *connect.Client[v1.LinkAccountRequest, v1.LinkAccountResponse]
	unLinkAccount                *connect.Client[v1.UnLinkAccountRequest, v1.UnLinkAccountResponse]
	listLinkAccounts             *connect.Client[v1.ListLinkAccountsRequest, v1.ListLinkAccountsResponse]
	listPorterDigests            *connect.Client[v1.ListPorterDigestsRequest, v1.ListPorterDigestsResponse]
	createPorterContext          *connect.Client[v1.CreatePorterContextRequest, v1.CreatePorterContextResponse]
	listPorterContexts           *connect.Client[v1.ListPorterContextsRequest, v1.ListPorterContextsResponse]
	updatePorterContext          *connect.Client[v1.UpdatePorterContextRequest, v1.UpdatePorterContextResponse]
	getStorageCapacityUsage      *connect.Client[v1.GetStorageCapacityUsageRequest, v1.GetStorageCapacityUsageResponse]
	uploadFile                   *connect.Client[v1.UploadFileRequest, v1.UploadFileResponse]
	downloadFile                 *connect.Client[v1.DownloadFileRequest, v1.DownloadFileResponse]
	simpleUploadFile             *connect.Client[v1.SimpleUploadFileRequest, v1.SimpleUploadFileResponse]
	simpleDownloadFile           *connect.Client[v1.SimpleDownloadFileRequest, v1.SimpleDownloadFileResponse]
	presignedUploadFile          *connect.Client[v1.PresignedUploadFileRequest, v1.PresignedUploadFileResponse]
	presignedUploadFileStatus    *connect.Client[v1.PresignedUploadFileStatusRequest, v1.PresignedUploadFileStatusResponse]
	presignedDownloadFile        *connect.Client[v1.PresignedDownloadFileRequest, v1.PresignedDownloadFileResponse]
	uploadImage                  *connect.Client[v1.UploadImageRequest, v1.UploadImageResponse]
	updateImage                  *connect.Client[v1.UpdateImageRequest, v1.UpdateImageResponse]
	listImages                   *connect.Client[v1.ListImagesRequest, v1.ListImagesResponse]
	searchImages                 *connect.Client[v1.SearchImagesRequest, v1.SearchImagesResponse]
	getImage                     *connect.Client[v1.GetImageRequest, v1.GetImageResponse]
	downloadImage                *connect.Client[v1.DownloadImageRequest, v1.DownloadImageResponse]
	searchStoreApps              *connect.Client[v1.SearchStoreAppsRequest, v1.SearchStoreAppsResponse]
	getStoreAppSummary           *connect.Client[v1.GetStoreAppSummaryRequest, v1.GetStoreAppSummaryResponse]
	acquireStoreApp              *connect.Client[v1.AcquireStoreAppRequest, v1.AcquireStoreAppResponse]
	listStoreAppBinaries         *connect.Client[v1.ListStoreAppBinariesRequest, v1.ListStoreAppBinariesResponse]
	listStoreAppBinaryFiles      *connect.Client[v1.ListStoreAppBinaryFilesRequest, v1.ListStoreAppBinaryFilesResponse]
	downloadStoreAppBinary       *connect.Client[v1.DownloadStoreAppBinaryRequest, v1.DownloadStoreAppBinaryResponse]
	listStoreAppSaveFiles        *connect.Client[v1.ListStoreAppSaveFilesRequest, v1.ListStoreAppSaveFilesResponse]
	downloadStoreAppSaveFile     *connect.Client[v1.DownloadStoreAppSaveFileRequest, v1.DownloadStoreAppSaveFileResponse]
	searchAppInfos               *connect.Client[v1.SearchAppInfosRequest, v1.SearchAppInfosResponse]
	createApp                    *connect.Client[v1.CreateAppRequest, v1.CreateAppResponse]
	updateApp                    *connect.Client[v1.UpdateAppRequest, v1.UpdateAppResponse]
	listApps                     *connect.Client[v1.ListAppsRequest, v1.ListAppsResponse]
	deleteApp                    *connect.Client[v1.DeleteAppRequest, v1.DeleteAppResponse]
	batchCreateAppRunTime        *connect.Client[v1.BatchCreateAppRunTimeRequest, v1.BatchCreateAppRunTimeResponse]
	sumAppRunTime                *connect.Client[v1.SumAppRunTimeRequest, v1.SumAppRunTimeResponse]
	listAppRunTimes              *connect.Client[v1.ListAppRunTimesRequest, v1.ListAppRunTimesResponse]
	deleteAppRunTime             *connect.Client[v1.DeleteAppRunTimeRequest, v1.DeleteAppRunTimeResponse]
	uploadAppSaveFile            *connect.Client[v1.UploadAppSaveFileRequest, v1.UploadAppSaveFileResponse]
	downloadAppSaveFile          *connect.Client[v1.DownloadAppSaveFileRequest, v1.DownloadAppSaveFileResponse]
	listAppSaveFiles             *connect.Client[v1.ListAppSaveFilesRequest, v1.ListAppSaveFilesResponse]
	deleteAppSaveFile            *connect.Client[v1.DeleteAppSaveFileRequest, v1.DeleteAppSaveFileResponse]
	pinAppSaveFile               *connect.Client[v1.PinAppSaveFileRequest, v1.PinAppSaveFileResponse]
	unpinAppSaveFile             *connect.Client[v1.UnpinAppSaveFileRequest, v1.UnpinAppSaveFileResponse]
	getAppSaveFileCapacity       *connect.Client[v1.GetAppSaveFileCapacityRequest, v1.GetAppSaveFileCapacityResponse]
	setAppSaveFileCapacity       *connect.Client[v1.SetAppSaveFileCapacityRequest, v1.SetAppSaveFileCapacityResponse]
	listAppCategories            *connect.Client[v1.ListAppCategoriesRequest, v1.ListAppCategoriesResponse]
	createAppCategory            *connect.Client[v1.CreateAppCategoryRequest, v1.CreateAppCategoryResponse]
	updateAppCategory            *connect.Client[v1.UpdateAppCategoryRequest, v1.UpdateAppCategoryResponse]
	deleteAppCategory            *connect.Client[v1.DeleteAppCategoryRequest, v1.DeleteAppCategoryResponse]
	createNotifyTarget           *connect.Client[v1.CreateNotifyTargetRequest, v1.CreateNotifyTargetResponse]
	updateNotifyTarget           *connect.Client[v1.UpdateNotifyTargetRequest, v1.UpdateNotifyTargetResponse]
	listNotifyTargets            *connect.Client[v1.ListNotifyTargetsRequest, v1.ListNotifyTargetsResponse]
	createNotifyFlow             *connect.Client[v1.CreateNotifyFlowRequest, v1.CreateNotifyFlowResponse]
	updateNotifyFlow             *connect.Client[v1.UpdateNotifyFlowRequest, v1.UpdateNotifyFlowResponse]
	listNotifyFlows              *connect.Client[v1.ListNotifyFlowsRequest, v1.ListNotifyFlowsResponse]
	listSystemNotifications      *connect.Client[v1.ListSystemNotificationsRequest, v1.ListSystemNotificationsResponse]
	updateSystemNotification     *connect.Client[v1.UpdateSystemNotificationRequest, v1.UpdateSystemNotificationResponse]
	createFeedConfig             *connect.Client[v1.CreateFeedConfigRequest, v1.CreateFeedConfigResponse]
	updateFeedConfig             *connect.Client[v1.UpdateFeedConfigRequest, v1.UpdateFeedConfigResponse]
	listFeedConfigs              *connect.Client[v1.ListFeedConfigsRequest, v1.ListFeedConfigsResponse]
	createFeedActionSet          *connect.Client[v1.CreateFeedActionSetRequest, v1.CreateFeedActionSetResponse]
	updateFeedActionSet          *connect.Client[v1.UpdateFeedActionSetRequest, v1.UpdateFeedActionSetResponse]
	listFeedActionSets           *connect.Client[v1.ListFeedActionSetsRequest, v1.ListFeedActionSetsResponse]
	listFeedCategories           *connect.Client[v1.ListFeedCategoriesRequest, v1.ListFeedCategoriesResponse]
	listFeedPlatforms            *connect.Client[v1.ListFeedPlatformsRequest, v1.ListFeedPlatformsResponse]
	listFeedItems                *connect.Client[v1.ListFeedItemsRequest, v1.ListFeedItemsResponse]
	getFeedItem                  *connect.Client[v1.GetFeedItemRequest, v1.GetFeedItemResponse]
	getBatchFeedItems            *connect.Client[v1.GetBatchFeedItemsRequest, v1.GetBatchFeedItemsResponse]
	readFeedItem                 *connect.Client[v1.ReadFeedItemRequest, v1.ReadFeedItemResponse]
	createFeedItemCollection     *connect.Client[v1.CreateFeedItemCollectionRequest, v1.CreateFeedItemCollectionResponse]
	updateFeedItemCollection     *connect.Client[v1.UpdateFeedItemCollectionRequest, v1.UpdateFeedItemCollectionResponse]
	listFeedItemCollections      *connect.Client[v1.ListFeedItemCollectionsRequest, v1.ListFeedItemCollectionsResponse]
	addFeedItemToCollection      *connect.Client[v1.AddFeedItemToCollectionRequest, v1.AddFeedItemToCollectionResponse]
	removeFeedItemFromCollection *connect.Client[v1.RemoveFeedItemFromCollectionRequest, v1.RemoveFeedItemFromCollectionResponse]
	listFeedItemsInCollection    *connect.Client[v1.ListFeedItemsInCollectionRequest, v1.ListFeedItemsInCollectionResponse]
}

// GetServerInformation calls librarian.sephirah.v1.LibrarianSephirahService.GetServerInformation.
func (c *librarianSephirahServiceClient) GetServerInformation(ctx context.Context, req *connect.Request[v1.GetServerInformationRequest]) (*connect.Response[v1.GetServerInformationResponse], error) {
	return c.getServerInformation.CallUnary(ctx, req)
}

// ListenServerEvent calls librarian.sephirah.v1.LibrarianSephirahService.ListenServerEvent.
func (c *librarianSephirahServiceClient) ListenServerEvent(ctx context.Context, req *connect.Request[v1.ListenServerEventRequest]) (*connect.ServerStreamForClient[v1.ListenServerEventResponse], error) {
	return c.listenServerEvent.CallServerStream(ctx, req)
}

// GetToken calls librarian.sephirah.v1.LibrarianSephirahService.GetToken.
func (c *librarianSephirahServiceClient) GetToken(ctx context.Context, req *connect.Request[v1.GetTokenRequest]) (*connect.Response[v1.GetTokenResponse], error) {
	return c.getToken.CallUnary(ctx, req)
}

// RefreshToken calls librarian.sephirah.v1.LibrarianSephirahService.RefreshToken.
func (c *librarianSephirahServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// GetUser calls librarian.sephirah.v1.LibrarianSephirahService.GetUser.
func (c *librarianSephirahServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// RegisterUser calls librarian.sephirah.v1.LibrarianSephirahService.RegisterUser.
func (c *librarianSephirahServiceClient) RegisterUser(ctx context.Context, req *connect.Request[v1.RegisterUserRequest]) (*connect.Response[v1.RegisterUserResponse], error) {
	return c.registerUser.CallUnary(ctx, req)
}

// UpdateUser calls librarian.sephirah.v1.LibrarianSephirahService.UpdateUser.
func (c *librarianSephirahServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// RegisterDevice calls librarian.sephirah.v1.LibrarianSephirahService.RegisterDevice.
func (c *librarianSephirahServiceClient) RegisterDevice(ctx context.Context, req *connect.Request[v1.RegisterDeviceRequest]) (*connect.Response[v1.RegisterDeviceResponse], error) {
	return c.registerDevice.CallUnary(ctx, req)
}

// ListUserSessions calls librarian.sephirah.v1.LibrarianSephirahService.ListUserSessions.
func (c *librarianSephirahServiceClient) ListUserSessions(ctx context.Context, req *connect.Request[v1.ListUserSessionsRequest]) (*connect.Response[v1.ListUserSessionsResponse], error) {
	return c.listUserSessions.CallUnary(ctx, req)
}

// DeleteUserSession calls librarian.sephirah.v1.LibrarianSephirahService.DeleteUserSession.
func (c *librarianSephirahServiceClient) DeleteUserSession(ctx context.Context, req *connect.Request[v1.DeleteUserSessionRequest]) (*connect.Response[v1.DeleteUserSessionResponse], error) {
	return c.deleteUserSession.CallUnary(ctx, req)
}

// LinkAccount calls librarian.sephirah.v1.LibrarianSephirahService.LinkAccount.
func (c *librarianSephirahServiceClient) LinkAccount(ctx context.Context, req *connect.Request[v1.LinkAccountRequest]) (*connect.Response[v1.LinkAccountResponse], error) {
	return c.linkAccount.CallUnary(ctx, req)
}

// UnLinkAccount calls librarian.sephirah.v1.LibrarianSephirahService.UnLinkAccount.
func (c *librarianSephirahServiceClient) UnLinkAccount(ctx context.Context, req *connect.Request[v1.UnLinkAccountRequest]) (*connect.Response[v1.UnLinkAccountResponse], error) {
	return c.unLinkAccount.CallUnary(ctx, req)
}

// ListLinkAccounts calls librarian.sephirah.v1.LibrarianSephirahService.ListLinkAccounts.
func (c *librarianSephirahServiceClient) ListLinkAccounts(ctx context.Context, req *connect.Request[v1.ListLinkAccountsRequest]) (*connect.Response[v1.ListLinkAccountsResponse], error) {
	return c.listLinkAccounts.CallUnary(ctx, req)
}

// ListPorterDigests calls librarian.sephirah.v1.LibrarianSephirahService.ListPorterDigests.
func (c *librarianSephirahServiceClient) ListPorterDigests(ctx context.Context, req *connect.Request[v1.ListPorterDigestsRequest]) (*connect.Response[v1.ListPorterDigestsResponse], error) {
	return c.listPorterDigests.CallUnary(ctx, req)
}

// CreatePorterContext calls librarian.sephirah.v1.LibrarianSephirahService.CreatePorterContext.
func (c *librarianSephirahServiceClient) CreatePorterContext(ctx context.Context, req *connect.Request[v1.CreatePorterContextRequest]) (*connect.Response[v1.CreatePorterContextResponse], error) {
	return c.createPorterContext.CallUnary(ctx, req)
}

// ListPorterContexts calls librarian.sephirah.v1.LibrarianSephirahService.ListPorterContexts.
func (c *librarianSephirahServiceClient) ListPorterContexts(ctx context.Context, req *connect.Request[v1.ListPorterContextsRequest]) (*connect.Response[v1.ListPorterContextsResponse], error) {
	return c.listPorterContexts.CallUnary(ctx, req)
}

// UpdatePorterContext calls librarian.sephirah.v1.LibrarianSephirahService.UpdatePorterContext.
func (c *librarianSephirahServiceClient) UpdatePorterContext(ctx context.Context, req *connect.Request[v1.UpdatePorterContextRequest]) (*connect.Response[v1.UpdatePorterContextResponse], error) {
	return c.updatePorterContext.CallUnary(ctx, req)
}

// GetStorageCapacityUsage calls
// librarian.sephirah.v1.LibrarianSephirahService.GetStorageCapacityUsage.
func (c *librarianSephirahServiceClient) GetStorageCapacityUsage(ctx context.Context, req *connect.Request[v1.GetStorageCapacityUsageRequest]) (*connect.Response[v1.GetStorageCapacityUsageResponse], error) {
	return c.getStorageCapacityUsage.CallUnary(ctx, req)
}

// UploadFile calls librarian.sephirah.v1.LibrarianSephirahService.UploadFile.
func (c *librarianSephirahServiceClient) UploadFile(ctx context.Context) *connect.BidiStreamForClient[v1.UploadFileRequest, v1.UploadFileResponse] {
	return c.uploadFile.CallBidiStream(ctx)
}

// DownloadFile calls librarian.sephirah.v1.LibrarianSephirahService.DownloadFile.
func (c *librarianSephirahServiceClient) DownloadFile(ctx context.Context) *connect.BidiStreamForClient[v1.DownloadFileRequest, v1.DownloadFileResponse] {
	return c.downloadFile.CallBidiStream(ctx)
}

// SimpleUploadFile calls librarian.sephirah.v1.LibrarianSephirahService.SimpleUploadFile.
func (c *librarianSephirahServiceClient) SimpleUploadFile(ctx context.Context) *connect.BidiStreamForClient[v1.SimpleUploadFileRequest, v1.SimpleUploadFileResponse] {
	return c.simpleUploadFile.CallBidiStream(ctx)
}

// SimpleDownloadFile calls librarian.sephirah.v1.LibrarianSephirahService.SimpleDownloadFile.
func (c *librarianSephirahServiceClient) SimpleDownloadFile(ctx context.Context, req *connect.Request[v1.SimpleDownloadFileRequest]) (*connect.ServerStreamForClient[v1.SimpleDownloadFileResponse], error) {
	return c.simpleDownloadFile.CallServerStream(ctx, req)
}

// PresignedUploadFile calls librarian.sephirah.v1.LibrarianSephirahService.PresignedUploadFile.
func (c *librarianSephirahServiceClient) PresignedUploadFile(ctx context.Context, req *connect.Request[v1.PresignedUploadFileRequest]) (*connect.Response[v1.PresignedUploadFileResponse], error) {
	return c.presignedUploadFile.CallUnary(ctx, req)
}

// PresignedUploadFileStatus calls
// librarian.sephirah.v1.LibrarianSephirahService.PresignedUploadFileStatus.
func (c *librarianSephirahServiceClient) PresignedUploadFileStatus(ctx context.Context, req *connect.Request[v1.PresignedUploadFileStatusRequest]) (*connect.Response[v1.PresignedUploadFileStatusResponse], error) {
	return c.presignedUploadFileStatus.CallUnary(ctx, req)
}

// PresignedDownloadFile calls librarian.sephirah.v1.LibrarianSephirahService.PresignedDownloadFile.
func (c *librarianSephirahServiceClient) PresignedDownloadFile(ctx context.Context, req *connect.Request[v1.PresignedDownloadFileRequest]) (*connect.Response[v1.PresignedDownloadFileResponse], error) {
	return c.presignedDownloadFile.CallUnary(ctx, req)
}

// UploadImage calls librarian.sephirah.v1.LibrarianSephirahService.UploadImage.
func (c *librarianSephirahServiceClient) UploadImage(ctx context.Context, req *connect.Request[v1.UploadImageRequest]) (*connect.Response[v1.UploadImageResponse], error) {
	return c.uploadImage.CallUnary(ctx, req)
}

// UpdateImage calls librarian.sephirah.v1.LibrarianSephirahService.UpdateImage.
func (c *librarianSephirahServiceClient) UpdateImage(ctx context.Context, req *connect.Request[v1.UpdateImageRequest]) (*connect.Response[v1.UpdateImageResponse], error) {
	return c.updateImage.CallUnary(ctx, req)
}

// ListImages calls librarian.sephirah.v1.LibrarianSephirahService.ListImages.
func (c *librarianSephirahServiceClient) ListImages(ctx context.Context, req *connect.Request[v1.ListImagesRequest]) (*connect.Response[v1.ListImagesResponse], error) {
	return c.listImages.CallUnary(ctx, req)
}

// SearchImages calls librarian.sephirah.v1.LibrarianSephirahService.SearchImages.
func (c *librarianSephirahServiceClient) SearchImages(ctx context.Context, req *connect.Request[v1.SearchImagesRequest]) (*connect.Response[v1.SearchImagesResponse], error) {
	return c.searchImages.CallUnary(ctx, req)
}

// GetImage calls librarian.sephirah.v1.LibrarianSephirahService.GetImage.
func (c *librarianSephirahServiceClient) GetImage(ctx context.Context, req *connect.Request[v1.GetImageRequest]) (*connect.Response[v1.GetImageResponse], error) {
	return c.getImage.CallUnary(ctx, req)
}

// DownloadImage calls librarian.sephirah.v1.LibrarianSephirahService.DownloadImage.
func (c *librarianSephirahServiceClient) DownloadImage(ctx context.Context, req *connect.Request[v1.DownloadImageRequest]) (*connect.Response[v1.DownloadImageResponse], error) {
	return c.downloadImage.CallUnary(ctx, req)
}

// SearchStoreApps calls librarian.sephirah.v1.LibrarianSephirahService.SearchStoreApps.
func (c *librarianSephirahServiceClient) SearchStoreApps(ctx context.Context, req *connect.Request[v1.SearchStoreAppsRequest]) (*connect.Response[v1.SearchStoreAppsResponse], error) {
	return c.searchStoreApps.CallUnary(ctx, req)
}

// GetStoreAppSummary calls librarian.sephirah.v1.LibrarianSephirahService.GetStoreAppSummary.
func (c *librarianSephirahServiceClient) GetStoreAppSummary(ctx context.Context, req *connect.Request[v1.GetStoreAppSummaryRequest]) (*connect.Response[v1.GetStoreAppSummaryResponse], error) {
	return c.getStoreAppSummary.CallUnary(ctx, req)
}

// AcquireStoreApp calls librarian.sephirah.v1.LibrarianSephirahService.AcquireStoreApp.
func (c *librarianSephirahServiceClient) AcquireStoreApp(ctx context.Context, req *connect.Request[v1.AcquireStoreAppRequest]) (*connect.Response[v1.AcquireStoreAppResponse], error) {
	return c.acquireStoreApp.CallUnary(ctx, req)
}

// ListStoreAppBinaries calls librarian.sephirah.v1.LibrarianSephirahService.ListStoreAppBinaries.
func (c *librarianSephirahServiceClient) ListStoreAppBinaries(ctx context.Context, req *connect.Request[v1.ListStoreAppBinariesRequest]) (*connect.Response[v1.ListStoreAppBinariesResponse], error) {
	return c.listStoreAppBinaries.CallUnary(ctx, req)
}

// ListStoreAppBinaryFiles calls
// librarian.sephirah.v1.LibrarianSephirahService.ListStoreAppBinaryFiles.
func (c *librarianSephirahServiceClient) ListStoreAppBinaryFiles(ctx context.Context, req *connect.Request[v1.ListStoreAppBinaryFilesRequest]) (*connect.Response[v1.ListStoreAppBinaryFilesResponse], error) {
	return c.listStoreAppBinaryFiles.CallUnary(ctx, req)
}

// DownloadStoreAppBinary calls
// librarian.sephirah.v1.LibrarianSephirahService.DownloadStoreAppBinary.
func (c *librarianSephirahServiceClient) DownloadStoreAppBinary(ctx context.Context, req *connect.Request[v1.DownloadStoreAppBinaryRequest]) (*connect.Response[v1.DownloadStoreAppBinaryResponse], error) {
	return c.downloadStoreAppBinary.CallUnary(ctx, req)
}

// ListStoreAppSaveFiles calls librarian.sephirah.v1.LibrarianSephirahService.ListStoreAppSaveFiles.
func (c *librarianSephirahServiceClient) ListStoreAppSaveFiles(ctx context.Context, req *connect.Request[v1.ListStoreAppSaveFilesRequest]) (*connect.Response[v1.ListStoreAppSaveFilesResponse], error) {
	return c.listStoreAppSaveFiles.CallUnary(ctx, req)
}

// DownloadStoreAppSaveFile calls
// librarian.sephirah.v1.LibrarianSephirahService.DownloadStoreAppSaveFile.
func (c *librarianSephirahServiceClient) DownloadStoreAppSaveFile(ctx context.Context, req *connect.Request[v1.DownloadStoreAppSaveFileRequest]) (*connect.Response[v1.DownloadStoreAppSaveFileResponse], error) {
	return c.downloadStoreAppSaveFile.CallUnary(ctx, req)
}

// SearchAppInfos calls librarian.sephirah.v1.LibrarianSephirahService.SearchAppInfos.
func (c *librarianSephirahServiceClient) SearchAppInfos(ctx context.Context, req *connect.Request[v1.SearchAppInfosRequest]) (*connect.Response[v1.SearchAppInfosResponse], error) {
	return c.searchAppInfos.CallUnary(ctx, req)
}

// CreateApp calls librarian.sephirah.v1.LibrarianSephirahService.CreateApp.
func (c *librarianSephirahServiceClient) CreateApp(ctx context.Context, req *connect.Request[v1.CreateAppRequest]) (*connect.Response[v1.CreateAppResponse], error) {
	return c.createApp.CallUnary(ctx, req)
}

// UpdateApp calls librarian.sephirah.v1.LibrarianSephirahService.UpdateApp.
func (c *librarianSephirahServiceClient) UpdateApp(ctx context.Context, req *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error) {
	return c.updateApp.CallUnary(ctx, req)
}

// ListApps calls librarian.sephirah.v1.LibrarianSephirahService.ListApps.
func (c *librarianSephirahServiceClient) ListApps(ctx context.Context, req *connect.Request[v1.ListAppsRequest]) (*connect.Response[v1.ListAppsResponse], error) {
	return c.listApps.CallUnary(ctx, req)
}

// DeleteApp calls librarian.sephirah.v1.LibrarianSephirahService.DeleteApp.
func (c *librarianSephirahServiceClient) DeleteApp(ctx context.Context, req *connect.Request[v1.DeleteAppRequest]) (*connect.Response[v1.DeleteAppResponse], error) {
	return c.deleteApp.CallUnary(ctx, req)
}

// BatchCreateAppRunTime calls librarian.sephirah.v1.LibrarianSephirahService.BatchCreateAppRunTime.
func (c *librarianSephirahServiceClient) BatchCreateAppRunTime(ctx context.Context, req *connect.Request[v1.BatchCreateAppRunTimeRequest]) (*connect.Response[v1.BatchCreateAppRunTimeResponse], error) {
	return c.batchCreateAppRunTime.CallUnary(ctx, req)
}

// SumAppRunTime calls librarian.sephirah.v1.LibrarianSephirahService.SumAppRunTime.
func (c *librarianSephirahServiceClient) SumAppRunTime(ctx context.Context, req *connect.Request[v1.SumAppRunTimeRequest]) (*connect.Response[v1.SumAppRunTimeResponse], error) {
	return c.sumAppRunTime.CallUnary(ctx, req)
}

// ListAppRunTimes calls librarian.sephirah.v1.LibrarianSephirahService.ListAppRunTimes.
func (c *librarianSephirahServiceClient) ListAppRunTimes(ctx context.Context, req *connect.Request[v1.ListAppRunTimesRequest]) (*connect.Response[v1.ListAppRunTimesResponse], error) {
	return c.listAppRunTimes.CallUnary(ctx, req)
}

// DeleteAppRunTime calls librarian.sephirah.v1.LibrarianSephirahService.DeleteAppRunTime.
func (c *librarianSephirahServiceClient) DeleteAppRunTime(ctx context.Context, req *connect.Request[v1.DeleteAppRunTimeRequest]) (*connect.Response[v1.DeleteAppRunTimeResponse], error) {
	return c.deleteAppRunTime.CallUnary(ctx, req)
}

// UploadAppSaveFile calls librarian.sephirah.v1.LibrarianSephirahService.UploadAppSaveFile.
func (c *librarianSephirahServiceClient) UploadAppSaveFile(ctx context.Context, req *connect.Request[v1.UploadAppSaveFileRequest]) (*connect.Response[v1.UploadAppSaveFileResponse], error) {
	return c.uploadAppSaveFile.CallUnary(ctx, req)
}

// DownloadAppSaveFile calls librarian.sephirah.v1.LibrarianSephirahService.DownloadAppSaveFile.
func (c *librarianSephirahServiceClient) DownloadAppSaveFile(ctx context.Context, req *connect.Request[v1.DownloadAppSaveFileRequest]) (*connect.Response[v1.DownloadAppSaveFileResponse], error) {
	return c.downloadAppSaveFile.CallUnary(ctx, req)
}

// ListAppSaveFiles calls librarian.sephirah.v1.LibrarianSephirahService.ListAppSaveFiles.
func (c *librarianSephirahServiceClient) ListAppSaveFiles(ctx context.Context, req *connect.Request[v1.ListAppSaveFilesRequest]) (*connect.Response[v1.ListAppSaveFilesResponse], error) {
	return c.listAppSaveFiles.CallUnary(ctx, req)
}

// DeleteAppSaveFile calls librarian.sephirah.v1.LibrarianSephirahService.DeleteAppSaveFile.
func (c *librarianSephirahServiceClient) DeleteAppSaveFile(ctx context.Context, req *connect.Request[v1.DeleteAppSaveFileRequest]) (*connect.Response[v1.DeleteAppSaveFileResponse], error) {
	return c.deleteAppSaveFile.CallUnary(ctx, req)
}

// PinAppSaveFile calls librarian.sephirah.v1.LibrarianSephirahService.PinAppSaveFile.
func (c *librarianSephirahServiceClient) PinAppSaveFile(ctx context.Context, req *connect.Request[v1.PinAppSaveFileRequest]) (*connect.Response[v1.PinAppSaveFileResponse], error) {
	return c.pinAppSaveFile.CallUnary(ctx, req)
}

// UnpinAppSaveFile calls librarian.sephirah.v1.LibrarianSephirahService.UnpinAppSaveFile.
func (c *librarianSephirahServiceClient) UnpinAppSaveFile(ctx context.Context, req *connect.Request[v1.UnpinAppSaveFileRequest]) (*connect.Response[v1.UnpinAppSaveFileResponse], error) {
	return c.unpinAppSaveFile.CallUnary(ctx, req)
}

// GetAppSaveFileCapacity calls
// librarian.sephirah.v1.LibrarianSephirahService.GetAppSaveFileCapacity.
func (c *librarianSephirahServiceClient) GetAppSaveFileCapacity(ctx context.Context, req *connect.Request[v1.GetAppSaveFileCapacityRequest]) (*connect.Response[v1.GetAppSaveFileCapacityResponse], error) {
	return c.getAppSaveFileCapacity.CallUnary(ctx, req)
}

// SetAppSaveFileCapacity calls
// librarian.sephirah.v1.LibrarianSephirahService.SetAppSaveFileCapacity.
func (c *librarianSephirahServiceClient) SetAppSaveFileCapacity(ctx context.Context, req *connect.Request[v1.SetAppSaveFileCapacityRequest]) (*connect.Response[v1.SetAppSaveFileCapacityResponse], error) {
	return c.setAppSaveFileCapacity.CallUnary(ctx, req)
}

// ListAppCategories calls librarian.sephirah.v1.LibrarianSephirahService.ListAppCategories.
func (c *librarianSephirahServiceClient) ListAppCategories(ctx context.Context, req *connect.Request[v1.ListAppCategoriesRequest]) (*connect.Response[v1.ListAppCategoriesResponse], error) {
	return c.listAppCategories.CallUnary(ctx, req)
}

// CreateAppCategory calls librarian.sephirah.v1.LibrarianSephirahService.CreateAppCategory.
func (c *librarianSephirahServiceClient) CreateAppCategory(ctx context.Context, req *connect.Request[v1.CreateAppCategoryRequest]) (*connect.Response[v1.CreateAppCategoryResponse], error) {
	return c.createAppCategory.CallUnary(ctx, req)
}

// UpdateAppCategory calls librarian.sephirah.v1.LibrarianSephirahService.UpdateAppCategory.
func (c *librarianSephirahServiceClient) UpdateAppCategory(ctx context.Context, req *connect.Request[v1.UpdateAppCategoryRequest]) (*connect.Response[v1.UpdateAppCategoryResponse], error) {
	return c.updateAppCategory.CallUnary(ctx, req)
}

// DeleteAppCategory calls librarian.sephirah.v1.LibrarianSephirahService.DeleteAppCategory.
func (c *librarianSephirahServiceClient) DeleteAppCategory(ctx context.Context, req *connect.Request[v1.DeleteAppCategoryRequest]) (*connect.Response[v1.DeleteAppCategoryResponse], error) {
	return c.deleteAppCategory.CallUnary(ctx, req)
}

// CreateNotifyTarget calls librarian.sephirah.v1.LibrarianSephirahService.CreateNotifyTarget.
func (c *librarianSephirahServiceClient) CreateNotifyTarget(ctx context.Context, req *connect.Request[v1.CreateNotifyTargetRequest]) (*connect.Response[v1.CreateNotifyTargetResponse], error) {
	return c.createNotifyTarget.CallUnary(ctx, req)
}

// UpdateNotifyTarget calls librarian.sephirah.v1.LibrarianSephirahService.UpdateNotifyTarget.
func (c *librarianSephirahServiceClient) UpdateNotifyTarget(ctx context.Context, req *connect.Request[v1.UpdateNotifyTargetRequest]) (*connect.Response[v1.UpdateNotifyTargetResponse], error) {
	return c.updateNotifyTarget.CallUnary(ctx, req)
}

// ListNotifyTargets calls librarian.sephirah.v1.LibrarianSephirahService.ListNotifyTargets.
func (c *librarianSephirahServiceClient) ListNotifyTargets(ctx context.Context, req *connect.Request[v1.ListNotifyTargetsRequest]) (*connect.Response[v1.ListNotifyTargetsResponse], error) {
	return c.listNotifyTargets.CallUnary(ctx, req)
}

// CreateNotifyFlow calls librarian.sephirah.v1.LibrarianSephirahService.CreateNotifyFlow.
func (c *librarianSephirahServiceClient) CreateNotifyFlow(ctx context.Context, req *connect.Request[v1.CreateNotifyFlowRequest]) (*connect.Response[v1.CreateNotifyFlowResponse], error) {
	return c.createNotifyFlow.CallUnary(ctx, req)
}

// UpdateNotifyFlow calls librarian.sephirah.v1.LibrarianSephirahService.UpdateNotifyFlow.
func (c *librarianSephirahServiceClient) UpdateNotifyFlow(ctx context.Context, req *connect.Request[v1.UpdateNotifyFlowRequest]) (*connect.Response[v1.UpdateNotifyFlowResponse], error) {
	return c.updateNotifyFlow.CallUnary(ctx, req)
}

// ListNotifyFlows calls librarian.sephirah.v1.LibrarianSephirahService.ListNotifyFlows.
func (c *librarianSephirahServiceClient) ListNotifyFlows(ctx context.Context, req *connect.Request[v1.ListNotifyFlowsRequest]) (*connect.Response[v1.ListNotifyFlowsResponse], error) {
	return c.listNotifyFlows.CallUnary(ctx, req)
}

// ListSystemNotifications calls
// librarian.sephirah.v1.LibrarianSephirahService.ListSystemNotifications.
func (c *librarianSephirahServiceClient) ListSystemNotifications(ctx context.Context, req *connect.Request[v1.ListSystemNotificationsRequest]) (*connect.Response[v1.ListSystemNotificationsResponse], error) {
	return c.listSystemNotifications.CallUnary(ctx, req)
}

// UpdateSystemNotification calls
// librarian.sephirah.v1.LibrarianSephirahService.UpdateSystemNotification.
func (c *librarianSephirahServiceClient) UpdateSystemNotification(ctx context.Context, req *connect.Request[v1.UpdateSystemNotificationRequest]) (*connect.Response[v1.UpdateSystemNotificationResponse], error) {
	return c.updateSystemNotification.CallUnary(ctx, req)
}

// CreateFeedConfig calls librarian.sephirah.v1.LibrarianSephirahService.CreateFeedConfig.
func (c *librarianSephirahServiceClient) CreateFeedConfig(ctx context.Context, req *connect.Request[v1.CreateFeedConfigRequest]) (*connect.Response[v1.CreateFeedConfigResponse], error) {
	return c.createFeedConfig.CallUnary(ctx, req)
}

// UpdateFeedConfig calls librarian.sephirah.v1.LibrarianSephirahService.UpdateFeedConfig.
func (c *librarianSephirahServiceClient) UpdateFeedConfig(ctx context.Context, req *connect.Request[v1.UpdateFeedConfigRequest]) (*connect.Response[v1.UpdateFeedConfigResponse], error) {
	return c.updateFeedConfig.CallUnary(ctx, req)
}

// ListFeedConfigs calls librarian.sephirah.v1.LibrarianSephirahService.ListFeedConfigs.
func (c *librarianSephirahServiceClient) ListFeedConfigs(ctx context.Context, req *connect.Request[v1.ListFeedConfigsRequest]) (*connect.Response[v1.ListFeedConfigsResponse], error) {
	return c.listFeedConfigs.CallUnary(ctx, req)
}

// CreateFeedActionSet calls librarian.sephirah.v1.LibrarianSephirahService.CreateFeedActionSet.
func (c *librarianSephirahServiceClient) CreateFeedActionSet(ctx context.Context, req *connect.Request[v1.CreateFeedActionSetRequest]) (*connect.Response[v1.CreateFeedActionSetResponse], error) {
	return c.createFeedActionSet.CallUnary(ctx, req)
}

// UpdateFeedActionSet calls librarian.sephirah.v1.LibrarianSephirahService.UpdateFeedActionSet.
func (c *librarianSephirahServiceClient) UpdateFeedActionSet(ctx context.Context, req *connect.Request[v1.UpdateFeedActionSetRequest]) (*connect.Response[v1.UpdateFeedActionSetResponse], error) {
	return c.updateFeedActionSet.CallUnary(ctx, req)
}

// ListFeedActionSets calls librarian.sephirah.v1.LibrarianSephirahService.ListFeedActionSets.
func (c *librarianSephirahServiceClient) ListFeedActionSets(ctx context.Context, req *connect.Request[v1.ListFeedActionSetsRequest]) (*connect.Response[v1.ListFeedActionSetsResponse], error) {
	return c.listFeedActionSets.CallUnary(ctx, req)
}

// ListFeedCategories calls librarian.sephirah.v1.LibrarianSephirahService.ListFeedCategories.
func (c *librarianSephirahServiceClient) ListFeedCategories(ctx context.Context, req *connect.Request[v1.ListFeedCategoriesRequest]) (*connect.Response[v1.ListFeedCategoriesResponse], error) {
	return c.listFeedCategories.CallUnary(ctx, req)
}

// ListFeedPlatforms calls librarian.sephirah.v1.LibrarianSephirahService.ListFeedPlatforms.
func (c *librarianSephirahServiceClient) ListFeedPlatforms(ctx context.Context, req *connect.Request[v1.ListFeedPlatformsRequest]) (*connect.Response[v1.ListFeedPlatformsResponse], error) {
	return c.listFeedPlatforms.CallUnary(ctx, req)
}

// ListFeedItems calls librarian.sephirah.v1.LibrarianSephirahService.ListFeedItems.
func (c *librarianSephirahServiceClient) ListFeedItems(ctx context.Context, req *connect.Request[v1.ListFeedItemsRequest]) (*connect.Response[v1.ListFeedItemsResponse], error) {
	return c.listFeedItems.CallUnary(ctx, req)
}

// GetFeedItem calls librarian.sephirah.v1.LibrarianSephirahService.GetFeedItem.
func (c *librarianSephirahServiceClient) GetFeedItem(ctx context.Context, req *connect.Request[v1.GetFeedItemRequest]) (*connect.Response[v1.GetFeedItemResponse], error) {
	return c.getFeedItem.CallUnary(ctx, req)
}

// GetBatchFeedItems calls librarian.sephirah.v1.LibrarianSephirahService.GetBatchFeedItems.
func (c *librarianSephirahServiceClient) GetBatchFeedItems(ctx context.Context, req *connect.Request[v1.GetBatchFeedItemsRequest]) (*connect.Response[v1.GetBatchFeedItemsResponse], error) {
	return c.getBatchFeedItems.CallUnary(ctx, req)
}

// ReadFeedItem calls librarian.sephirah.v1.LibrarianSephirahService.ReadFeedItem.
func (c *librarianSephirahServiceClient) ReadFeedItem(ctx context.Context, req *connect.Request[v1.ReadFeedItemRequest]) (*connect.Response[v1.ReadFeedItemResponse], error) {
	return c.readFeedItem.CallUnary(ctx, req)
}

// CreateFeedItemCollection calls
// librarian.sephirah.v1.LibrarianSephirahService.CreateFeedItemCollection.
func (c *librarianSephirahServiceClient) CreateFeedItemCollection(ctx context.Context, req *connect.Request[v1.CreateFeedItemCollectionRequest]) (*connect.Response[v1.CreateFeedItemCollectionResponse], error) {
	return c.createFeedItemCollection.CallUnary(ctx, req)
}

// UpdateFeedItemCollection calls
// librarian.sephirah.v1.LibrarianSephirahService.UpdateFeedItemCollection.
func (c *librarianSephirahServiceClient) UpdateFeedItemCollection(ctx context.Context, req *connect.Request[v1.UpdateFeedItemCollectionRequest]) (*connect.Response[v1.UpdateFeedItemCollectionResponse], error) {
	return c.updateFeedItemCollection.CallUnary(ctx, req)
}

// ListFeedItemCollections calls
// librarian.sephirah.v1.LibrarianSephirahService.ListFeedItemCollections.
func (c *librarianSephirahServiceClient) ListFeedItemCollections(ctx context.Context, req *connect.Request[v1.ListFeedItemCollectionsRequest]) (*connect.Response[v1.ListFeedItemCollectionsResponse], error) {
	return c.listFeedItemCollections.CallUnary(ctx, req)
}

// AddFeedItemToCollection calls
// librarian.sephirah.v1.LibrarianSephirahService.AddFeedItemToCollection.
func (c *librarianSephirahServiceClient) AddFeedItemToCollection(ctx context.Context, req *connect.Request[v1.AddFeedItemToCollectionRequest]) (*connect.Response[v1.AddFeedItemToCollectionResponse], error) {
	return c.addFeedItemToCollection.CallUnary(ctx, req)
}

// RemoveFeedItemFromCollection calls
// librarian.sephirah.v1.LibrarianSephirahService.RemoveFeedItemFromCollection.
func (c *librarianSephirahServiceClient) RemoveFeedItemFromCollection(ctx context.Context, req *connect.Request[v1.RemoveFeedItemFromCollectionRequest]) (*connect.Response[v1.RemoveFeedItemFromCollectionResponse], error) {
	return c.removeFeedItemFromCollection.CallUnary(ctx, req)
}

// ListFeedItemsInCollection calls
// librarian.sephirah.v1.LibrarianSephirahService.ListFeedItemsInCollection.
func (c *librarianSephirahServiceClient) ListFeedItemsInCollection(ctx context.Context, req *connect.Request[v1.ListFeedItemsInCollectionRequest]) (*connect.Response[v1.ListFeedItemsInCollectionResponse], error) {
	return c.listFeedItemsInCollection.CallUnary(ctx, req)
}

// LibrarianSephirahServiceHandler is an implementation of the
// librarian.sephirah.v1.LibrarianSephirahService service.
type LibrarianSephirahServiceHandler interface {
	// Allow anonymous call, use accessToken to get complete information
	GetServerInformation(context.Context, *connect.Request[v1.GetServerInformationRequest]) (*connect.Response[v1.GetServerInformationResponse], error)
	// `Normal` Client can use this to subscribe to server events.
	//
	// Server should send `SERVER_EVENT_LISTENER_CONNECTED` event immediately if the connection is valid.
	// Otherwise, client should treat the connection as failed.
	//
	// Server can close the stream at any time, client should reconnect if needed **with backoff**.
	// Only used to improve real-time experience, no guarantee of delivery.
	ListenServerEvent(context.Context, *connect.Request[v1.ListenServerEventRequest], *connect.ServerStream[v1.ListenServerEventResponse]) error
	// `Tiphereth` `Normal` Login via password and get two token
	GetToken(context.Context, *connect.Request[v1.GetTokenRequest]) (*connect.Response[v1.GetTokenResponse], error)
	// `Tiphereth` `Normal` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	// `Tiphereth`
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	// `Tiphereth` Self register as a new normal user
	RegisterUser(context.Context, *connect.Request[v1.RegisterUserRequest]) (*connect.Response[v1.RegisterUserResponse], error)
	// `Tiphereth` `Normal` Update self user info
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// `Tiphereth` `Normal` Client should register device after the first login
	// and store the device_id locally.
	// The server could add extra limits to non-registered device
	RegisterDevice(context.Context, *connect.Request[v1.RegisterDeviceRequest]) (*connect.Response[v1.RegisterDeviceResponse], error)
	// `Tiphereth` `Normal`
	ListUserSessions(context.Context, *connect.Request[v1.ListUserSessionsRequest]) (*connect.Response[v1.ListUserSessionsResponse], error)
	// `Tiphereth` `Normal` delete session will revoke refresh_token immediately.
	// NOTE: This can also be used to log out at server side.
	// NOTE2: Delete session will not affect device registration.
	DeleteUserSession(context.Context, *connect.Request[v1.DeleteUserSessionRequest]) (*connect.Response[v1.DeleteUserSessionResponse], error)
	// `Tiphereth` `Normal` Bind third-party account to current user.
	LinkAccount(context.Context, *connect.Request[v1.LinkAccountRequest]) (*connect.Response[v1.LinkAccountResponse], error)
	// `Tiphereth` `Normal` Unbind third-party account from current user.
	UnLinkAccount(context.Context, *connect.Request[v1.UnLinkAccountRequest]) (*connect.Response[v1.UnLinkAccountResponse], error)
	// `Tiphereth` `Normal` List third-party account binded to current user.
	ListLinkAccounts(context.Context, *connect.Request[v1.ListLinkAccountsRequest]) (*connect.Response[v1.ListLinkAccountsResponse], error)
	// `Tiphereth` `Normal`
	ListPorterDigests(context.Context, *connect.Request[v1.ListPorterDigestsRequest]) (*connect.Response[v1.ListPorterDigestsResponse], error)
	// `Tiphereth` `Normal`
	CreatePorterContext(context.Context, *connect.Request[v1.CreatePorterContextRequest]) (*connect.Response[v1.CreatePorterContextResponse], error)
	// `Tiphereth` `Normal`
	ListPorterContexts(context.Context, *connect.Request[v1.ListPorterContextsRequest]) (*connect.Response[v1.ListPorterContextsResponse], error)
	// `Tiphereth` `Normal` Set porter context.
	UpdatePorterContext(context.Context, *connect.Request[v1.UpdatePorterContextRequest]) (*connect.Response[v1.UpdatePorterContextResponse], error)
	// `Binah` `Normal`
	GetStorageCapacityUsage(context.Context, *connect.Request[v1.GetStorageCapacityUsageRequest]) (*connect.Response[v1.GetStorageCapacityUsageResponse], error)
	// `Binah` `upload_token`
	UploadFile(context.Context, *connect.BidiStream[v1.UploadFileRequest, v1.UploadFileResponse]) error
	// `Binah` `download_token`
	DownloadFile(context.Context, *connect.BidiStream[v1.DownloadFileRequest, v1.DownloadFileResponse]) error
	// `Binah` `upload_token`
	// Maximum 256M
	// Server must send response at least once a minute to keepalive.
	// Client should ignore in_process response and wait for success or error response.
	SimpleUploadFile(context.Context, *connect.BidiStream[v1.SimpleUploadFileRequest, v1.SimpleUploadFileResponse]) error
	// `Binah` `download_token`
	// Server will not check the receiving state
	SimpleDownloadFile(context.Context, *connect.Request[v1.SimpleDownloadFileRequest], *connect.ServerStream[v1.SimpleDownloadFileResponse]) error
	// `Binah` `upload_token`
	// Upload file through http url
	PresignedUploadFile(context.Context, *connect.Request[v1.PresignedUploadFileRequest]) (*connect.Response[v1.PresignedUploadFileResponse], error)
	// `Binah` `upload_token`
	// Report file transfer status. Mainly used to trigger server post-process immediately
	PresignedUploadFileStatus(context.Context, *connect.Request[v1.PresignedUploadFileStatusRequest]) (*connect.Response[v1.PresignedUploadFileStatusResponse], error)
	// `Binah` `download_token`
	// Download file through http url
	PresignedDownloadFile(context.Context, *connect.Request[v1.PresignedDownloadFileRequest]) (*connect.Response[v1.PresignedDownloadFileResponse], error)
	// `Chesed` `Normal`
	UploadImage(context.Context, *connect.Request[v1.UploadImageRequest]) (*connect.Response[v1.UploadImageResponse], error)
	// `Chesed` `Normal`
	UpdateImage(context.Context, *connect.Request[v1.UpdateImageRequest]) (*connect.Response[v1.UpdateImageResponse], error)
	// `Chesed` `Normal`
	ListImages(context.Context, *connect.Request[v1.ListImagesRequest]) (*connect.Response[v1.ListImagesResponse], error)
	// `Chesed` `Normal`
	SearchImages(context.Context, *connect.Request[v1.SearchImagesRequest]) (*connect.Response[v1.SearchImagesResponse], error)
	// `Chesed` `Normal`
	GetImage(context.Context, *connect.Request[v1.GetImageRequest]) (*connect.Response[v1.GetImageResponse], error)
	// `Chesed` `Normal`
	DownloadImage(context.Context, *connect.Request[v1.DownloadImageRequest]) (*connect.Response[v1.DownloadImageResponse], error)
	// `Gebura` `Normal`
	SearchStoreApps(context.Context, *connect.Request[v1.SearchStoreAppsRequest]) (*connect.Response[v1.SearchStoreAppsResponse], error)
	// `Gebura` `Normal`
	GetStoreAppSummary(context.Context, *connect.Request[v1.GetStoreAppSummaryRequest]) (*connect.Response[v1.GetStoreAppSummaryResponse], error)
	// `Gebura` `Normal`
	AcquireStoreApp(context.Context, *connect.Request[v1.AcquireStoreAppRequest]) (*connect.Response[v1.AcquireStoreAppResponse], error)
	// `Gebura` `Normal`
	ListStoreAppBinaries(context.Context, *connect.Request[v1.ListStoreAppBinariesRequest]) (*connect.Response[v1.ListStoreAppBinariesResponse], error)
	// `Gebura` `Normal`
	ListStoreAppBinaryFiles(context.Context, *connect.Request[v1.ListStoreAppBinaryFilesRequest]) (*connect.Response[v1.ListStoreAppBinaryFilesResponse], error)
	// `Gebura` `Normal`
	DownloadStoreAppBinary(context.Context, *connect.Request[v1.DownloadStoreAppBinaryRequest]) (*connect.Response[v1.DownloadStoreAppBinaryResponse], error)
	// `Gebura` `Normal`
	ListStoreAppSaveFiles(context.Context, *connect.Request[v1.ListStoreAppSaveFilesRequest]) (*connect.Response[v1.ListStoreAppSaveFilesResponse], error)
	// `Gebura` `Normal`
	DownloadStoreAppSaveFile(context.Context, *connect.Request[v1.DownloadStoreAppSaveFileRequest]) (*connect.Response[v1.DownloadStoreAppSaveFileResponse], error)
	// `Gebura` `Normal` Search app infos
	SearchAppInfos(context.Context, *connect.Request[v1.SearchAppInfosRequest]) (*connect.Response[v1.SearchAppInfosResponse], error)
	// `Gebura` `Normal`
	CreateApp(context.Context, *connect.Request[v1.CreateAppRequest]) (*connect.Response[v1.CreateAppResponse], error)
	// `Gebura` `Normal`
	UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error)
	// `Gebura` `Normal`
	ListApps(context.Context, *connect.Request[v1.ListAppsRequest]) (*connect.Response[v1.ListAppsResponse], error)
	// `Gebura` `Normal`
	DeleteApp(context.Context, *connect.Request[v1.DeleteAppRequest]) (*connect.Response[v1.DeleteAppResponse], error)
	// `Gebura` `Normal`
	BatchCreateAppRunTime(context.Context, *connect.Request[v1.BatchCreateAppRunTimeRequest]) (*connect.Response[v1.BatchCreateAppRunTimeResponse], error)
	// `Gebura` `Normal`
	SumAppRunTime(context.Context, *connect.Request[v1.SumAppRunTimeRequest]) (*connect.Response[v1.SumAppRunTimeResponse], error)
	// `Gebura` `Normal`
	ListAppRunTimes(context.Context, *connect.Request[v1.ListAppRunTimesRequest]) (*connect.Response[v1.ListAppRunTimesResponse], error)
	// `Gebura` `Normal`
	DeleteAppRunTime(context.Context, *connect.Request[v1.DeleteAppRunTimeRequest]) (*connect.Response[v1.DeleteAppRunTimeResponse], error)
	// `Gebura` `Normal`
	UploadAppSaveFile(context.Context, *connect.Request[v1.UploadAppSaveFileRequest]) (*connect.Response[v1.UploadAppSaveFileResponse], error)
	// `Gebura` `Normal`
	DownloadAppSaveFile(context.Context, *connect.Request[v1.DownloadAppSaveFileRequest]) (*connect.Response[v1.DownloadAppSaveFileResponse], error)
	// `Gebura` `Normal`
	ListAppSaveFiles(context.Context, *connect.Request[v1.ListAppSaveFilesRequest]) (*connect.Response[v1.ListAppSaveFilesResponse], error)
	// `Gebura` `Normal`
	DeleteAppSaveFile(context.Context, *connect.Request[v1.DeleteAppSaveFileRequest]) (*connect.Response[v1.DeleteAppSaveFileResponse], error)
	// `Gebura` `Normal`
	PinAppSaveFile(context.Context, *connect.Request[v1.PinAppSaveFileRequest]) (*connect.Response[v1.PinAppSaveFileResponse], error)
	// `Gebura` `Normal`
	UnpinAppSaveFile(context.Context, *connect.Request[v1.UnpinAppSaveFileRequest]) (*connect.Response[v1.UnpinAppSaveFileResponse], error)
	// `Gebura` `Normal`
	GetAppSaveFileCapacity(context.Context, *connect.Request[v1.GetAppSaveFileCapacityRequest]) (*connect.Response[v1.GetAppSaveFileCapacityResponse], error)
	// `Gebura` `Normal`
	SetAppSaveFileCapacity(context.Context, *connect.Request[v1.SetAppSaveFileCapacityRequest]) (*connect.Response[v1.SetAppSaveFileCapacityResponse], error)
	// `Gebura` `Normal`
	ListAppCategories(context.Context, *connect.Request[v1.ListAppCategoriesRequest]) (*connect.Response[v1.ListAppCategoriesResponse], error)
	// `Gebura` `Normal`
	CreateAppCategory(context.Context, *connect.Request[v1.CreateAppCategoryRequest]) (*connect.Response[v1.CreateAppCategoryResponse], error)
	// `Gebura` `Normal`
	UpdateAppCategory(context.Context, *connect.Request[v1.UpdateAppCategoryRequest]) (*connect.Response[v1.UpdateAppCategoryResponse], error)
	// `Gebura` `Normal`
	DeleteAppCategory(context.Context, *connect.Request[v1.DeleteAppCategoryRequest]) (*connect.Response[v1.DeleteAppCategoryResponse], error)
	// `Netzach` `Normal`
	CreateNotifyTarget(context.Context, *connect.Request[v1.CreateNotifyTargetRequest]) (*connect.Response[v1.CreateNotifyTargetResponse], error)
	// `Netzach` `Normal`
	UpdateNotifyTarget(context.Context, *connect.Request[v1.UpdateNotifyTargetRequest]) (*connect.Response[v1.UpdateNotifyTargetResponse], error)
	// `Netzach` `Normal`
	ListNotifyTargets(context.Context, *connect.Request[v1.ListNotifyTargetsRequest]) (*connect.Response[v1.ListNotifyTargetsResponse], error)
	// `Netzach` `Normal`
	CreateNotifyFlow(context.Context, *connect.Request[v1.CreateNotifyFlowRequest]) (*connect.Response[v1.CreateNotifyFlowResponse], error)
	// `Netzach` `Normal`
	UpdateNotifyFlow(context.Context, *connect.Request[v1.UpdateNotifyFlowRequest]) (*connect.Response[v1.UpdateNotifyFlowResponse], error)
	// `Netzach` `Normal`
	ListNotifyFlows(context.Context, *connect.Request[v1.ListNotifyFlowsRequest]) (*connect.Response[v1.ListNotifyFlowsResponse], error)
	// `Netzach` `Normal`
	ListSystemNotifications(context.Context, *connect.Request[v1.ListSystemNotificationsRequest]) (*connect.Response[v1.ListSystemNotificationsResponse], error)
	// `Netzach` `Normal`
	UpdateSystemNotification(context.Context, *connect.Request[v1.UpdateSystemNotificationRequest]) (*connect.Response[v1.UpdateSystemNotificationResponse], error)
	// `Yesod` `Normal`
	CreateFeedConfig(context.Context, *connect.Request[v1.CreateFeedConfigRequest]) (*connect.Response[v1.CreateFeedConfigResponse], error)
	// `Yesod` `Normal`
	UpdateFeedConfig(context.Context, *connect.Request[v1.UpdateFeedConfigRequest]) (*connect.Response[v1.UpdateFeedConfigResponse], error)
	// `Yesod` `Normal`
	ListFeedConfigs(context.Context, *connect.Request[v1.ListFeedConfigsRequest]) (*connect.Response[v1.ListFeedConfigsResponse], error)
	// `Yesod` `Normal`
	CreateFeedActionSet(context.Context, *connect.Request[v1.CreateFeedActionSetRequest]) (*connect.Response[v1.CreateFeedActionSetResponse], error)
	// `Yesod` `Normal`
	UpdateFeedActionSet(context.Context, *connect.Request[v1.UpdateFeedActionSetRequest]) (*connect.Response[v1.UpdateFeedActionSetResponse], error)
	// `Yesod` `Normal`
	ListFeedActionSets(context.Context, *connect.Request[v1.ListFeedActionSetsRequest]) (*connect.Response[v1.ListFeedActionSetsResponse], error)
	// `Yesod` `Normal`
	ListFeedCategories(context.Context, *connect.Request[v1.ListFeedCategoriesRequest]) (*connect.Response[v1.ListFeedCategoriesResponse], error)
	// `Yesod` `Normal`
	ListFeedPlatforms(context.Context, *connect.Request[v1.ListFeedPlatformsRequest]) (*connect.Response[v1.ListFeedPlatformsResponse], error)
	// `Yesod` `Normal`
	ListFeedItems(context.Context, *connect.Request[v1.ListFeedItemsRequest]) (*connect.Response[v1.ListFeedItemsResponse], error)
	// `Yesod` `Normal`
	GetFeedItem(context.Context, *connect.Request[v1.GetFeedItemRequest]) (*connect.Response[v1.GetFeedItemResponse], error)
	// `Yesod` `Normal`
	GetBatchFeedItems(context.Context, *connect.Request[v1.GetBatchFeedItemsRequest]) (*connect.Response[v1.GetBatchFeedItemsResponse], error)
	// `Yesod` `Normal`
	ReadFeedItem(context.Context, *connect.Request[v1.ReadFeedItemRequest]) (*connect.Response[v1.ReadFeedItemResponse], error)
	// `Yesod` `Normal`
	CreateFeedItemCollection(context.Context, *connect.Request[v1.CreateFeedItemCollectionRequest]) (*connect.Response[v1.CreateFeedItemCollectionResponse], error)
	// `Yesod` `Normal`
	UpdateFeedItemCollection(context.Context, *connect.Request[v1.UpdateFeedItemCollectionRequest]) (*connect.Response[v1.UpdateFeedItemCollectionResponse], error)
	// `Yesod` `Normal`
	ListFeedItemCollections(context.Context, *connect.Request[v1.ListFeedItemCollectionsRequest]) (*connect.Response[v1.ListFeedItemCollectionsResponse], error)
	// `Yesod` `Normal`
	AddFeedItemToCollection(context.Context, *connect.Request[v1.AddFeedItemToCollectionRequest]) (*connect.Response[v1.AddFeedItemToCollectionResponse], error)
	// `Yesod` `Normal`
	RemoveFeedItemFromCollection(context.Context, *connect.Request[v1.RemoveFeedItemFromCollectionRequest]) (*connect.Response[v1.RemoveFeedItemFromCollectionResponse], error)
	// `Yesod` `Normal`
	ListFeedItemsInCollection(context.Context, *connect.Request[v1.ListFeedItemsInCollectionRequest]) (*connect.Response[v1.ListFeedItemsInCollectionResponse], error)
}

// NewLibrarianSephirahServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLibrarianSephirahServiceHandler(svc LibrarianSephirahServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	librarianSephirahServiceMethods := v1.File_librarian_sephirah_v1_sephirah_service_proto.Services().ByName("LibrarianSephirahService").Methods()
	librarianSephirahServiceGetServerInformationHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceGetServerInformationProcedure,
		svc.GetServerInformation,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("GetServerInformation")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListenServerEventHandler := connect.NewServerStreamHandler(
		LibrarianSephirahServiceListenServerEventProcedure,
		svc.ListenServerEvent,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListenServerEvent")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceGetTokenHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceGetTokenProcedure,
		svc.GetToken,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("GetToken")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceRefreshTokenHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceGetUserHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceRegisterUserHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceRegisterUserProcedure,
		svc.RegisterUser,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("RegisterUser")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceUpdateUserHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceRegisterDeviceHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceRegisterDeviceProcedure,
		svc.RegisterDevice,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("RegisterDevice")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListUserSessionsHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListUserSessionsProcedure,
		svc.ListUserSessions,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListUserSessions")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceDeleteUserSessionHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceDeleteUserSessionProcedure,
		svc.DeleteUserSession,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("DeleteUserSession")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceLinkAccountHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceLinkAccountProcedure,
		svc.LinkAccount,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("LinkAccount")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceUnLinkAccountHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceUnLinkAccountProcedure,
		svc.UnLinkAccount,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("UnLinkAccount")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListLinkAccountsHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListLinkAccountsProcedure,
		svc.ListLinkAccounts,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListLinkAccounts")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListPorterDigestsHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListPorterDigestsProcedure,
		svc.ListPorterDigests,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListPorterDigests")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceCreatePorterContextHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceCreatePorterContextProcedure,
		svc.CreatePorterContext,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("CreatePorterContext")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListPorterContextsHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListPorterContextsProcedure,
		svc.ListPorterContexts,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListPorterContexts")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceUpdatePorterContextHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceUpdatePorterContextProcedure,
		svc.UpdatePorterContext,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdatePorterContext")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceGetStorageCapacityUsageHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceGetStorageCapacityUsageProcedure,
		svc.GetStorageCapacityUsage,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("GetStorageCapacityUsage")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceUploadFileHandler := connect.NewBidiStreamHandler(
		LibrarianSephirahServiceUploadFileProcedure,
		svc.UploadFile,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("UploadFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceDownloadFileHandler := connect.NewBidiStreamHandler(
		LibrarianSephirahServiceDownloadFileProcedure,
		svc.DownloadFile,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("DownloadFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceSimpleUploadFileHandler := connect.NewBidiStreamHandler(
		LibrarianSephirahServiceSimpleUploadFileProcedure,
		svc.SimpleUploadFile,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("SimpleUploadFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceSimpleDownloadFileHandler := connect.NewServerStreamHandler(
		LibrarianSephirahServiceSimpleDownloadFileProcedure,
		svc.SimpleDownloadFile,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("SimpleDownloadFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServicePresignedUploadFileHandler := connect.NewUnaryHandler(
		LibrarianSephirahServicePresignedUploadFileProcedure,
		svc.PresignedUploadFile,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("PresignedUploadFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServicePresignedUploadFileStatusHandler := connect.NewUnaryHandler(
		LibrarianSephirahServicePresignedUploadFileStatusProcedure,
		svc.PresignedUploadFileStatus,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("PresignedUploadFileStatus")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServicePresignedDownloadFileHandler := connect.NewUnaryHandler(
		LibrarianSephirahServicePresignedDownloadFileProcedure,
		svc.PresignedDownloadFile,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("PresignedDownloadFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceUploadImageHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceUploadImageProcedure,
		svc.UploadImage,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("UploadImage")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceUpdateImageHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceUpdateImageProcedure,
		svc.UpdateImage,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateImage")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListImagesHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListImagesProcedure,
		svc.ListImages,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListImages")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceSearchImagesHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceSearchImagesProcedure,
		svc.SearchImages,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("SearchImages")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceGetImageHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceGetImageProcedure,
		svc.GetImage,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("GetImage")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceDownloadImageHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceDownloadImageProcedure,
		svc.DownloadImage,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("DownloadImage")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceSearchStoreAppsHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceSearchStoreAppsProcedure,
		svc.SearchStoreApps,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("SearchStoreApps")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceGetStoreAppSummaryHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceGetStoreAppSummaryProcedure,
		svc.GetStoreAppSummary,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("GetStoreAppSummary")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceAcquireStoreAppHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceAcquireStoreAppProcedure,
		svc.AcquireStoreApp,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("AcquireStoreApp")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListStoreAppBinariesHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListStoreAppBinariesProcedure,
		svc.ListStoreAppBinaries,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListStoreAppBinaries")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListStoreAppBinaryFilesHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListStoreAppBinaryFilesProcedure,
		svc.ListStoreAppBinaryFiles,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListStoreAppBinaryFiles")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceDownloadStoreAppBinaryHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceDownloadStoreAppBinaryProcedure,
		svc.DownloadStoreAppBinary,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("DownloadStoreAppBinary")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListStoreAppSaveFilesHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListStoreAppSaveFilesProcedure,
		svc.ListStoreAppSaveFiles,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListStoreAppSaveFiles")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceDownloadStoreAppSaveFileHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceDownloadStoreAppSaveFileProcedure,
		svc.DownloadStoreAppSaveFile,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("DownloadStoreAppSaveFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceSearchAppInfosHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceSearchAppInfosProcedure,
		svc.SearchAppInfos,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("SearchAppInfos")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceCreateAppHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceCreateAppProcedure,
		svc.CreateApp,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("CreateApp")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceUpdateAppHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceUpdateAppProcedure,
		svc.UpdateApp,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateApp")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListAppsHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListAppsProcedure,
		svc.ListApps,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListApps")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceDeleteAppHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceDeleteAppProcedure,
		svc.DeleteApp,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("DeleteApp")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceBatchCreateAppRunTimeHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceBatchCreateAppRunTimeProcedure,
		svc.BatchCreateAppRunTime,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("BatchCreateAppRunTime")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceSumAppRunTimeHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceSumAppRunTimeProcedure,
		svc.SumAppRunTime,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("SumAppRunTime")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListAppRunTimesHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListAppRunTimesProcedure,
		svc.ListAppRunTimes,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListAppRunTimes")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceDeleteAppRunTimeHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceDeleteAppRunTimeProcedure,
		svc.DeleteAppRunTime,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("DeleteAppRunTime")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceUploadAppSaveFileHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceUploadAppSaveFileProcedure,
		svc.UploadAppSaveFile,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("UploadAppSaveFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceDownloadAppSaveFileHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceDownloadAppSaveFileProcedure,
		svc.DownloadAppSaveFile,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("DownloadAppSaveFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListAppSaveFilesHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListAppSaveFilesProcedure,
		svc.ListAppSaveFiles,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListAppSaveFiles")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceDeleteAppSaveFileHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceDeleteAppSaveFileProcedure,
		svc.DeleteAppSaveFile,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("DeleteAppSaveFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServicePinAppSaveFileHandler := connect.NewUnaryHandler(
		LibrarianSephirahServicePinAppSaveFileProcedure,
		svc.PinAppSaveFile,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("PinAppSaveFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceUnpinAppSaveFileHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceUnpinAppSaveFileProcedure,
		svc.UnpinAppSaveFile,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("UnpinAppSaveFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceGetAppSaveFileCapacityHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceGetAppSaveFileCapacityProcedure,
		svc.GetAppSaveFileCapacity,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("GetAppSaveFileCapacity")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceSetAppSaveFileCapacityHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceSetAppSaveFileCapacityProcedure,
		svc.SetAppSaveFileCapacity,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("SetAppSaveFileCapacity")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListAppCategoriesHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListAppCategoriesProcedure,
		svc.ListAppCategories,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListAppCategories")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceCreateAppCategoryHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceCreateAppCategoryProcedure,
		svc.CreateAppCategory,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("CreateAppCategory")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceUpdateAppCategoryHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceUpdateAppCategoryProcedure,
		svc.UpdateAppCategory,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateAppCategory")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceDeleteAppCategoryHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceDeleteAppCategoryProcedure,
		svc.DeleteAppCategory,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("DeleteAppCategory")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceCreateNotifyTargetHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceCreateNotifyTargetProcedure,
		svc.CreateNotifyTarget,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("CreateNotifyTarget")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceUpdateNotifyTargetHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceUpdateNotifyTargetProcedure,
		svc.UpdateNotifyTarget,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateNotifyTarget")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListNotifyTargetsHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListNotifyTargetsProcedure,
		svc.ListNotifyTargets,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListNotifyTargets")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceCreateNotifyFlowHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceCreateNotifyFlowProcedure,
		svc.CreateNotifyFlow,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("CreateNotifyFlow")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceUpdateNotifyFlowHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceUpdateNotifyFlowProcedure,
		svc.UpdateNotifyFlow,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateNotifyFlow")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListNotifyFlowsHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListNotifyFlowsProcedure,
		svc.ListNotifyFlows,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListNotifyFlows")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListSystemNotificationsHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListSystemNotificationsProcedure,
		svc.ListSystemNotifications,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListSystemNotifications")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceUpdateSystemNotificationHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceUpdateSystemNotificationProcedure,
		svc.UpdateSystemNotification,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateSystemNotification")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceCreateFeedConfigHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceCreateFeedConfigProcedure,
		svc.CreateFeedConfig,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("CreateFeedConfig")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceUpdateFeedConfigHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceUpdateFeedConfigProcedure,
		svc.UpdateFeedConfig,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateFeedConfig")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListFeedConfigsHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListFeedConfigsProcedure,
		svc.ListFeedConfigs,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListFeedConfigs")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceCreateFeedActionSetHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceCreateFeedActionSetProcedure,
		svc.CreateFeedActionSet,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("CreateFeedActionSet")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceUpdateFeedActionSetHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceUpdateFeedActionSetProcedure,
		svc.UpdateFeedActionSet,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateFeedActionSet")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListFeedActionSetsHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListFeedActionSetsProcedure,
		svc.ListFeedActionSets,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListFeedActionSets")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListFeedCategoriesHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListFeedCategoriesProcedure,
		svc.ListFeedCategories,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListFeedCategories")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListFeedPlatformsHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListFeedPlatformsProcedure,
		svc.ListFeedPlatforms,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListFeedPlatforms")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListFeedItemsHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListFeedItemsProcedure,
		svc.ListFeedItems,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListFeedItems")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceGetFeedItemHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceGetFeedItemProcedure,
		svc.GetFeedItem,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("GetFeedItem")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceGetBatchFeedItemsHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceGetBatchFeedItemsProcedure,
		svc.GetBatchFeedItems,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("GetBatchFeedItems")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceReadFeedItemHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceReadFeedItemProcedure,
		svc.ReadFeedItem,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ReadFeedItem")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceCreateFeedItemCollectionHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceCreateFeedItemCollectionProcedure,
		svc.CreateFeedItemCollection,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("CreateFeedItemCollection")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceUpdateFeedItemCollectionHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceUpdateFeedItemCollectionProcedure,
		svc.UpdateFeedItemCollection,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("UpdateFeedItemCollection")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListFeedItemCollectionsHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListFeedItemCollectionsProcedure,
		svc.ListFeedItemCollections,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListFeedItemCollections")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceAddFeedItemToCollectionHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceAddFeedItemToCollectionProcedure,
		svc.AddFeedItemToCollection,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("AddFeedItemToCollection")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceRemoveFeedItemFromCollectionHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceRemoveFeedItemFromCollectionProcedure,
		svc.RemoveFeedItemFromCollection,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("RemoveFeedItemFromCollection")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahServiceListFeedItemsInCollectionHandler := connect.NewUnaryHandler(
		LibrarianSephirahServiceListFeedItemsInCollectionProcedure,
		svc.ListFeedItemsInCollection,
		connect.WithSchema(librarianSephirahServiceMethods.ByName("ListFeedItemsInCollection")),
		connect.WithHandlerOptions(opts...),
	)
	return "/librarian.sephirah.v1.LibrarianSephirahService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LibrarianSephirahServiceGetServerInformationProcedure:
			librarianSephirahServiceGetServerInformationHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListenServerEventProcedure:
			librarianSephirahServiceListenServerEventHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceGetTokenProcedure:
			librarianSephirahServiceGetTokenHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceRefreshTokenProcedure:
			librarianSephirahServiceRefreshTokenHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceGetUserProcedure:
			librarianSephirahServiceGetUserHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceRegisterUserProcedure:
			librarianSephirahServiceRegisterUserHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceUpdateUserProcedure:
			librarianSephirahServiceUpdateUserHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceRegisterDeviceProcedure:
			librarianSephirahServiceRegisterDeviceHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListUserSessionsProcedure:
			librarianSephirahServiceListUserSessionsHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceDeleteUserSessionProcedure:
			librarianSephirahServiceDeleteUserSessionHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceLinkAccountProcedure:
			librarianSephirahServiceLinkAccountHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceUnLinkAccountProcedure:
			librarianSephirahServiceUnLinkAccountHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListLinkAccountsProcedure:
			librarianSephirahServiceListLinkAccountsHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListPorterDigestsProcedure:
			librarianSephirahServiceListPorterDigestsHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceCreatePorterContextProcedure:
			librarianSephirahServiceCreatePorterContextHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListPorterContextsProcedure:
			librarianSephirahServiceListPorterContextsHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceUpdatePorterContextProcedure:
			librarianSephirahServiceUpdatePorterContextHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceGetStorageCapacityUsageProcedure:
			librarianSephirahServiceGetStorageCapacityUsageHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceUploadFileProcedure:
			librarianSephirahServiceUploadFileHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceDownloadFileProcedure:
			librarianSephirahServiceDownloadFileHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceSimpleUploadFileProcedure:
			librarianSephirahServiceSimpleUploadFileHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceSimpleDownloadFileProcedure:
			librarianSephirahServiceSimpleDownloadFileHandler.ServeHTTP(w, r)
		case LibrarianSephirahServicePresignedUploadFileProcedure:
			librarianSephirahServicePresignedUploadFileHandler.ServeHTTP(w, r)
		case LibrarianSephirahServicePresignedUploadFileStatusProcedure:
			librarianSephirahServicePresignedUploadFileStatusHandler.ServeHTTP(w, r)
		case LibrarianSephirahServicePresignedDownloadFileProcedure:
			librarianSephirahServicePresignedDownloadFileHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceUploadImageProcedure:
			librarianSephirahServiceUploadImageHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceUpdateImageProcedure:
			librarianSephirahServiceUpdateImageHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListImagesProcedure:
			librarianSephirahServiceListImagesHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceSearchImagesProcedure:
			librarianSephirahServiceSearchImagesHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceGetImageProcedure:
			librarianSephirahServiceGetImageHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceDownloadImageProcedure:
			librarianSephirahServiceDownloadImageHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceSearchStoreAppsProcedure:
			librarianSephirahServiceSearchStoreAppsHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceGetStoreAppSummaryProcedure:
			librarianSephirahServiceGetStoreAppSummaryHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceAcquireStoreAppProcedure:
			librarianSephirahServiceAcquireStoreAppHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListStoreAppBinariesProcedure:
			librarianSephirahServiceListStoreAppBinariesHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListStoreAppBinaryFilesProcedure:
			librarianSephirahServiceListStoreAppBinaryFilesHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceDownloadStoreAppBinaryProcedure:
			librarianSephirahServiceDownloadStoreAppBinaryHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListStoreAppSaveFilesProcedure:
			librarianSephirahServiceListStoreAppSaveFilesHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceDownloadStoreAppSaveFileProcedure:
			librarianSephirahServiceDownloadStoreAppSaveFileHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceSearchAppInfosProcedure:
			librarianSephirahServiceSearchAppInfosHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceCreateAppProcedure:
			librarianSephirahServiceCreateAppHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceUpdateAppProcedure:
			librarianSephirahServiceUpdateAppHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListAppsProcedure:
			librarianSephirahServiceListAppsHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceDeleteAppProcedure:
			librarianSephirahServiceDeleteAppHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceBatchCreateAppRunTimeProcedure:
			librarianSephirahServiceBatchCreateAppRunTimeHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceSumAppRunTimeProcedure:
			librarianSephirahServiceSumAppRunTimeHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListAppRunTimesProcedure:
			librarianSephirahServiceListAppRunTimesHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceDeleteAppRunTimeProcedure:
			librarianSephirahServiceDeleteAppRunTimeHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceUploadAppSaveFileProcedure:
			librarianSephirahServiceUploadAppSaveFileHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceDownloadAppSaveFileProcedure:
			librarianSephirahServiceDownloadAppSaveFileHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListAppSaveFilesProcedure:
			librarianSephirahServiceListAppSaveFilesHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceDeleteAppSaveFileProcedure:
			librarianSephirahServiceDeleteAppSaveFileHandler.ServeHTTP(w, r)
		case LibrarianSephirahServicePinAppSaveFileProcedure:
			librarianSephirahServicePinAppSaveFileHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceUnpinAppSaveFileProcedure:
			librarianSephirahServiceUnpinAppSaveFileHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceGetAppSaveFileCapacityProcedure:
			librarianSephirahServiceGetAppSaveFileCapacityHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceSetAppSaveFileCapacityProcedure:
			librarianSephirahServiceSetAppSaveFileCapacityHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListAppCategoriesProcedure:
			librarianSephirahServiceListAppCategoriesHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceCreateAppCategoryProcedure:
			librarianSephirahServiceCreateAppCategoryHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceUpdateAppCategoryProcedure:
			librarianSephirahServiceUpdateAppCategoryHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceDeleteAppCategoryProcedure:
			librarianSephirahServiceDeleteAppCategoryHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceCreateNotifyTargetProcedure:
			librarianSephirahServiceCreateNotifyTargetHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceUpdateNotifyTargetProcedure:
			librarianSephirahServiceUpdateNotifyTargetHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListNotifyTargetsProcedure:
			librarianSephirahServiceListNotifyTargetsHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceCreateNotifyFlowProcedure:
			librarianSephirahServiceCreateNotifyFlowHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceUpdateNotifyFlowProcedure:
			librarianSephirahServiceUpdateNotifyFlowHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListNotifyFlowsProcedure:
			librarianSephirahServiceListNotifyFlowsHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListSystemNotificationsProcedure:
			librarianSephirahServiceListSystemNotificationsHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceUpdateSystemNotificationProcedure:
			librarianSephirahServiceUpdateSystemNotificationHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceCreateFeedConfigProcedure:
			librarianSephirahServiceCreateFeedConfigHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceUpdateFeedConfigProcedure:
			librarianSephirahServiceUpdateFeedConfigHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListFeedConfigsProcedure:
			librarianSephirahServiceListFeedConfigsHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceCreateFeedActionSetProcedure:
			librarianSephirahServiceCreateFeedActionSetHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceUpdateFeedActionSetProcedure:
			librarianSephirahServiceUpdateFeedActionSetHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListFeedActionSetsProcedure:
			librarianSephirahServiceListFeedActionSetsHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListFeedCategoriesProcedure:
			librarianSephirahServiceListFeedCategoriesHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListFeedPlatformsProcedure:
			librarianSephirahServiceListFeedPlatformsHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListFeedItemsProcedure:
			librarianSephirahServiceListFeedItemsHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceGetFeedItemProcedure:
			librarianSephirahServiceGetFeedItemHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceGetBatchFeedItemsProcedure:
			librarianSephirahServiceGetBatchFeedItemsHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceReadFeedItemProcedure:
			librarianSephirahServiceReadFeedItemHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceCreateFeedItemCollectionProcedure:
			librarianSephirahServiceCreateFeedItemCollectionHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceUpdateFeedItemCollectionProcedure:
			librarianSephirahServiceUpdateFeedItemCollectionHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListFeedItemCollectionsProcedure:
			librarianSephirahServiceListFeedItemCollectionsHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceAddFeedItemToCollectionProcedure:
			librarianSephirahServiceAddFeedItemToCollectionHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceRemoveFeedItemFromCollectionProcedure:
			librarianSephirahServiceRemoveFeedItemFromCollectionHandler.ServeHTTP(w, r)
		case LibrarianSephirahServiceListFeedItemsInCollectionProcedure:
			librarianSephirahServiceListFeedItemsInCollectionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLibrarianSephirahServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLibrarianSephirahServiceHandler struct{}

func (UnimplementedLibrarianSephirahServiceHandler) GetServerInformation(context.Context, *connect.Request[v1.GetServerInformationRequest]) (*connect.Response[v1.GetServerInformationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.GetServerInformation is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListenServerEvent(context.Context, *connect.Request[v1.ListenServerEventRequest], *connect.ServerStream[v1.ListenServerEventResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListenServerEvent is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) GetToken(context.Context, *connect.Request[v1.GetTokenRequest]) (*connect.Response[v1.GetTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.GetToken is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.RefreshToken is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.GetUser is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) RegisterUser(context.Context, *connect.Request[v1.RegisterUserRequest]) (*connect.Response[v1.RegisterUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.RegisterUser is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.UpdateUser is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) RegisterDevice(context.Context, *connect.Request[v1.RegisterDeviceRequest]) (*connect.Response[v1.RegisterDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.RegisterDevice is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListUserSessions(context.Context, *connect.Request[v1.ListUserSessionsRequest]) (*connect.Response[v1.ListUserSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListUserSessions is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) DeleteUserSession(context.Context, *connect.Request[v1.DeleteUserSessionRequest]) (*connect.Response[v1.DeleteUserSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.DeleteUserSession is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) LinkAccount(context.Context, *connect.Request[v1.LinkAccountRequest]) (*connect.Response[v1.LinkAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.LinkAccount is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) UnLinkAccount(context.Context, *connect.Request[v1.UnLinkAccountRequest]) (*connect.Response[v1.UnLinkAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.UnLinkAccount is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListLinkAccounts(context.Context, *connect.Request[v1.ListLinkAccountsRequest]) (*connect.Response[v1.ListLinkAccountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListLinkAccounts is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListPorterDigests(context.Context, *connect.Request[v1.ListPorterDigestsRequest]) (*connect.Response[v1.ListPorterDigestsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListPorterDigests is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) CreatePorterContext(context.Context, *connect.Request[v1.CreatePorterContextRequest]) (*connect.Response[v1.CreatePorterContextResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.CreatePorterContext is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListPorterContexts(context.Context, *connect.Request[v1.ListPorterContextsRequest]) (*connect.Response[v1.ListPorterContextsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListPorterContexts is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) UpdatePorterContext(context.Context, *connect.Request[v1.UpdatePorterContextRequest]) (*connect.Response[v1.UpdatePorterContextResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.UpdatePorterContext is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) GetStorageCapacityUsage(context.Context, *connect.Request[v1.GetStorageCapacityUsageRequest]) (*connect.Response[v1.GetStorageCapacityUsageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.GetStorageCapacityUsage is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) UploadFile(context.Context, *connect.BidiStream[v1.UploadFileRequest, v1.UploadFileResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.UploadFile is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) DownloadFile(context.Context, *connect.BidiStream[v1.DownloadFileRequest, v1.DownloadFileResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.DownloadFile is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) SimpleUploadFile(context.Context, *connect.BidiStream[v1.SimpleUploadFileRequest, v1.SimpleUploadFileResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.SimpleUploadFile is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) SimpleDownloadFile(context.Context, *connect.Request[v1.SimpleDownloadFileRequest], *connect.ServerStream[v1.SimpleDownloadFileResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.SimpleDownloadFile is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) PresignedUploadFile(context.Context, *connect.Request[v1.PresignedUploadFileRequest]) (*connect.Response[v1.PresignedUploadFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.PresignedUploadFile is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) PresignedUploadFileStatus(context.Context, *connect.Request[v1.PresignedUploadFileStatusRequest]) (*connect.Response[v1.PresignedUploadFileStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.PresignedUploadFileStatus is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) PresignedDownloadFile(context.Context, *connect.Request[v1.PresignedDownloadFileRequest]) (*connect.Response[v1.PresignedDownloadFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.PresignedDownloadFile is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) UploadImage(context.Context, *connect.Request[v1.UploadImageRequest]) (*connect.Response[v1.UploadImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.UploadImage is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) UpdateImage(context.Context, *connect.Request[v1.UpdateImageRequest]) (*connect.Response[v1.UpdateImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.UpdateImage is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListImages(context.Context, *connect.Request[v1.ListImagesRequest]) (*connect.Response[v1.ListImagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListImages is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) SearchImages(context.Context, *connect.Request[v1.SearchImagesRequest]) (*connect.Response[v1.SearchImagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.SearchImages is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) GetImage(context.Context, *connect.Request[v1.GetImageRequest]) (*connect.Response[v1.GetImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.GetImage is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) DownloadImage(context.Context, *connect.Request[v1.DownloadImageRequest]) (*connect.Response[v1.DownloadImageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.DownloadImage is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) SearchStoreApps(context.Context, *connect.Request[v1.SearchStoreAppsRequest]) (*connect.Response[v1.SearchStoreAppsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.SearchStoreApps is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) GetStoreAppSummary(context.Context, *connect.Request[v1.GetStoreAppSummaryRequest]) (*connect.Response[v1.GetStoreAppSummaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.GetStoreAppSummary is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) AcquireStoreApp(context.Context, *connect.Request[v1.AcquireStoreAppRequest]) (*connect.Response[v1.AcquireStoreAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.AcquireStoreApp is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListStoreAppBinaries(context.Context, *connect.Request[v1.ListStoreAppBinariesRequest]) (*connect.Response[v1.ListStoreAppBinariesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListStoreAppBinaries is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListStoreAppBinaryFiles(context.Context, *connect.Request[v1.ListStoreAppBinaryFilesRequest]) (*connect.Response[v1.ListStoreAppBinaryFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListStoreAppBinaryFiles is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) DownloadStoreAppBinary(context.Context, *connect.Request[v1.DownloadStoreAppBinaryRequest]) (*connect.Response[v1.DownloadStoreAppBinaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.DownloadStoreAppBinary is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListStoreAppSaveFiles(context.Context, *connect.Request[v1.ListStoreAppSaveFilesRequest]) (*connect.Response[v1.ListStoreAppSaveFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListStoreAppSaveFiles is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) DownloadStoreAppSaveFile(context.Context, *connect.Request[v1.DownloadStoreAppSaveFileRequest]) (*connect.Response[v1.DownloadStoreAppSaveFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.DownloadStoreAppSaveFile is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) SearchAppInfos(context.Context, *connect.Request[v1.SearchAppInfosRequest]) (*connect.Response[v1.SearchAppInfosResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.SearchAppInfos is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) CreateApp(context.Context, *connect.Request[v1.CreateAppRequest]) (*connect.Response[v1.CreateAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.CreateApp is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) UpdateApp(context.Context, *connect.Request[v1.UpdateAppRequest]) (*connect.Response[v1.UpdateAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.UpdateApp is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListApps(context.Context, *connect.Request[v1.ListAppsRequest]) (*connect.Response[v1.ListAppsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListApps is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) DeleteApp(context.Context, *connect.Request[v1.DeleteAppRequest]) (*connect.Response[v1.DeleteAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.DeleteApp is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) BatchCreateAppRunTime(context.Context, *connect.Request[v1.BatchCreateAppRunTimeRequest]) (*connect.Response[v1.BatchCreateAppRunTimeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.BatchCreateAppRunTime is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) SumAppRunTime(context.Context, *connect.Request[v1.SumAppRunTimeRequest]) (*connect.Response[v1.SumAppRunTimeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.SumAppRunTime is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListAppRunTimes(context.Context, *connect.Request[v1.ListAppRunTimesRequest]) (*connect.Response[v1.ListAppRunTimesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListAppRunTimes is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) DeleteAppRunTime(context.Context, *connect.Request[v1.DeleteAppRunTimeRequest]) (*connect.Response[v1.DeleteAppRunTimeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.DeleteAppRunTime is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) UploadAppSaveFile(context.Context, *connect.Request[v1.UploadAppSaveFileRequest]) (*connect.Response[v1.UploadAppSaveFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.UploadAppSaveFile is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) DownloadAppSaveFile(context.Context, *connect.Request[v1.DownloadAppSaveFileRequest]) (*connect.Response[v1.DownloadAppSaveFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.DownloadAppSaveFile is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListAppSaveFiles(context.Context, *connect.Request[v1.ListAppSaveFilesRequest]) (*connect.Response[v1.ListAppSaveFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListAppSaveFiles is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) DeleteAppSaveFile(context.Context, *connect.Request[v1.DeleteAppSaveFileRequest]) (*connect.Response[v1.DeleteAppSaveFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.DeleteAppSaveFile is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) PinAppSaveFile(context.Context, *connect.Request[v1.PinAppSaveFileRequest]) (*connect.Response[v1.PinAppSaveFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.PinAppSaveFile is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) UnpinAppSaveFile(context.Context, *connect.Request[v1.UnpinAppSaveFileRequest]) (*connect.Response[v1.UnpinAppSaveFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.UnpinAppSaveFile is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) GetAppSaveFileCapacity(context.Context, *connect.Request[v1.GetAppSaveFileCapacityRequest]) (*connect.Response[v1.GetAppSaveFileCapacityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.GetAppSaveFileCapacity is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) SetAppSaveFileCapacity(context.Context, *connect.Request[v1.SetAppSaveFileCapacityRequest]) (*connect.Response[v1.SetAppSaveFileCapacityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.SetAppSaveFileCapacity is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListAppCategories(context.Context, *connect.Request[v1.ListAppCategoriesRequest]) (*connect.Response[v1.ListAppCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListAppCategories is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) CreateAppCategory(context.Context, *connect.Request[v1.CreateAppCategoryRequest]) (*connect.Response[v1.CreateAppCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.CreateAppCategory is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) UpdateAppCategory(context.Context, *connect.Request[v1.UpdateAppCategoryRequest]) (*connect.Response[v1.UpdateAppCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.UpdateAppCategory is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) DeleteAppCategory(context.Context, *connect.Request[v1.DeleteAppCategoryRequest]) (*connect.Response[v1.DeleteAppCategoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.DeleteAppCategory is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) CreateNotifyTarget(context.Context, *connect.Request[v1.CreateNotifyTargetRequest]) (*connect.Response[v1.CreateNotifyTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.CreateNotifyTarget is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) UpdateNotifyTarget(context.Context, *connect.Request[v1.UpdateNotifyTargetRequest]) (*connect.Response[v1.UpdateNotifyTargetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.UpdateNotifyTarget is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListNotifyTargets(context.Context, *connect.Request[v1.ListNotifyTargetsRequest]) (*connect.Response[v1.ListNotifyTargetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListNotifyTargets is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) CreateNotifyFlow(context.Context, *connect.Request[v1.CreateNotifyFlowRequest]) (*connect.Response[v1.CreateNotifyFlowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.CreateNotifyFlow is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) UpdateNotifyFlow(context.Context, *connect.Request[v1.UpdateNotifyFlowRequest]) (*connect.Response[v1.UpdateNotifyFlowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.UpdateNotifyFlow is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListNotifyFlows(context.Context, *connect.Request[v1.ListNotifyFlowsRequest]) (*connect.Response[v1.ListNotifyFlowsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListNotifyFlows is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListSystemNotifications(context.Context, *connect.Request[v1.ListSystemNotificationsRequest]) (*connect.Response[v1.ListSystemNotificationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListSystemNotifications is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) UpdateSystemNotification(context.Context, *connect.Request[v1.UpdateSystemNotificationRequest]) (*connect.Response[v1.UpdateSystemNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.UpdateSystemNotification is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) CreateFeedConfig(context.Context, *connect.Request[v1.CreateFeedConfigRequest]) (*connect.Response[v1.CreateFeedConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.CreateFeedConfig is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) UpdateFeedConfig(context.Context, *connect.Request[v1.UpdateFeedConfigRequest]) (*connect.Response[v1.UpdateFeedConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.UpdateFeedConfig is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListFeedConfigs(context.Context, *connect.Request[v1.ListFeedConfigsRequest]) (*connect.Response[v1.ListFeedConfigsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListFeedConfigs is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) CreateFeedActionSet(context.Context, *connect.Request[v1.CreateFeedActionSetRequest]) (*connect.Response[v1.CreateFeedActionSetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.CreateFeedActionSet is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) UpdateFeedActionSet(context.Context, *connect.Request[v1.UpdateFeedActionSetRequest]) (*connect.Response[v1.UpdateFeedActionSetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.UpdateFeedActionSet is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListFeedActionSets(context.Context, *connect.Request[v1.ListFeedActionSetsRequest]) (*connect.Response[v1.ListFeedActionSetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListFeedActionSets is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListFeedCategories(context.Context, *connect.Request[v1.ListFeedCategoriesRequest]) (*connect.Response[v1.ListFeedCategoriesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListFeedCategories is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListFeedPlatforms(context.Context, *connect.Request[v1.ListFeedPlatformsRequest]) (*connect.Response[v1.ListFeedPlatformsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListFeedPlatforms is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListFeedItems(context.Context, *connect.Request[v1.ListFeedItemsRequest]) (*connect.Response[v1.ListFeedItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListFeedItems is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) GetFeedItem(context.Context, *connect.Request[v1.GetFeedItemRequest]) (*connect.Response[v1.GetFeedItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.GetFeedItem is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) GetBatchFeedItems(context.Context, *connect.Request[v1.GetBatchFeedItemsRequest]) (*connect.Response[v1.GetBatchFeedItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.GetBatchFeedItems is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ReadFeedItem(context.Context, *connect.Request[v1.ReadFeedItemRequest]) (*connect.Response[v1.ReadFeedItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ReadFeedItem is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) CreateFeedItemCollection(context.Context, *connect.Request[v1.CreateFeedItemCollectionRequest]) (*connect.Response[v1.CreateFeedItemCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.CreateFeedItemCollection is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) UpdateFeedItemCollection(context.Context, *connect.Request[v1.UpdateFeedItemCollectionRequest]) (*connect.Response[v1.UpdateFeedItemCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.UpdateFeedItemCollection is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListFeedItemCollections(context.Context, *connect.Request[v1.ListFeedItemCollectionsRequest]) (*connect.Response[v1.ListFeedItemCollectionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListFeedItemCollections is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) AddFeedItemToCollection(context.Context, *connect.Request[v1.AddFeedItemToCollectionRequest]) (*connect.Response[v1.AddFeedItemToCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.AddFeedItemToCollection is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) RemoveFeedItemFromCollection(context.Context, *connect.Request[v1.RemoveFeedItemFromCollectionRequest]) (*connect.Response[v1.RemoveFeedItemFromCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.RemoveFeedItemFromCollection is not implemented"))
}

func (UnimplementedLibrarianSephirahServiceHandler) ListFeedItemsInCollection(context.Context, *connect.Request[v1.ListFeedItemsInCollectionRequest]) (*connect.Response[v1.ListFeedItemsInCollectionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.LibrarianSephirahService.ListFeedItemsInCollection is not implemented"))
}
