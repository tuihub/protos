// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: librarian/sephirah/v1/sephirah.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LibrarianSephirahService_GetToken_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/GetToken"
	LibrarianSephirahService_RefreshToken_FullMethodName         = "/librarian.sephirah.v1.LibrarianSephirahService/RefreshToken"
	LibrarianSephirahService_GenerateToken_FullMethodName        = "/librarian.sephirah.v1.LibrarianSephirahService/GenerateToken"
	LibrarianSephirahService_CreateUser_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/CreateUser"
	LibrarianSephirahService_UpdateUser_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateUser"
	LibrarianSephirahService_GetUser_FullMethodName              = "/librarian.sephirah.v1.LibrarianSephirahService/GetUser"
	LibrarianSephirahService_ListUsers_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/ListUsers"
	LibrarianSephirahService_LinkAccount_FullMethodName          = "/librarian.sephirah.v1.LibrarianSephirahService/LinkAccount"
	LibrarianSephirahService_UnLinkAccount_FullMethodName        = "/librarian.sephirah.v1.LibrarianSephirahService/UnLinkAccount"
	LibrarianSephirahService_ListLinkAccounts_FullMethodName     = "/librarian.sephirah.v1.LibrarianSephirahService/ListLinkAccounts"
	LibrarianSephirahService_UploadFile_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/UploadFile"
	LibrarianSephirahService_DownloadFile_FullMethodName         = "/librarian.sephirah.v1.LibrarianSephirahService/DownloadFile"
	LibrarianSephirahService_SimpleUploadFile_FullMethodName     = "/librarian.sephirah.v1.LibrarianSephirahService/SimpleUploadFile"
	LibrarianSephirahService_SimpleDownloadFile_FullMethodName   = "/librarian.sephirah.v1.LibrarianSephirahService/SimpleDownloadFile"
	LibrarianSephirahService_CreateApp_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/CreateApp"
	LibrarianSephirahService_UpdateApp_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateApp"
	LibrarianSephirahService_ListApps_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/ListApps"
	LibrarianSephirahService_RefreshApp_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/RefreshApp"
	LibrarianSephirahService_MergeApps_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/MergeApps"
	LibrarianSephirahService_SearchApps_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/SearchApps"
	LibrarianSephirahService_GetBindApps_FullMethodName          = "/librarian.sephirah.v1.LibrarianSephirahService/GetBindApps"
	LibrarianSephirahService_PurchaseApp_FullMethodName          = "/librarian.sephirah.v1.LibrarianSephirahService/PurchaseApp"
	LibrarianSephirahService_GetAppLibrary_FullMethodName        = "/librarian.sephirah.v1.LibrarianSephirahService/GetAppLibrary"
	LibrarianSephirahService_CreateAppPackage_FullMethodName     = "/librarian.sephirah.v1.LibrarianSephirahService/CreateAppPackage"
	LibrarianSephirahService_UpdateAppPackage_FullMethodName     = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateAppPackage"
	LibrarianSephirahService_ListAppPackages_FullMethodName      = "/librarian.sephirah.v1.LibrarianSephirahService/ListAppPackages"
	LibrarianSephirahService_AssignAppPackage_FullMethodName     = "/librarian.sephirah.v1.LibrarianSephirahService/AssignAppPackage"
	LibrarianSephirahService_UnAssignAppPackage_FullMethodName   = "/librarian.sephirah.v1.LibrarianSephirahService/UnAssignAppPackage"
	LibrarianSephirahService_ReportAppPackages_FullMethodName    = "/librarian.sephirah.v1.LibrarianSephirahService/ReportAppPackages"
	LibrarianSephirahService_UploadGameSaveFile_FullMethodName   = "/librarian.sephirah.v1.LibrarianSephirahService/UploadGameSaveFile"
	LibrarianSephirahService_DownloadGameSaveFile_FullMethodName = "/librarian.sephirah.v1.LibrarianSephirahService/DownloadGameSaveFile"
	LibrarianSephirahService_ListGameSaveFile_FullMethodName     = "/librarian.sephirah.v1.LibrarianSephirahService/ListGameSaveFile"
	LibrarianSephirahService_CreateFeedConfig_FullMethodName     = "/librarian.sephirah.v1.LibrarianSephirahService/CreateFeedConfig"
	LibrarianSephirahService_UpdateFeedConfig_FullMethodName     = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateFeedConfig"
	LibrarianSephirahService_ListFeedConfigs_FullMethodName      = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedConfigs"
	LibrarianSephirahService_ListFeedItems_FullMethodName        = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedItems"
	LibrarianSephirahService_GroupFeedItems_FullMethodName       = "/librarian.sephirah.v1.LibrarianSephirahService/GroupFeedItems"
	LibrarianSephirahService_GetFeedItem_FullMethodName          = "/librarian.sephirah.v1.LibrarianSephirahService/GetFeedItem"
	LibrarianSephirahService_GetBatchFeedItems_FullMethodName    = "/librarian.sephirah.v1.LibrarianSephirahService/GetBatchFeedItems"
)

// LibrarianSephirahServiceClient is the client API for LibrarianSephirahService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibrarianSephirahServiceClient interface {
	// `Tiphereth` `Normal` Login via password and get two token
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	// `Tiphereth` `Normal` `Sentinel` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// `Tiphereth` `Admin` Generate token for given user
	GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// `Tiphereth` `Normal` Bind third-party account to current user.
	// Create (account)<-[Equal]->(current user)
	LinkAccount(ctx context.Context, in *LinkAccountRequest, opts ...grpc.CallOption) (*LinkAccountResponse, error)
	// `Tiphereth` `Normal` Unbind third-party account from current user.
	// Delete (account)<-[Equal]->(current user)
	UnLinkAccount(ctx context.Context, in *UnLinkAccountRequest, opts ...grpc.CallOption) (*UnLinkAccountResponse, error)
	// `Tiphereth` `Normal` List third-party account binded to current user.
	// Match ()<-[Equal]->(current user)
	ListLinkAccounts(ctx context.Context, in *ListLinkAccountsRequest, opts ...grpc.CallOption) (*ListLinkAccountsResponse, error)
	// `Binah` `upload_token`
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_UploadFileClient, error)
	// `Binah` `download_token`
	DownloadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_DownloadFileClient, error)
	// `Binah` `upload_token`
	SimpleUploadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_SimpleUploadFileClient, error)
	// `Binah` `download_token`
	SimpleDownloadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_SimpleDownloadFileClient, error)
	// `Gebura` `Admin`
	CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error)
	// `Gebura` `Admin`
	UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error)
	// `Gebura` `Admin` Used to manage apps
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error)
	// `Gebura` `Admin` Submit an asynchronous update request
	RefreshApp(ctx context.Context, in *RefreshAppRequest, opts ...grpc.CallOption) (*RefreshAppResponse, error)
	// `Gebura` `Admin` Merge two apps
	MergeApps(ctx context.Context, in *MergeAppsRequest, opts ...grpc.CallOption) (*MergeAppsResponse, error)
	// `Gebura` `Normal`
	SearchApps(ctx context.Context, in *SearchAppsRequest, opts ...grpc.CallOption) (*SearchAppsResponse, error)
	// `Gebura` `Normal` Get full information of required app
	GetBindApps(ctx context.Context, in *GetBindAppsRequest, opts ...grpc.CallOption) (*GetBindAppsResponse, error)
	// `Gebura` `Normal`
	PurchaseApp(ctx context.Context, in *PurchaseAppRequest, opts ...grpc.CallOption) (*PurchaseAppResponse, error)
	// `Gebura` `Normal` Get the entire library
	GetAppLibrary(ctx context.Context, in *GetAppLibraryRequest, opts ...grpc.CallOption) (*GetAppLibraryResponse, error)
	// `Gebura` `Normal`
	CreateAppPackage(ctx context.Context, in *CreateAppPackageRequest, opts ...grpc.CallOption) (*CreateAppPackageResponse, error)
	// `Gebura` `Normal`
	UpdateAppPackage(ctx context.Context, in *UpdateAppPackageRequest, opts ...grpc.CallOption) (*UpdateAppPackageResponse, error)
	// `Gebura` `Normal`
	ListAppPackages(ctx context.Context, in *ListAppPackagesRequest, opts ...grpc.CallOption) (*ListAppPackagesResponse, error)
	// `Gebura` `Normal`
	AssignAppPackage(ctx context.Context, in *AssignAppPackageRequest, opts ...grpc.CallOption) (*AssignAppPackageResponse, error)
	// `Gebura` `Normal`
	UnAssignAppPackage(ctx context.Context, in *UnAssignAppPackageRequest, opts ...grpc.CallOption) (*UnAssignAppPackageResponse, error)
	// `Gebura` `Sentinel`
	ReportAppPackages(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_ReportAppPackagesClient, error)
	// `Gebura` `Normal`
	UploadGameSaveFile(ctx context.Context, in *UploadGameSaveFileRequest, opts ...grpc.CallOption) (*UploadGameSaveFileResponse, error)
	// `Gebura` `Normal`
	DownloadGameSaveFile(ctx context.Context, in *DownloadGameSaveFileRequest, opts ...grpc.CallOption) (*DownloadGameSaveFileResponse, error)
	// `Gebura` `Normal`
	ListGameSaveFile(ctx context.Context, in *ListGameSaveFileRequest, opts ...grpc.CallOption) (*ListGameSaveFileResponse, error)
	// `Yesod` `Normal`
	CreateFeedConfig(ctx context.Context, in *CreateFeedConfigRequest, opts ...grpc.CallOption) (*CreateFeedConfigResponse, error)
	// `Yesod` `Normal`
	UpdateFeedConfig(ctx context.Context, in *UpdateFeedConfigRequest, opts ...grpc.CallOption) (*UpdateFeedConfigResponse, error)
	// `Yesod` `Normal`
	ListFeedConfigs(ctx context.Context, in *ListFeedConfigsRequest, opts ...grpc.CallOption) (*ListFeedConfigsResponse, error)
	// `Yesod` `Normal`
	ListFeedItems(ctx context.Context, in *ListFeedItemsRequest, opts ...grpc.CallOption) (*ListFeedItemsResponse, error)
	// `Yesod` `Normal`
	GroupFeedItems(ctx context.Context, in *GroupFeedItemsRequest, opts ...grpc.CallOption) (*GroupFeedItemsResponse, error)
	// `Yesod` `Normal`
	GetFeedItem(ctx context.Context, in *GetFeedItemRequest, opts ...grpc.CallOption) (*GetFeedItemResponse, error)
	// `Yesod` `Normal`
	GetBatchFeedItems(ctx context.Context, in *GetBatchFeedItemsRequest, opts ...grpc.CallOption) (*GetBatchFeedItemsResponse, error)
}

type librarianSephirahServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibrarianSephirahServiceClient(cc grpc.ClientConnInterface) LibrarianSephirahServiceClient {
	return &librarianSephirahServiceClient{cc}
}

func (c *librarianSephirahServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	out := new(GenerateTokenResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GenerateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) LinkAccount(ctx context.Context, in *LinkAccountRequest, opts ...grpc.CallOption) (*LinkAccountResponse, error) {
	out := new(LinkAccountResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_LinkAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UnLinkAccount(ctx context.Context, in *UnLinkAccountRequest, opts ...grpc.CallOption) (*UnLinkAccountResponse, error) {
	out := new(UnLinkAccountResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UnLinkAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListLinkAccounts(ctx context.Context, in *ListLinkAccountsRequest, opts ...grpc.CallOption) (*ListLinkAccountsResponse, error) {
	out := new(ListLinkAccountsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListLinkAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[0], LibrarianSephirahService_UploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceUploadFileClient{stream}
	return x, nil
}

type LibrarianSephirahService_UploadFileClient interface {
	Send(*UploadFileRequest) error
	Recv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianSephirahServiceUploadFileClient) Recv() (*UploadFileResponse, error) {
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) DownloadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[1], LibrarianSephirahService_DownloadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceDownloadFileClient{stream}
	return x, nil
}

type LibrarianSephirahService_DownloadFileClient interface {
	Send(*DownloadFileRequest) error
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceDownloadFileClient) Send(m *DownloadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianSephirahServiceDownloadFileClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) SimpleUploadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_SimpleUploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[2], LibrarianSephirahService_SimpleUploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceSimpleUploadFileClient{stream}
	return x, nil
}

type LibrarianSephirahService_SimpleUploadFileClient interface {
	Send(*SimpleUploadFileRequest) error
	Recv() (*SimpleUploadFileResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceSimpleUploadFileClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceSimpleUploadFileClient) Send(m *SimpleUploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianSephirahServiceSimpleUploadFileClient) Recv() (*SimpleUploadFileResponse, error) {
	m := new(SimpleUploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) SimpleDownloadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_SimpleDownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[3], LibrarianSephirahService_SimpleDownloadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceSimpleDownloadFileClient{stream}
	return x, nil
}

type LibrarianSephirahService_SimpleDownloadFileClient interface {
	Send(*SimpleDownloadFileRequest) error
	Recv() (*SimpleDownloadFileResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceSimpleDownloadFileClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceSimpleDownloadFileClient) Send(m *SimpleDownloadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianSephirahServiceSimpleDownloadFileClient) Recv() (*SimpleDownloadFileResponse, error) {
	m := new(SimpleDownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error) {
	out := new(CreateAppResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error) {
	out := new(UpdateAppResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error) {
	out := new(ListAppsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RefreshApp(ctx context.Context, in *RefreshAppRequest, opts ...grpc.CallOption) (*RefreshAppResponse, error) {
	out := new(RefreshAppResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RefreshApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) MergeApps(ctx context.Context, in *MergeAppsRequest, opts ...grpc.CallOption) (*MergeAppsResponse, error) {
	out := new(MergeAppsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_MergeApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SearchApps(ctx context.Context, in *SearchAppsRequest, opts ...grpc.CallOption) (*SearchAppsResponse, error) {
	out := new(SearchAppsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SearchApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetBindApps(ctx context.Context, in *GetBindAppsRequest, opts ...grpc.CallOption) (*GetBindAppsResponse, error) {
	out := new(GetBindAppsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetBindApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) PurchaseApp(ctx context.Context, in *PurchaseAppRequest, opts ...grpc.CallOption) (*PurchaseAppResponse, error) {
	out := new(PurchaseAppResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_PurchaseApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetAppLibrary(ctx context.Context, in *GetAppLibraryRequest, opts ...grpc.CallOption) (*GetAppLibraryResponse, error) {
	out := new(GetAppLibraryResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetAppLibrary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateAppPackage(ctx context.Context, in *CreateAppPackageRequest, opts ...grpc.CallOption) (*CreateAppPackageResponse, error) {
	out := new(CreateAppPackageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateAppPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateAppPackage(ctx context.Context, in *UpdateAppPackageRequest, opts ...grpc.CallOption) (*UpdateAppPackageResponse, error) {
	out := new(UpdateAppPackageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateAppPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListAppPackages(ctx context.Context, in *ListAppPackagesRequest, opts ...grpc.CallOption) (*ListAppPackagesResponse, error) {
	out := new(ListAppPackagesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListAppPackages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) AssignAppPackage(ctx context.Context, in *AssignAppPackageRequest, opts ...grpc.CallOption) (*AssignAppPackageResponse, error) {
	out := new(AssignAppPackageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_AssignAppPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UnAssignAppPackage(ctx context.Context, in *UnAssignAppPackageRequest, opts ...grpc.CallOption) (*UnAssignAppPackageResponse, error) {
	out := new(UnAssignAppPackageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UnAssignAppPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ReportAppPackages(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_ReportAppPackagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[4], LibrarianSephirahService_ReportAppPackages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceReportAppPackagesClient{stream}
	return x, nil
}

type LibrarianSephirahService_ReportAppPackagesClient interface {
	Send(*ReportAppPackagesRequest) error
	Recv() (*ReportAppPackagesResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceReportAppPackagesClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceReportAppPackagesClient) Send(m *ReportAppPackagesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianSephirahServiceReportAppPackagesClient) Recv() (*ReportAppPackagesResponse, error) {
	m := new(ReportAppPackagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) UploadGameSaveFile(ctx context.Context, in *UploadGameSaveFileRequest, opts ...grpc.CallOption) (*UploadGameSaveFileResponse, error) {
	out := new(UploadGameSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UploadGameSaveFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) DownloadGameSaveFile(ctx context.Context, in *DownloadGameSaveFileRequest, opts ...grpc.CallOption) (*DownloadGameSaveFileResponse, error) {
	out := new(DownloadGameSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_DownloadGameSaveFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListGameSaveFile(ctx context.Context, in *ListGameSaveFileRequest, opts ...grpc.CallOption) (*ListGameSaveFileResponse, error) {
	out := new(ListGameSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListGameSaveFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateFeedConfig(ctx context.Context, in *CreateFeedConfigRequest, opts ...grpc.CallOption) (*CreateFeedConfigResponse, error) {
	out := new(CreateFeedConfigResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateFeedConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateFeedConfig(ctx context.Context, in *UpdateFeedConfigRequest, opts ...grpc.CallOption) (*UpdateFeedConfigResponse, error) {
	out := new(UpdateFeedConfigResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateFeedConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedConfigs(ctx context.Context, in *ListFeedConfigsRequest, opts ...grpc.CallOption) (*ListFeedConfigsResponse, error) {
	out := new(ListFeedConfigsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedItems(ctx context.Context, in *ListFeedItemsRequest, opts ...grpc.CallOption) (*ListFeedItemsResponse, error) {
	out := new(ListFeedItemsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GroupFeedItems(ctx context.Context, in *GroupFeedItemsRequest, opts ...grpc.CallOption) (*GroupFeedItemsResponse, error) {
	out := new(GroupFeedItemsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GroupFeedItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetFeedItem(ctx context.Context, in *GetFeedItemRequest, opts ...grpc.CallOption) (*GetFeedItemResponse, error) {
	out := new(GetFeedItemResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetFeedItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetBatchFeedItems(ctx context.Context, in *GetBatchFeedItemsRequest, opts ...grpc.CallOption) (*GetBatchFeedItemsResponse, error) {
	out := new(GetBatchFeedItemsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetBatchFeedItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibrarianSephirahServiceServer is the server API for LibrarianSephirahService service.
// All implementations must embed UnimplementedLibrarianSephirahServiceServer
// for forward compatibility
type LibrarianSephirahServiceServer interface {
	// `Tiphereth` `Normal` Login via password and get two token
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	// `Tiphereth` `Normal` `Sentinel` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// `Tiphereth` `Admin` Generate token for given user
	GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// `Tiphereth` `Normal` Bind third-party account to current user.
	// Create (account)<-[Equal]->(current user)
	LinkAccount(context.Context, *LinkAccountRequest) (*LinkAccountResponse, error)
	// `Tiphereth` `Normal` Unbind third-party account from current user.
	// Delete (account)<-[Equal]->(current user)
	UnLinkAccount(context.Context, *UnLinkAccountRequest) (*UnLinkAccountResponse, error)
	// `Tiphereth` `Normal` List third-party account binded to current user.
	// Match ()<-[Equal]->(current user)
	ListLinkAccounts(context.Context, *ListLinkAccountsRequest) (*ListLinkAccountsResponse, error)
	// `Binah` `upload_token`
	UploadFile(LibrarianSephirahService_UploadFileServer) error
	// `Binah` `download_token`
	DownloadFile(LibrarianSephirahService_DownloadFileServer) error
	// `Binah` `upload_token`
	SimpleUploadFile(LibrarianSephirahService_SimpleUploadFileServer) error
	// `Binah` `download_token`
	SimpleDownloadFile(LibrarianSephirahService_SimpleDownloadFileServer) error
	// `Gebura` `Admin`
	CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error)
	// `Gebura` `Admin`
	UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error)
	// `Gebura` `Admin` Used to manage apps
	ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error)
	// `Gebura` `Admin` Submit an asynchronous update request
	RefreshApp(context.Context, *RefreshAppRequest) (*RefreshAppResponse, error)
	// `Gebura` `Admin` Merge two apps
	MergeApps(context.Context, *MergeAppsRequest) (*MergeAppsResponse, error)
	// `Gebura` `Normal`
	SearchApps(context.Context, *SearchAppsRequest) (*SearchAppsResponse, error)
	// `Gebura` `Normal` Get full information of required app
	GetBindApps(context.Context, *GetBindAppsRequest) (*GetBindAppsResponse, error)
	// `Gebura` `Normal`
	PurchaseApp(context.Context, *PurchaseAppRequest) (*PurchaseAppResponse, error)
	// `Gebura` `Normal` Get the entire library
	GetAppLibrary(context.Context, *GetAppLibraryRequest) (*GetAppLibraryResponse, error)
	// `Gebura` `Normal`
	CreateAppPackage(context.Context, *CreateAppPackageRequest) (*CreateAppPackageResponse, error)
	// `Gebura` `Normal`
	UpdateAppPackage(context.Context, *UpdateAppPackageRequest) (*UpdateAppPackageResponse, error)
	// `Gebura` `Normal`
	ListAppPackages(context.Context, *ListAppPackagesRequest) (*ListAppPackagesResponse, error)
	// `Gebura` `Normal`
	AssignAppPackage(context.Context, *AssignAppPackageRequest) (*AssignAppPackageResponse, error)
	// `Gebura` `Normal`
	UnAssignAppPackage(context.Context, *UnAssignAppPackageRequest) (*UnAssignAppPackageResponse, error)
	// `Gebura` `Sentinel`
	ReportAppPackages(LibrarianSephirahService_ReportAppPackagesServer) error
	// `Gebura` `Normal`
	UploadGameSaveFile(context.Context, *UploadGameSaveFileRequest) (*UploadGameSaveFileResponse, error)
	// `Gebura` `Normal`
	DownloadGameSaveFile(context.Context, *DownloadGameSaveFileRequest) (*DownloadGameSaveFileResponse, error)
	// `Gebura` `Normal`
	ListGameSaveFile(context.Context, *ListGameSaveFileRequest) (*ListGameSaveFileResponse, error)
	// `Yesod` `Normal`
	CreateFeedConfig(context.Context, *CreateFeedConfigRequest) (*CreateFeedConfigResponse, error)
	// `Yesod` `Normal`
	UpdateFeedConfig(context.Context, *UpdateFeedConfigRequest) (*UpdateFeedConfigResponse, error)
	// `Yesod` `Normal`
	ListFeedConfigs(context.Context, *ListFeedConfigsRequest) (*ListFeedConfigsResponse, error)
	// `Yesod` `Normal`
	ListFeedItems(context.Context, *ListFeedItemsRequest) (*ListFeedItemsResponse, error)
	// `Yesod` `Normal`
	GroupFeedItems(context.Context, *GroupFeedItemsRequest) (*GroupFeedItemsResponse, error)
	// `Yesod` `Normal`
	GetFeedItem(context.Context, *GetFeedItemRequest) (*GetFeedItemResponse, error)
	// `Yesod` `Normal`
	GetBatchFeedItems(context.Context, *GetBatchFeedItemsRequest) (*GetBatchFeedItemsResponse, error)
	mustEmbedUnimplementedLibrarianSephirahServiceServer()
}

// UnimplementedLibrarianSephirahServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLibrarianSephirahServiceServer struct {
}

func (UnimplementedLibrarianSephirahServiceServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) LinkAccount(context.Context, *LinkAccountRequest) (*LinkAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkAccount not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UnLinkAccount(context.Context, *UnLinkAccountRequest) (*UnLinkAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLinkAccount not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListLinkAccounts(context.Context, *ListLinkAccountsRequest) (*ListLinkAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLinkAccounts not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UploadFile(LibrarianSephirahService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DownloadFile(LibrarianSephirahService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SimpleUploadFile(LibrarianSephirahService_SimpleUploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SimpleUploadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SimpleDownloadFile(LibrarianSephirahService_SimpleDownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SimpleDownloadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RefreshApp(context.Context, *RefreshAppRequest) (*RefreshAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) MergeApps(context.Context, *MergeAppsRequest) (*MergeAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeApps not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SearchApps(context.Context, *SearchAppsRequest) (*SearchAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchApps not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetBindApps(context.Context, *GetBindAppsRequest) (*GetBindAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBindApps not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) PurchaseApp(context.Context, *PurchaseAppRequest) (*PurchaseAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetAppLibrary(context.Context, *GetAppLibraryRequest) (*GetAppLibraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppLibrary not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateAppPackage(context.Context, *CreateAppPackageRequest) (*CreateAppPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppPackage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateAppPackage(context.Context, *UpdateAppPackageRequest) (*UpdateAppPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppPackage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListAppPackages(context.Context, *ListAppPackagesRequest) (*ListAppPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppPackages not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) AssignAppPackage(context.Context, *AssignAppPackageRequest) (*AssignAppPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignAppPackage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UnAssignAppPackage(context.Context, *UnAssignAppPackageRequest) (*UnAssignAppPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnAssignAppPackage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ReportAppPackages(LibrarianSephirahService_ReportAppPackagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportAppPackages not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UploadGameSaveFile(context.Context, *UploadGameSaveFileRequest) (*UploadGameSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGameSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DownloadGameSaveFile(context.Context, *DownloadGameSaveFileRequest) (*DownloadGameSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadGameSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListGameSaveFile(context.Context, *ListGameSaveFileRequest) (*ListGameSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateFeedConfig(context.Context, *CreateFeedConfigRequest) (*CreateFeedConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedConfig not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateFeedConfig(context.Context, *UpdateFeedConfigRequest) (*UpdateFeedConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedConfig not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedConfigs(context.Context, *ListFeedConfigsRequest) (*ListFeedConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedConfigs not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedItems(context.Context, *ListFeedItemsRequest) (*ListFeedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedItems not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GroupFeedItems(context.Context, *GroupFeedItemsRequest) (*GroupFeedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupFeedItems not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetFeedItem(context.Context, *GetFeedItemRequest) (*GetFeedItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedItem not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetBatchFeedItems(context.Context, *GetBatchFeedItemsRequest) (*GetBatchFeedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchFeedItems not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) mustEmbedUnimplementedLibrarianSephirahServiceServer() {
}

// UnsafeLibrarianSephirahServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibrarianSephirahServiceServer will
// result in compilation errors.
type UnsafeLibrarianSephirahServiceServer interface {
	mustEmbedUnimplementedLibrarianSephirahServiceServer()
}

func RegisterLibrarianSephirahServiceServer(s grpc.ServiceRegistrar, srv LibrarianSephirahServiceServer) {
	s.RegisterService(&LibrarianSephirahService_ServiceDesc, srv)
}

func _LibrarianSephirahService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GenerateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GenerateToken(ctx, req.(*GenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_LinkAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).LinkAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_LinkAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).LinkAccount(ctx, req.(*LinkAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UnLinkAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLinkAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UnLinkAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UnLinkAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UnLinkAccount(ctx, req.(*UnLinkAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListLinkAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLinkAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListLinkAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListLinkAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListLinkAccounts(ctx, req.(*ListLinkAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).UploadFile(&librarianSephirahServiceUploadFileServer{stream})
}

type LibrarianSephirahService_UploadFileServer interface {
	Send(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type librarianSephirahServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceUploadFileServer) Send(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianSephirahServiceUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianSephirahService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).DownloadFile(&librarianSephirahServiceDownloadFileServer{stream})
}

type LibrarianSephirahService_DownloadFileServer interface {
	Send(*DownloadFileResponse) error
	Recv() (*DownloadFileRequest, error)
	grpc.ServerStream
}

type librarianSephirahServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceDownloadFileServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianSephirahServiceDownloadFileServer) Recv() (*DownloadFileRequest, error) {
	m := new(DownloadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianSephirahService_SimpleUploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).SimpleUploadFile(&librarianSephirahServiceSimpleUploadFileServer{stream})
}

type LibrarianSephirahService_SimpleUploadFileServer interface {
	Send(*SimpleUploadFileResponse) error
	Recv() (*SimpleUploadFileRequest, error)
	grpc.ServerStream
}

type librarianSephirahServiceSimpleUploadFileServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceSimpleUploadFileServer) Send(m *SimpleUploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianSephirahServiceSimpleUploadFileServer) Recv() (*SimpleUploadFileRequest, error) {
	m := new(SimpleUploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianSephirahService_SimpleDownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).SimpleDownloadFile(&librarianSephirahServiceSimpleDownloadFileServer{stream})
}

type LibrarianSephirahService_SimpleDownloadFileServer interface {
	Send(*SimpleDownloadFileResponse) error
	Recv() (*SimpleDownloadFileRequest, error)
	grpc.ServerStream
}

type librarianSephirahServiceSimpleDownloadFileServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceSimpleDownloadFileServer) Send(m *SimpleDownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianSephirahServiceSimpleDownloadFileServer) Recv() (*SimpleDownloadFileRequest, error) {
	m := new(SimpleDownloadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianSephirahService_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateApp(ctx, req.(*CreateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateApp(ctx, req.(*UpdateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RefreshApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RefreshApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RefreshApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RefreshApp(ctx, req.(*RefreshAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_MergeApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).MergeApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_MergeApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).MergeApps(ctx, req.(*MergeAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SearchApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SearchApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SearchApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SearchApps(ctx, req.(*SearchAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetBindApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBindAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetBindApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetBindApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetBindApps(ctx, req.(*GetBindAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_PurchaseApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).PurchaseApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_PurchaseApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).PurchaseApp(ctx, req.(*PurchaseAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetAppLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetAppLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetAppLibrary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetAppLibrary(ctx, req.(*GetAppLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateAppPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateAppPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateAppPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateAppPackage(ctx, req.(*CreateAppPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateAppPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateAppPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateAppPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateAppPackage(ctx, req.(*UpdateAppPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListAppPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListAppPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListAppPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListAppPackages(ctx, req.(*ListAppPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_AssignAppPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignAppPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).AssignAppPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_AssignAppPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).AssignAppPackage(ctx, req.(*AssignAppPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UnAssignAppPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnAssignAppPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UnAssignAppPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UnAssignAppPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UnAssignAppPackage(ctx, req.(*UnAssignAppPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ReportAppPackages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).ReportAppPackages(&librarianSephirahServiceReportAppPackagesServer{stream})
}

type LibrarianSephirahService_ReportAppPackagesServer interface {
	Send(*ReportAppPackagesResponse) error
	Recv() (*ReportAppPackagesRequest, error)
	grpc.ServerStream
}

type librarianSephirahServiceReportAppPackagesServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceReportAppPackagesServer) Send(m *ReportAppPackagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianSephirahServiceReportAppPackagesServer) Recv() (*ReportAppPackagesRequest, error) {
	m := new(ReportAppPackagesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianSephirahService_UploadGameSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadGameSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UploadGameSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UploadGameSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UploadGameSaveFile(ctx, req.(*UploadGameSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_DownloadGameSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadGameSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).DownloadGameSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_DownloadGameSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).DownloadGameSaveFile(ctx, req.(*DownloadGameSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListGameSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListGameSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListGameSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListGameSaveFile(ctx, req.(*ListGameSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateFeedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateFeedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateFeedConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateFeedConfig(ctx, req.(*CreateFeedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateFeedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateFeedConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedConfig(ctx, req.(*UpdateFeedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedConfigs(ctx, req.(*ListFeedConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedItems(ctx, req.(*ListFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GroupFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GroupFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GroupFeedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GroupFeedItems(ctx, req.(*GroupFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetFeedItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetFeedItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetFeedItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetFeedItem(ctx, req.(*GetFeedItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetBatchFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetBatchFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetBatchFeedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetBatchFeedItems(ctx, req.(*GetBatchFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibrarianSephirahService_ServiceDesc is the grpc.ServiceDesc for LibrarianSephirahService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibrarianSephirahService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "librarian.sephirah.v1.LibrarianSephirahService",
	HandlerType: (*LibrarianSephirahServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _LibrarianSephirahService_GetToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _LibrarianSephirahService_RefreshToken_Handler,
		},
		{
			MethodName: "GenerateToken",
			Handler:    _LibrarianSephirahService_GenerateToken_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _LibrarianSephirahService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _LibrarianSephirahService_UpdateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _LibrarianSephirahService_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _LibrarianSephirahService_ListUsers_Handler,
		},
		{
			MethodName: "LinkAccount",
			Handler:    _LibrarianSephirahService_LinkAccount_Handler,
		},
		{
			MethodName: "UnLinkAccount",
			Handler:    _LibrarianSephirahService_UnLinkAccount_Handler,
		},
		{
			MethodName: "ListLinkAccounts",
			Handler:    _LibrarianSephirahService_ListLinkAccounts_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _LibrarianSephirahService_CreateApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _LibrarianSephirahService_UpdateApp_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _LibrarianSephirahService_ListApps_Handler,
		},
		{
			MethodName: "RefreshApp",
			Handler:    _LibrarianSephirahService_RefreshApp_Handler,
		},
		{
			MethodName: "MergeApps",
			Handler:    _LibrarianSephirahService_MergeApps_Handler,
		},
		{
			MethodName: "SearchApps",
			Handler:    _LibrarianSephirahService_SearchApps_Handler,
		},
		{
			MethodName: "GetBindApps",
			Handler:    _LibrarianSephirahService_GetBindApps_Handler,
		},
		{
			MethodName: "PurchaseApp",
			Handler:    _LibrarianSephirahService_PurchaseApp_Handler,
		},
		{
			MethodName: "GetAppLibrary",
			Handler:    _LibrarianSephirahService_GetAppLibrary_Handler,
		},
		{
			MethodName: "CreateAppPackage",
			Handler:    _LibrarianSephirahService_CreateAppPackage_Handler,
		},
		{
			MethodName: "UpdateAppPackage",
			Handler:    _LibrarianSephirahService_UpdateAppPackage_Handler,
		},
		{
			MethodName: "ListAppPackages",
			Handler:    _LibrarianSephirahService_ListAppPackages_Handler,
		},
		{
			MethodName: "AssignAppPackage",
			Handler:    _LibrarianSephirahService_AssignAppPackage_Handler,
		},
		{
			MethodName: "UnAssignAppPackage",
			Handler:    _LibrarianSephirahService_UnAssignAppPackage_Handler,
		},
		{
			MethodName: "UploadGameSaveFile",
			Handler:    _LibrarianSephirahService_UploadGameSaveFile_Handler,
		},
		{
			MethodName: "DownloadGameSaveFile",
			Handler:    _LibrarianSephirahService_DownloadGameSaveFile_Handler,
		},
		{
			MethodName: "ListGameSaveFile",
			Handler:    _LibrarianSephirahService_ListGameSaveFile_Handler,
		},
		{
			MethodName: "CreateFeedConfig",
			Handler:    _LibrarianSephirahService_CreateFeedConfig_Handler,
		},
		{
			MethodName: "UpdateFeedConfig",
			Handler:    _LibrarianSephirahService_UpdateFeedConfig_Handler,
		},
		{
			MethodName: "ListFeedConfigs",
			Handler:    _LibrarianSephirahService_ListFeedConfigs_Handler,
		},
		{
			MethodName: "ListFeedItems",
			Handler:    _LibrarianSephirahService_ListFeedItems_Handler,
		},
		{
			MethodName: "GroupFeedItems",
			Handler:    _LibrarianSephirahService_GroupFeedItems_Handler,
		},
		{
			MethodName: "GetFeedItem",
			Handler:    _LibrarianSephirahService_GetFeedItem_Handler,
		},
		{
			MethodName: "GetBatchFeedItems",
			Handler:    _LibrarianSephirahService_GetBatchFeedItems_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _LibrarianSephirahService_UploadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _LibrarianSephirahService_DownloadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SimpleUploadFile",
			Handler:       _LibrarianSephirahService_SimpleUploadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SimpleDownloadFile",
			Handler:       _LibrarianSephirahService_SimpleDownloadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReportAppPackages",
			Handler:       _LibrarianSephirahService_ReportAppPackages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "librarian/sephirah/v1/sephirah.proto",
}
