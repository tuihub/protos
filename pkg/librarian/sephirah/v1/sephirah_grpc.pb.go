// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: librarian/sephirah/v1/sephirah.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LibrarianSephirahService_GetServerInformation_FullMethodName          = "/librarian.sephirah.v1.LibrarianSephirahService/GetServerInformation"
	LibrarianSephirahService_ListenServerEvent_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/ListenServerEvent"
	LibrarianSephirahService_GetToken_FullMethodName                      = "/librarian.sephirah.v1.LibrarianSephirahService/GetToken"
	LibrarianSephirahService_RefreshToken_FullMethodName                  = "/librarian.sephirah.v1.LibrarianSephirahService/RefreshToken"
	LibrarianSephirahService_GainUserPrivilege_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/GainUserPrivilege"
	LibrarianSephirahService_RegisterUser_FullMethodName                  = "/librarian.sephirah.v1.LibrarianSephirahService/RegisterUser"
	LibrarianSephirahService_RegisterDevice_FullMethodName                = "/librarian.sephirah.v1.LibrarianSephirahService/RegisterDevice"
	LibrarianSephirahService_ListRegisteredDevices_FullMethodName         = "/librarian.sephirah.v1.LibrarianSephirahService/ListRegisteredDevices"
	LibrarianSephirahService_ListUserSessions_FullMethodName              = "/librarian.sephirah.v1.LibrarianSephirahService/ListUserSessions"
	LibrarianSephirahService_DeleteUserSession_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/DeleteUserSession"
	LibrarianSephirahService_CreateUser_FullMethodName                    = "/librarian.sephirah.v1.LibrarianSephirahService/CreateUser"
	LibrarianSephirahService_UpdateUser_FullMethodName                    = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateUser"
	LibrarianSephirahService_GetUser_FullMethodName                       = "/librarian.sephirah.v1.LibrarianSephirahService/GetUser"
	LibrarianSephirahService_ListUsers_FullMethodName                     = "/librarian.sephirah.v1.LibrarianSephirahService/ListUsers"
	LibrarianSephirahService_LinkAccount_FullMethodName                   = "/librarian.sephirah.v1.LibrarianSephirahService/LinkAccount"
	LibrarianSephirahService_UnLinkAccount_FullMethodName                 = "/librarian.sephirah.v1.LibrarianSephirahService/UnLinkAccount"
	LibrarianSephirahService_ListLinkAccounts_FullMethodName              = "/librarian.sephirah.v1.LibrarianSephirahService/ListLinkAccounts"
	LibrarianSephirahService_ListPorters_FullMethodName                   = "/librarian.sephirah.v1.LibrarianSephirahService/ListPorters"
	LibrarianSephirahService_UpdatePorterStatus_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/UpdatePorterStatus"
	LibrarianSephirahService_UpdatePorterPrivilege_FullMethodName         = "/librarian.sephirah.v1.LibrarianSephirahService/UpdatePorterPrivilege"
	LibrarianSephirahService_SetFileCapacity_FullMethodName               = "/librarian.sephirah.v1.LibrarianSephirahService/SetFileCapacity"
	LibrarianSephirahService_GetFileCapacity_FullMethodName               = "/librarian.sephirah.v1.LibrarianSephirahService/GetFileCapacity"
	LibrarianSephirahService_UploadFile_FullMethodName                    = "/librarian.sephirah.v1.LibrarianSephirahService/UploadFile"
	LibrarianSephirahService_DownloadFile_FullMethodName                  = "/librarian.sephirah.v1.LibrarianSephirahService/DownloadFile"
	LibrarianSephirahService_SimpleUploadFile_FullMethodName              = "/librarian.sephirah.v1.LibrarianSephirahService/SimpleUploadFile"
	LibrarianSephirahService_SimpleDownloadFile_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/SimpleDownloadFile"
	LibrarianSephirahService_PresignedUploadFile_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/PresignedUploadFile"
	LibrarianSephirahService_PresignedUploadFileStatus_FullMethodName     = "/librarian.sephirah.v1.LibrarianSephirahService/PresignedUploadFileStatus"
	LibrarianSephirahService_PresignedDownloadFile_FullMethodName         = "/librarian.sephirah.v1.LibrarianSephirahService/PresignedDownloadFile"
	LibrarianSephirahService_UploadImage_FullMethodName                   = "/librarian.sephirah.v1.LibrarianSephirahService/UploadImage"
	LibrarianSephirahService_UpdateImage_FullMethodName                   = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateImage"
	LibrarianSephirahService_ListImages_FullMethodName                    = "/librarian.sephirah.v1.LibrarianSephirahService/ListImages"
	LibrarianSephirahService_SearchImages_FullMethodName                  = "/librarian.sephirah.v1.LibrarianSephirahService/SearchImages"
	LibrarianSephirahService_GetImage_FullMethodName                      = "/librarian.sephirah.v1.LibrarianSephirahService/GetImage"
	LibrarianSephirahService_DownloadImage_FullMethodName                 = "/librarian.sephirah.v1.LibrarianSephirahService/DownloadImage"
	LibrarianSephirahService_CreateAppInfo_FullMethodName                 = "/librarian.sephirah.v1.LibrarianSephirahService/CreateAppInfo"
	LibrarianSephirahService_UpdateAppInfo_FullMethodName                 = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateAppInfo"
	LibrarianSephirahService_ListAppInfos_FullMethodName                  = "/librarian.sephirah.v1.LibrarianSephirahService/ListAppInfos"
	LibrarianSephirahService_MergeAppInfos_FullMethodName                 = "/librarian.sephirah.v1.LibrarianSephirahService/MergeAppInfos"
	LibrarianSephirahService_PickAppInfo_FullMethodName                   = "/librarian.sephirah.v1.LibrarianSephirahService/PickAppInfo"
	LibrarianSephirahService_SyncAppInfos_FullMethodName                  = "/librarian.sephirah.v1.LibrarianSephirahService/SyncAppInfos"
	LibrarianSephirahService_SyncAccountAppInfos_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/SyncAccountAppInfos"
	LibrarianSephirahService_SearchAppInfos_FullMethodName                = "/librarian.sephirah.v1.LibrarianSephirahService/SearchAppInfos"
	LibrarianSephirahService_SearchNewAppInfos_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/SearchNewAppInfos"
	LibrarianSephirahService_GetAppInfo_FullMethodName                    = "/librarian.sephirah.v1.LibrarianSephirahService/GetAppInfo"
	LibrarianSephirahService_GetBoundAppInfos_FullMethodName              = "/librarian.sephirah.v1.LibrarianSephirahService/GetBoundAppInfos"
	LibrarianSephirahService_PurchaseAppInfo_FullMethodName               = "/librarian.sephirah.v1.LibrarianSephirahService/PurchaseAppInfo"
	LibrarianSephirahService_GetPurchasedAppInfos_FullMethodName          = "/librarian.sephirah.v1.LibrarianSephirahService/GetPurchasedAppInfos"
	LibrarianSephirahService_CreateApp_FullMethodName                     = "/librarian.sephirah.v1.LibrarianSephirahService/CreateApp"
	LibrarianSephirahService_UpdateApp_FullMethodName                     = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateApp"
	LibrarianSephirahService_ListApps_FullMethodName                      = "/librarian.sephirah.v1.LibrarianSephirahService/ListApps"
	LibrarianSephirahService_AssignApp_FullMethodName                     = "/librarian.sephirah.v1.LibrarianSephirahService/AssignApp"
	LibrarianSephirahService_UnAssignApp_FullMethodName                   = "/librarian.sephirah.v1.LibrarianSephirahService/UnAssignApp"
	LibrarianSephirahService_ReportAppBinaries_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/ReportAppBinaries"
	LibrarianSephirahService_DownloadAppBinary_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/DownloadAppBinary"
	LibrarianSephirahService_CreateAppInst_FullMethodName                 = "/librarian.sephirah.v1.LibrarianSephirahService/CreateAppInst"
	LibrarianSephirahService_UpdateAppInst_FullMethodName                 = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateAppInst"
	LibrarianSephirahService_ListAppInsts_FullMethodName                  = "/librarian.sephirah.v1.LibrarianSephirahService/ListAppInsts"
	LibrarianSephirahService_AddAppInstRunTime_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/AddAppInstRunTime"
	LibrarianSephirahService_SumAppInstRunTime_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/SumAppInstRunTime"
	LibrarianSephirahService_UploadAppSaveFile_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/UploadAppSaveFile"
	LibrarianSephirahService_DownloadAppSaveFile_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/DownloadAppSaveFile"
	LibrarianSephirahService_ListAppSaveFiles_FullMethodName              = "/librarian.sephirah.v1.LibrarianSephirahService/ListAppSaveFiles"
	LibrarianSephirahService_RemoveAppSaveFile_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/RemoveAppSaveFile"
	LibrarianSephirahService_PinAppSaveFile_FullMethodName                = "/librarian.sephirah.v1.LibrarianSephirahService/PinAppSaveFile"
	LibrarianSephirahService_UnpinAppSaveFile_FullMethodName              = "/librarian.sephirah.v1.LibrarianSephirahService/UnpinAppSaveFile"
	LibrarianSephirahService_SetAppSaveFileCapacity_FullMethodName        = "/librarian.sephirah.v1.LibrarianSephirahService/SetAppSaveFileCapacity"
	LibrarianSephirahService_GetAppSaveFileCapacity_FullMethodName        = "/librarian.sephirah.v1.LibrarianSephirahService/GetAppSaveFileCapacity"
	LibrarianSephirahService_SetAppSaveFileCapacityDefault_FullMethodName = "/librarian.sephirah.v1.LibrarianSephirahService/SetAppSaveFileCapacityDefault"
	LibrarianSephirahService_GetAppSaveFileCapacityDefault_FullMethodName = "/librarian.sephirah.v1.LibrarianSephirahService/GetAppSaveFileCapacityDefault"
	LibrarianSephirahService_CreateSharedAppSave_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/CreateSharedAppSave"
	LibrarianSephirahService_UpdateSharedAppSave_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateSharedAppSave"
	LibrarianSephirahService_ListSharedAppSaves_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/ListSharedAppSaves"
	LibrarianSephirahService_RemoveSharedAppSave_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/RemoveSharedAppSave"
	LibrarianSephirahService_CreateSharedAppSaveFile_FullMethodName       = "/librarian.sephirah.v1.LibrarianSephirahService/CreateSharedAppSaveFile"
	LibrarianSephirahService_UpdateSharedAppSaveFile_FullMethodName       = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateSharedAppSaveFile"
	LibrarianSephirahService_ListSharedAppSaveFiles_FullMethodName        = "/librarian.sephirah.v1.LibrarianSephirahService/ListSharedAppSaveFiles"
	LibrarianSephirahService_RemoveSharedAppSaveFile_FullMethodName       = "/librarian.sephirah.v1.LibrarianSephirahService/RemoveSharedAppSaveFile"
	LibrarianSephirahService_ListAppCategories_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/ListAppCategories"
	LibrarianSephirahService_CreateAppCategory_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/CreateAppCategory"
	LibrarianSephirahService_UpdateAppCategory_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateAppCategory"
	LibrarianSephirahService_RemoveAppCategory_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/RemoveAppCategory"
	LibrarianSephirahService_CreateNotifyTarget_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/CreateNotifyTarget"
	LibrarianSephirahService_UpdateNotifyTarget_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateNotifyTarget"
	LibrarianSephirahService_ListNotifyTargets_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/ListNotifyTargets"
	LibrarianSephirahService_CreateNotifyFlow_FullMethodName              = "/librarian.sephirah.v1.LibrarianSephirahService/CreateNotifyFlow"
	LibrarianSephirahService_UpdateNotifyFlow_FullMethodName              = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateNotifyFlow"
	LibrarianSephirahService_ListNotifyFlows_FullMethodName               = "/librarian.sephirah.v1.LibrarianSephirahService/ListNotifyFlows"
	LibrarianSephirahService_ListSystemNotifications_FullMethodName       = "/librarian.sephirah.v1.LibrarianSephirahService/ListSystemNotifications"
	LibrarianSephirahService_UpdateSystemNotification_FullMethodName      = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateSystemNotification"
	LibrarianSephirahService_CreateFeedConfig_FullMethodName              = "/librarian.sephirah.v1.LibrarianSephirahService/CreateFeedConfig"
	LibrarianSephirahService_UpdateFeedConfig_FullMethodName              = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateFeedConfig"
	LibrarianSephirahService_ListFeedConfigs_FullMethodName               = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedConfigs"
	LibrarianSephirahService_ListFeedCategories_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedCategories"
	LibrarianSephirahService_ListFeedPlatforms_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedPlatforms"
	LibrarianSephirahService_ListFeedItems_FullMethodName                 = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedItems"
	LibrarianSephirahService_GroupFeedItems_FullMethodName                = "/librarian.sephirah.v1.LibrarianSephirahService/GroupFeedItems"
	LibrarianSephirahService_GetFeedItem_FullMethodName                   = "/librarian.sephirah.v1.LibrarianSephirahService/GetFeedItem"
	LibrarianSephirahService_GetBatchFeedItems_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/GetBatchFeedItems"
	LibrarianSephirahService_ReadFeedItem_FullMethodName                  = "/librarian.sephirah.v1.LibrarianSephirahService/ReadFeedItem"
	LibrarianSephirahService_CreateFeedItemCollection_FullMethodName      = "/librarian.sephirah.v1.LibrarianSephirahService/CreateFeedItemCollection"
	LibrarianSephirahService_UpdateFeedItemCollection_FullMethodName      = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateFeedItemCollection"
	LibrarianSephirahService_ListFeedItemCollections_FullMethodName       = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedItemCollections"
	LibrarianSephirahService_AddFeedItemToCollection_FullMethodName       = "/librarian.sephirah.v1.LibrarianSephirahService/AddFeedItemToCollection"
	LibrarianSephirahService_RemoveFeedItemFromCollection_FullMethodName  = "/librarian.sephirah.v1.LibrarianSephirahService/RemoveFeedItemFromCollection"
	LibrarianSephirahService_ListFeedItemsInCollection_FullMethodName     = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedItemsInCollection"
	LibrarianSephirahService_CreateTag_FullMethodName                     = "/librarian.sephirah.v1.LibrarianSephirahService/CreateTag"
	LibrarianSephirahService_UpdateTag_FullMethodName                     = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateTag"
	LibrarianSephirahService_ListTags_FullMethodName                      = "/librarian.sephirah.v1.LibrarianSephirahService/ListTags"
)

// LibrarianSephirahServiceClient is the client API for LibrarianSephirahService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Sephirah contains the core logic and currently divided into the following modules:
// 1. `Tiphereth` handles account data and provides permission verification
// 2. `Gebura` handles application data
// 3. `Binah` handles file transfer
// 4. `Yesod` handles feed data
// 5. `Netzach` handles notifications
type LibrarianSephirahServiceClient interface {
	// Allow anonymous call, use accessToken to get complete information
	GetServerInformation(ctx context.Context, in *GetServerInformationRequest, opts ...grpc.CallOption) (*GetServerInformationResponse, error)
	// `Normal` Client can use this to subscribe to server events.
	//
	// Server should send `SERVER_EVENT_LISTENER_CONNECTED` event immediately if the connection is valid.
	// Otherwise, client should treat the connection as failed.
	//
	// Server can close the stream at any time, client should reconnect if needed **with backoff**.
	// Only used to improve real-time experience, no guarantee of delivery.
	ListenServerEvent(ctx context.Context, in *ListenServerEventRequest, opts ...grpc.CallOption) (LibrarianSephirahService_ListenServerEventClient, error)
	// `Tiphereth` `Normal` Login via password and get two token
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	// `Tiphereth` `Normal` `Sentinel` `Porter` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// `Tiphereth` `Porter` Get access_token of another user with allowed privilege
	GainUserPrivilege(ctx context.Context, in *GainUserPrivilegeRequest, opts ...grpc.CallOption) (*GainUserPrivilegeResponse, error)
	// `Tiphereth` Self register as a new normal user
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	// `Tiphereth` `Normal` Client should register device after the first login
	// and store the device_id locally.
	// The server could add extra limits to non-registered device
	RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error)
	// `Tiphereth` `Normal`
	ListRegisteredDevices(ctx context.Context, in *ListRegisteredDevicesRequest, opts ...grpc.CallOption) (*ListRegisteredDevicesResponse, error)
	// `Tiphereth` `Normal`
	ListUserSessions(ctx context.Context, in *ListUserSessionsRequest, opts ...grpc.CallOption) (*ListUserSessionsResponse, error)
	// `Tiphereth` `Normal` delete session will revoke refresh_token immediately.
	// NOTE: This can also be used to log out at server side.
	// NOTE2: Delete session will not affect device registration.
	DeleteUserSession(ctx context.Context, in *DeleteUserSessionRequest, opts ...grpc.CallOption) (*DeleteUserSessionResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// `Tiphereth` `Normal` Bind third-party account to current user.
	// Create (account)<-[Equal]->(current user)
	LinkAccount(ctx context.Context, in *LinkAccountRequest, opts ...grpc.CallOption) (*LinkAccountResponse, error)
	// `Tiphereth` `Normal` Unbind third-party account from current user.
	// Delete (account)<-[Equal]->(current user)
	UnLinkAccount(ctx context.Context, in *UnLinkAccountRequest, opts ...grpc.CallOption) (*UnLinkAccountResponse, error)
	// `Tiphereth` `Normal` List third-party account binded to current user.
	// Match ()<-[Equal]->(current user)
	ListLinkAccounts(ctx context.Context, in *ListLinkAccountsRequest, opts ...grpc.CallOption) (*ListLinkAccountsResponse, error)
	// `Tiphereth` `Normal`
	ListPorters(ctx context.Context, in *ListPortersRequest, opts ...grpc.CallOption) (*ListPortersResponse, error)
	// `Tiphereth` `Admin`
	UpdatePorterStatus(ctx context.Context, in *UpdatePorterStatusRequest, opts ...grpc.CallOption) (*UpdatePorterStatusResponse, error)
	// `Tiphereth` `Normal only` Set porter privilege, default none privilege.
	UpdatePorterPrivilege(ctx context.Context, in *UpdatePorterPrivilegeRequest, opts ...grpc.CallOption) (*UpdatePorterPrivilegeResponse, error)
	// `Binah` `Admin`
	SetFileCapacity(ctx context.Context, in *SetFileCapacityRequest, opts ...grpc.CallOption) (*SetFileCapacityResponse, error)
	// `Binah` `Admin` `Normal limited`
	GetFileCapacity(ctx context.Context, in *GetFileCapacityRequest, opts ...grpc.CallOption) (*GetFileCapacityResponse, error)
	// `Binah` `upload_token`
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_UploadFileClient, error)
	// `Binah` `download_token`
	DownloadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_DownloadFileClient, error)
	// `Binah` `upload_token`
	// Maximum 256M
	// Server must send response at least once a minute to keepalive.
	// Client should ignore in_process response and wait for success or error response.
	SimpleUploadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_SimpleUploadFileClient, error)
	// `Binah` `download_token`
	// Server will not check the receiving state
	SimpleDownloadFile(ctx context.Context, in *SimpleDownloadFileRequest, opts ...grpc.CallOption) (LibrarianSephirahService_SimpleDownloadFileClient, error)
	// `Binah` `upload_token`
	// Upload file through http url
	PresignedUploadFile(ctx context.Context, in *PresignedUploadFileRequest, opts ...grpc.CallOption) (*PresignedUploadFileResponse, error)
	// `Binah` `upload_token`
	// Report file transfer status. Mainly used to trigger server post-process immediately
	PresignedUploadFileStatus(ctx context.Context, in *PresignedUploadFileStatusRequest, opts ...grpc.CallOption) (*PresignedUploadFileStatusResponse, error)
	// `Binah` `download_token`
	// Download file through http url
	PresignedDownloadFile(ctx context.Context, in *PresignedDownloadFileRequest, opts ...grpc.CallOption) (*PresignedDownloadFileResponse, error)
	// `Chesed` `Normal`
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	// `Chesed` `Normal`
	UpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*UpdateImageResponse, error)
	// `Chesed` `Normal`
	ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error)
	// `Chesed` `Normal`
	SearchImages(ctx context.Context, in *SearchImagesRequest, opts ...grpc.CallOption) (*SearchImagesResponse, error)
	// `Chesed` `Normal`
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error)
	// `Chesed` `Normal`
	DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error)
	// `Gebura` `Admin`
	CreateAppInfo(ctx context.Context, in *CreateAppInfoRequest, opts ...grpc.CallOption) (*CreateAppInfoResponse, error)
	// `Gebura` `Admin`
	UpdateAppInfo(ctx context.Context, in *UpdateAppInfoRequest, opts ...grpc.CallOption) (*UpdateAppInfoResponse, error)
	// `Gebura` `Admin` Used to manage app info
	ListAppInfos(ctx context.Context, in *ListAppInfosRequest, opts ...grpc.CallOption) (*ListAppInfosResponse, error)
	// `Gebura` `Admin` Merge two app infos
	MergeAppInfos(ctx context.Context, in *MergeAppInfosRequest, opts ...grpc.CallOption) (*MergeAppInfosResponse, error)
	// `Gebura` `Admin` Pick one app info out from merged
	PickAppInfo(ctx context.Context, in *PickAppInfoRequest, opts ...grpc.CallOption) (*PickAppInfoResponse, error)
	// `Gebura` `Normal` Asynchronous update app infos.
	// Request on INTERNAL app info applies to all bound external app infos.
	// Create an INTERNAL app info when requested external app info does not exist
	// Server should implement a sync rate limit to prevent abuse,
	// when rate limit reached, return without real sync.
	SyncAppInfos(ctx context.Context, in *SyncAppInfosRequest, opts ...grpc.CallOption) (*SyncAppInfosResponse, error)
	// `Gebura` `Normal` Asynchronously update app infos associated with an account.
	// Create an INTERNAL app info when associated external app info does not exist.
	// Server should implement a sync rate limit to prevent abuse,
	// when rate limit reached, return without real sync.
	SyncAccountAppInfos(ctx context.Context, in *SyncAccountAppInfosRequest, opts ...grpc.CallOption) (*SyncAccountAppInfosResponse, error)
	// `Gebura` `Normal` Search app infos that already exist in server
	SearchAppInfos(ctx context.Context, in *SearchAppInfosRequest, opts ...grpc.CallOption) (*SearchAppInfosResponse, error)
	// `Gebura` `Normal` Search new app infos from external
	SearchNewAppInfos(ctx context.Context, in *SearchNewAppInfosRequest, opts ...grpc.CallOption) (*SearchNewAppInfosResponse, error)
	// `Gebura` `Normal` Flattened app info, data priority is 1.INTERNAL, 2.STEAM.
	// e.g. `id` will always from INTERNAL, `description` may from STEAM if it is empty in INTERNAL
	GetAppInfo(ctx context.Context, in *GetAppInfoRequest, opts ...grpc.CallOption) (*GetAppInfoResponse, error)
	// `Gebura` `Normal` Original bound apps info of required app
	GetBoundAppInfos(ctx context.Context, in *GetBoundAppInfosRequest, opts ...grpc.CallOption) (*GetBoundAppInfosResponse, error)
	// `Gebura` `Normal`
	PurchaseAppInfo(ctx context.Context, in *PurchaseAppInfoRequest, opts ...grpc.CallOption) (*PurchaseAppInfoResponse, error)
	// `Gebura` `Normal`
	// Default get user purchased apps
	// Use `source` to get purchase info from bound account
	// only support steam
	GetPurchasedAppInfos(ctx context.Context, in *GetPurchasedAppInfosRequest, opts ...grpc.CallOption) (*GetPurchasedAppInfosResponse, error)
	// `Gebura` `Normal`
	CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error)
	// `Gebura` `Normal`
	UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error)
	// `Gebura` `Normal`
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error)
	// `Gebura` `Normal`
	AssignApp(ctx context.Context, in *AssignAppRequest, opts ...grpc.CallOption) (*AssignAppResponse, error)
	// `Gebura` `Normal`
	UnAssignApp(ctx context.Context, in *UnAssignAppRequest, opts ...grpc.CallOption) (*UnAssignAppResponse, error)
	// `Gebura` `Sentinel`
	// Full update, changes are handled by librarian
	ReportAppBinaries(ctx context.Context, in *ReportAppBinariesRequest, opts ...grpc.CallOption) (*ReportAppBinariesResponse, error)
	// `Gebura` `Normal`
	DownloadAppBinary(ctx context.Context, in *DownloadAppBinaryRequest, opts ...grpc.CallOption) (*DownloadAppBinaryResponse, error)
	// `Gebura` `Normal`
	CreateAppInst(ctx context.Context, in *CreateAppInstRequest, opts ...grpc.CallOption) (*CreateAppInstResponse, error)
	// `Gebura` `Normal`
	UpdateAppInst(ctx context.Context, in *UpdateAppInstRequest, opts ...grpc.CallOption) (*UpdateAppInstResponse, error)
	// `Gebura` `Normal`
	ListAppInsts(ctx context.Context, in *ListAppInstsRequest, opts ...grpc.CallOption) (*ListAppInstsResponse, error)
	// `Gebura` `Normal`
	AddAppInstRunTime(ctx context.Context, in *AddAppInstRunTimeRequest, opts ...grpc.CallOption) (*AddAppInstRunTimeResponse, error)
	// `Gebura` `Normal` Only support AGGREGATION_TYPE_OVERALL
	SumAppInstRunTime(ctx context.Context, in *SumAppInstRunTimeRequest, opts ...grpc.CallOption) (*SumAppInstRunTimeResponse, error)
	// `Gebura` `Normal`
	UploadAppSaveFile(ctx context.Context, in *UploadAppSaveFileRequest, opts ...grpc.CallOption) (*UploadAppSaveFileResponse, error)
	// `Gebura` `Normal`
	DownloadAppSaveFile(ctx context.Context, in *DownloadAppSaveFileRequest, opts ...grpc.CallOption) (*DownloadAppSaveFileResponse, error)
	// `Gebura` `Normal`
	ListAppSaveFiles(ctx context.Context, in *ListAppSaveFilesRequest, opts ...grpc.CallOption) (*ListAppSaveFilesResponse, error)
	// `Gebura` `Normal`
	RemoveAppSaveFile(ctx context.Context, in *RemoveAppSaveFileRequest, opts ...grpc.CallOption) (*RemoveAppSaveFileResponse, error)
	// `Gebura` `Normal`
	PinAppSaveFile(ctx context.Context, in *PinAppSaveFileRequest, opts ...grpc.CallOption) (*PinAppSaveFileResponse, error)
	// `Gebura` `Normal`
	UnpinAppSaveFile(ctx context.Context, in *UnpinAppSaveFileRequest, opts ...grpc.CallOption) (*UnpinAppSaveFileResponse, error)
	// `Gebura` `Normal`
	SetAppSaveFileCapacity(ctx context.Context, in *SetAppSaveFileCapacityRequest, opts ...grpc.CallOption) (*SetAppSaveFileCapacityResponse, error)
	// `Gebura` `Normal`
	GetAppSaveFileCapacity(ctx context.Context, in *GetAppSaveFileCapacityRequest, opts ...grpc.CallOption) (*GetAppSaveFileCapacityResponse, error)
	// `Gebura` `Normal`
	SetAppSaveFileCapacityDefault(ctx context.Context, in *SetAppSaveFileCapacityDefaultRequest, opts ...grpc.CallOption) (*SetAppSaveFileCapacityDefaultResponse, error)
	// `Gebura` `Normal`
	GetAppSaveFileCapacityDefault(ctx context.Context, in *GetAppSaveFileCapacityDefaultRequest, opts ...grpc.CallOption) (*GetAppSaveFileCapacityDefaultResponse, error)
	// `Gebura` `Admin`
	CreateSharedAppSave(ctx context.Context, in *CreateSharedAppSaveRequest, opts ...grpc.CallOption) (*CreateSharedAppSaveResponse, error)
	// `Gebura` `Admin`
	UpdateSharedAppSave(ctx context.Context, in *UpdateSharedAppSaveRequest, opts ...grpc.CallOption) (*UpdateSharedAppSaveResponse, error)
	// `Gebura` `Normal`
	ListSharedAppSaves(ctx context.Context, in *ListSharedAppSavesRequest, opts ...grpc.CallOption) (*ListSharedAppSavesResponse, error)
	// `Gebura` `Admin`
	RemoveSharedAppSave(ctx context.Context, in *RemoveSharedAppSaveRequest, opts ...grpc.CallOption) (*RemoveSharedAppSaveResponse, error)
	// `Gebura` `Admin` `Normal limited`
	CreateSharedAppSaveFile(ctx context.Context, in *CreateSharedAppSaveFileRequest, opts ...grpc.CallOption) (*CreateSharedAppSaveFileResponse, error)
	// `Gebura` `Admin` `Normal limited`
	UpdateSharedAppSaveFile(ctx context.Context, in *UpdateSharedAppSaveFileRequest, opts ...grpc.CallOption) (*UpdateSharedAppSaveFileResponse, error)
	// `Gebura` `Normal`
	ListSharedAppSaveFiles(ctx context.Context, in *ListSharedAppSaveFilesRequest, opts ...grpc.CallOption) (*ListSharedAppSaveFilesResponse, error)
	// `Gebura` `Admin` `Normal limited`
	RemoveSharedAppSaveFile(ctx context.Context, in *RemoveSharedAppSaveFileRequest, opts ...grpc.CallOption) (*RemoveSharedAppSaveFileResponse, error)
	// `Gebura` `Normal`
	ListAppCategories(ctx context.Context, in *ListAppCategoriesRequest, opts ...grpc.CallOption) (*ListAppCategoriesResponse, error)
	// `Gebura` `Normal`
	CreateAppCategory(ctx context.Context, in *CreateAppCategoryRequest, opts ...grpc.CallOption) (*CreateAppCategoryResponse, error)
	// `Gebura` `Normal`
	UpdateAppCategory(ctx context.Context, in *UpdateAppCategoryRequest, opts ...grpc.CallOption) (*UpdateAppCategoryResponse, error)
	// `Gebura` `Normal`
	RemoveAppCategory(ctx context.Context, in *RemoveAppCategoryRequest, opts ...grpc.CallOption) (*RemoveAppCategoryResponse, error)
	// `Netzach` `Normal`
	CreateNotifyTarget(ctx context.Context, in *CreateNotifyTargetRequest, opts ...grpc.CallOption) (*CreateNotifyTargetResponse, error)
	// `Netzach` `Normal`
	UpdateNotifyTarget(ctx context.Context, in *UpdateNotifyTargetRequest, opts ...grpc.CallOption) (*UpdateNotifyTargetResponse, error)
	// `Netzach` `Normal`
	ListNotifyTargets(ctx context.Context, in *ListNotifyTargetsRequest, opts ...grpc.CallOption) (*ListNotifyTargetsResponse, error)
	// `Netzach` `Normal`
	CreateNotifyFlow(ctx context.Context, in *CreateNotifyFlowRequest, opts ...grpc.CallOption) (*CreateNotifyFlowResponse, error)
	// `Netzach` `Normal`
	UpdateNotifyFlow(ctx context.Context, in *UpdateNotifyFlowRequest, opts ...grpc.CallOption) (*UpdateNotifyFlowResponse, error)
	// `Netzach` `Normal`
	ListNotifyFlows(ctx context.Context, in *ListNotifyFlowsRequest, opts ...grpc.CallOption) (*ListNotifyFlowsResponse, error)
	// `Netzach` `Admin` `Normal limited`
	ListSystemNotifications(ctx context.Context, in *ListSystemNotificationsRequest, opts ...grpc.CallOption) (*ListSystemNotificationsResponse, error)
	// `Netzach` `Normal`
	UpdateSystemNotification(ctx context.Context, in *UpdateSystemNotificationRequest, opts ...grpc.CallOption) (*UpdateSystemNotificationResponse, error)
	// `Yesod` `Normal`
	CreateFeedConfig(ctx context.Context, in *CreateFeedConfigRequest, opts ...grpc.CallOption) (*CreateFeedConfigResponse, error)
	// `Yesod` `Normal`
	UpdateFeedConfig(ctx context.Context, in *UpdateFeedConfigRequest, opts ...grpc.CallOption) (*UpdateFeedConfigResponse, error)
	// `Yesod` `Normal`
	ListFeedConfigs(ctx context.Context, in *ListFeedConfigsRequest, opts ...grpc.CallOption) (*ListFeedConfigsResponse, error)
	// `Yesod` `Normal`
	ListFeedCategories(ctx context.Context, in *ListFeedCategoriesRequest, opts ...grpc.CallOption) (*ListFeedCategoriesResponse, error)
	// `Yesod` `Normal`
	ListFeedPlatforms(ctx context.Context, in *ListFeedPlatformsRequest, opts ...grpc.CallOption) (*ListFeedPlatformsResponse, error)
	// `Yesod` `Normal`
	ListFeedItems(ctx context.Context, in *ListFeedItemsRequest, opts ...grpc.CallOption) (*ListFeedItemsResponse, error)
	// `Yesod` `Normal`
	GroupFeedItems(ctx context.Context, in *GroupFeedItemsRequest, opts ...grpc.CallOption) (*GroupFeedItemsResponse, error)
	// `Yesod` `Normal`
	GetFeedItem(ctx context.Context, in *GetFeedItemRequest, opts ...grpc.CallOption) (*GetFeedItemResponse, error)
	// `Yesod` `Normal`
	GetBatchFeedItems(ctx context.Context, in *GetBatchFeedItemsRequest, opts ...grpc.CallOption) (*GetBatchFeedItemsResponse, error)
	// `Yesod` `Normal`
	ReadFeedItem(ctx context.Context, in *ReadFeedItemRequest, opts ...grpc.CallOption) (*ReadFeedItemResponse, error)
	// `Yesod` `Normal`
	CreateFeedItemCollection(ctx context.Context, in *CreateFeedItemCollectionRequest, opts ...grpc.CallOption) (*CreateFeedItemCollectionResponse, error)
	// `Yesod` `Normal`
	UpdateFeedItemCollection(ctx context.Context, in *UpdateFeedItemCollectionRequest, opts ...grpc.CallOption) (*UpdateFeedItemCollectionResponse, error)
	// `Yesod` `Normal`
	ListFeedItemCollections(ctx context.Context, in *ListFeedItemCollectionsRequest, opts ...grpc.CallOption) (*ListFeedItemCollectionsResponse, error)
	// `Yesod` `Normal`
	AddFeedItemToCollection(ctx context.Context, in *AddFeedItemToCollectionRequest, opts ...grpc.CallOption) (*AddFeedItemToCollectionResponse, error)
	// `Yesod` `Normal`
	RemoveFeedItemFromCollection(ctx context.Context, in *RemoveFeedItemFromCollectionRequest, opts ...grpc.CallOption) (*RemoveFeedItemFromCollectionResponse, error)
	// `Yesod` `Normal`
	ListFeedItemsInCollection(ctx context.Context, in *ListFeedItemsInCollectionRequest, opts ...grpc.CallOption) (*ListFeedItemsInCollectionResponse, error)
	// `Hokma` `Normal`
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error)
	// `Hokma` `Normal`
	UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error)
	// `Hokma` `Normal`
	ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error)
}

type librarianSephirahServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibrarianSephirahServiceClient(cc grpc.ClientConnInterface) LibrarianSephirahServiceClient {
	return &librarianSephirahServiceClient{cc}
}

func (c *librarianSephirahServiceClient) GetServerInformation(ctx context.Context, in *GetServerInformationRequest, opts ...grpc.CallOption) (*GetServerInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServerInformationResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetServerInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListenServerEvent(ctx context.Context, in *ListenServerEventRequest, opts ...grpc.CallOption) (LibrarianSephirahService_ListenServerEventClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[0], LibrarianSephirahService_ListenServerEvent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceListenServerEventClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LibrarianSephirahService_ListenServerEventClient interface {
	Recv() (*ListenServerEventResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceListenServerEventClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceListenServerEventClient) Recv() (*ListenServerEventResponse, error) {
	m := new(ListenServerEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GainUserPrivilege(ctx context.Context, in *GainUserPrivilegeRequest, opts ...grpc.CallOption) (*GainUserPrivilegeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GainUserPrivilegeResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GainUserPrivilege_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterDeviceResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RegisterDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListRegisteredDevices(ctx context.Context, in *ListRegisteredDevicesRequest, opts ...grpc.CallOption) (*ListRegisteredDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRegisteredDevicesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListRegisteredDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListUserSessions(ctx context.Context, in *ListUserSessionsRequest, opts ...grpc.CallOption) (*ListUserSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserSessionsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListUserSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) DeleteUserSession(ctx context.Context, in *DeleteUserSessionRequest, opts ...grpc.CallOption) (*DeleteUserSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserSessionResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_DeleteUserSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) LinkAccount(ctx context.Context, in *LinkAccountRequest, opts ...grpc.CallOption) (*LinkAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkAccountResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_LinkAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UnLinkAccount(ctx context.Context, in *UnLinkAccountRequest, opts ...grpc.CallOption) (*UnLinkAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnLinkAccountResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UnLinkAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListLinkAccounts(ctx context.Context, in *ListLinkAccountsRequest, opts ...grpc.CallOption) (*ListLinkAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLinkAccountsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListLinkAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListPorters(ctx context.Context, in *ListPortersRequest, opts ...grpc.CallOption) (*ListPortersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPortersResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListPorters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdatePorterStatus(ctx context.Context, in *UpdatePorterStatusRequest, opts ...grpc.CallOption) (*UpdatePorterStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePorterStatusResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdatePorterStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdatePorterPrivilege(ctx context.Context, in *UpdatePorterPrivilegeRequest, opts ...grpc.CallOption) (*UpdatePorterPrivilegeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePorterPrivilegeResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdatePorterPrivilege_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SetFileCapacity(ctx context.Context, in *SetFileCapacityRequest, opts ...grpc.CallOption) (*SetFileCapacityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetFileCapacityResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SetFileCapacity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetFileCapacity(ctx context.Context, in *GetFileCapacityRequest, opts ...grpc.CallOption) (*GetFileCapacityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileCapacityResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetFileCapacity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_UploadFileClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[1], LibrarianSephirahService_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceUploadFileClient{ClientStream: stream}
	return x, nil
}

type LibrarianSephirahService_UploadFileClient interface {
	Send(*UploadFileRequest) error
	Recv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianSephirahServiceUploadFileClient) Recv() (*UploadFileResponse, error) {
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) DownloadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_DownloadFileClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[2], LibrarianSephirahService_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceDownloadFileClient{ClientStream: stream}
	return x, nil
}

type LibrarianSephirahService_DownloadFileClient interface {
	Send(*DownloadFileRequest) error
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceDownloadFileClient) Send(m *DownloadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianSephirahServiceDownloadFileClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) SimpleUploadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_SimpleUploadFileClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[3], LibrarianSephirahService_SimpleUploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceSimpleUploadFileClient{ClientStream: stream}
	return x, nil
}

type LibrarianSephirahService_SimpleUploadFileClient interface {
	Send(*SimpleUploadFileRequest) error
	Recv() (*SimpleUploadFileResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceSimpleUploadFileClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceSimpleUploadFileClient) Send(m *SimpleUploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianSephirahServiceSimpleUploadFileClient) Recv() (*SimpleUploadFileResponse, error) {
	m := new(SimpleUploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) SimpleDownloadFile(ctx context.Context, in *SimpleDownloadFileRequest, opts ...grpc.CallOption) (LibrarianSephirahService_SimpleDownloadFileClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[4], LibrarianSephirahService_SimpleDownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceSimpleDownloadFileClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LibrarianSephirahService_SimpleDownloadFileClient interface {
	Recv() (*SimpleDownloadFileResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceSimpleDownloadFileClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceSimpleDownloadFileClient) Recv() (*SimpleDownloadFileResponse, error) {
	m := new(SimpleDownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) PresignedUploadFile(ctx context.Context, in *PresignedUploadFileRequest, opts ...grpc.CallOption) (*PresignedUploadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PresignedUploadFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_PresignedUploadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) PresignedUploadFileStatus(ctx context.Context, in *PresignedUploadFileStatusRequest, opts ...grpc.CallOption) (*PresignedUploadFileStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PresignedUploadFileStatusResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_PresignedUploadFileStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) PresignedDownloadFile(ctx context.Context, in *PresignedDownloadFileRequest, opts ...grpc.CallOption) (*PresignedDownloadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PresignedDownloadFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_PresignedDownloadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UploadImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*UpdateImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateImageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListImagesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SearchImages(ctx context.Context, in *SearchImagesRequest, opts ...grpc.CallOption) (*SearchImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchImagesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SearchImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadImageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_DownloadImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateAppInfo(ctx context.Context, in *CreateAppInfoRequest, opts ...grpc.CallOption) (*CreateAppInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAppInfoResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateAppInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateAppInfo(ctx context.Context, in *UpdateAppInfoRequest, opts ...grpc.CallOption) (*UpdateAppInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAppInfoResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateAppInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListAppInfos(ctx context.Context, in *ListAppInfosRequest, opts ...grpc.CallOption) (*ListAppInfosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppInfosResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListAppInfos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) MergeAppInfos(ctx context.Context, in *MergeAppInfosRequest, opts ...grpc.CallOption) (*MergeAppInfosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MergeAppInfosResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_MergeAppInfos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) PickAppInfo(ctx context.Context, in *PickAppInfoRequest, opts ...grpc.CallOption) (*PickAppInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PickAppInfoResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_PickAppInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SyncAppInfos(ctx context.Context, in *SyncAppInfosRequest, opts ...grpc.CallOption) (*SyncAppInfosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncAppInfosResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SyncAppInfos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SyncAccountAppInfos(ctx context.Context, in *SyncAccountAppInfosRequest, opts ...grpc.CallOption) (*SyncAccountAppInfosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncAccountAppInfosResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SyncAccountAppInfos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SearchAppInfos(ctx context.Context, in *SearchAppInfosRequest, opts ...grpc.CallOption) (*SearchAppInfosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchAppInfosResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SearchAppInfos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SearchNewAppInfos(ctx context.Context, in *SearchNewAppInfosRequest, opts ...grpc.CallOption) (*SearchNewAppInfosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchNewAppInfosResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SearchNewAppInfos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetAppInfo(ctx context.Context, in *GetAppInfoRequest, opts ...grpc.CallOption) (*GetAppInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppInfoResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetAppInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetBoundAppInfos(ctx context.Context, in *GetBoundAppInfosRequest, opts ...grpc.CallOption) (*GetBoundAppInfosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBoundAppInfosResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetBoundAppInfos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) PurchaseAppInfo(ctx context.Context, in *PurchaseAppInfoRequest, opts ...grpc.CallOption) (*PurchaseAppInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseAppInfoResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_PurchaseAppInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetPurchasedAppInfos(ctx context.Context, in *GetPurchasedAppInfosRequest, opts ...grpc.CallOption) (*GetPurchasedAppInfosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPurchasedAppInfosResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetPurchasedAppInfos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAppResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAppResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListApps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) AssignApp(ctx context.Context, in *AssignAppRequest, opts ...grpc.CallOption) (*AssignAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssignAppResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_AssignApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UnAssignApp(ctx context.Context, in *UnAssignAppRequest, opts ...grpc.CallOption) (*UnAssignAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnAssignAppResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UnAssignApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ReportAppBinaries(ctx context.Context, in *ReportAppBinariesRequest, opts ...grpc.CallOption) (*ReportAppBinariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportAppBinariesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ReportAppBinaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) DownloadAppBinary(ctx context.Context, in *DownloadAppBinaryRequest, opts ...grpc.CallOption) (*DownloadAppBinaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadAppBinaryResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_DownloadAppBinary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateAppInst(ctx context.Context, in *CreateAppInstRequest, opts ...grpc.CallOption) (*CreateAppInstResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAppInstResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateAppInst_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateAppInst(ctx context.Context, in *UpdateAppInstRequest, opts ...grpc.CallOption) (*UpdateAppInstResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAppInstResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateAppInst_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListAppInsts(ctx context.Context, in *ListAppInstsRequest, opts ...grpc.CallOption) (*ListAppInstsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppInstsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListAppInsts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) AddAppInstRunTime(ctx context.Context, in *AddAppInstRunTimeRequest, opts ...grpc.CallOption) (*AddAppInstRunTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAppInstRunTimeResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_AddAppInstRunTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SumAppInstRunTime(ctx context.Context, in *SumAppInstRunTimeRequest, opts ...grpc.CallOption) (*SumAppInstRunTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SumAppInstRunTimeResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SumAppInstRunTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UploadAppSaveFile(ctx context.Context, in *UploadAppSaveFileRequest, opts ...grpc.CallOption) (*UploadAppSaveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadAppSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UploadAppSaveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) DownloadAppSaveFile(ctx context.Context, in *DownloadAppSaveFileRequest, opts ...grpc.CallOption) (*DownloadAppSaveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadAppSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_DownloadAppSaveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListAppSaveFiles(ctx context.Context, in *ListAppSaveFilesRequest, opts ...grpc.CallOption) (*ListAppSaveFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppSaveFilesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListAppSaveFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RemoveAppSaveFile(ctx context.Context, in *RemoveAppSaveFileRequest, opts ...grpc.CallOption) (*RemoveAppSaveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAppSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RemoveAppSaveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) PinAppSaveFile(ctx context.Context, in *PinAppSaveFileRequest, opts ...grpc.CallOption) (*PinAppSaveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PinAppSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_PinAppSaveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UnpinAppSaveFile(ctx context.Context, in *UnpinAppSaveFileRequest, opts ...grpc.CallOption) (*UnpinAppSaveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnpinAppSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UnpinAppSaveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SetAppSaveFileCapacity(ctx context.Context, in *SetAppSaveFileCapacityRequest, opts ...grpc.CallOption) (*SetAppSaveFileCapacityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAppSaveFileCapacityResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SetAppSaveFileCapacity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetAppSaveFileCapacity(ctx context.Context, in *GetAppSaveFileCapacityRequest, opts ...grpc.CallOption) (*GetAppSaveFileCapacityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppSaveFileCapacityResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetAppSaveFileCapacity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SetAppSaveFileCapacityDefault(ctx context.Context, in *SetAppSaveFileCapacityDefaultRequest, opts ...grpc.CallOption) (*SetAppSaveFileCapacityDefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAppSaveFileCapacityDefaultResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SetAppSaveFileCapacityDefault_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetAppSaveFileCapacityDefault(ctx context.Context, in *GetAppSaveFileCapacityDefaultRequest, opts ...grpc.CallOption) (*GetAppSaveFileCapacityDefaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppSaveFileCapacityDefaultResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetAppSaveFileCapacityDefault_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateSharedAppSave(ctx context.Context, in *CreateSharedAppSaveRequest, opts ...grpc.CallOption) (*CreateSharedAppSaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSharedAppSaveResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateSharedAppSave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateSharedAppSave(ctx context.Context, in *UpdateSharedAppSaveRequest, opts ...grpc.CallOption) (*UpdateSharedAppSaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSharedAppSaveResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateSharedAppSave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListSharedAppSaves(ctx context.Context, in *ListSharedAppSavesRequest, opts ...grpc.CallOption) (*ListSharedAppSavesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSharedAppSavesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListSharedAppSaves_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RemoveSharedAppSave(ctx context.Context, in *RemoveSharedAppSaveRequest, opts ...grpc.CallOption) (*RemoveSharedAppSaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSharedAppSaveResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RemoveSharedAppSave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateSharedAppSaveFile(ctx context.Context, in *CreateSharedAppSaveFileRequest, opts ...grpc.CallOption) (*CreateSharedAppSaveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSharedAppSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateSharedAppSaveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateSharedAppSaveFile(ctx context.Context, in *UpdateSharedAppSaveFileRequest, opts ...grpc.CallOption) (*UpdateSharedAppSaveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSharedAppSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateSharedAppSaveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListSharedAppSaveFiles(ctx context.Context, in *ListSharedAppSaveFilesRequest, opts ...grpc.CallOption) (*ListSharedAppSaveFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSharedAppSaveFilesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListSharedAppSaveFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RemoveSharedAppSaveFile(ctx context.Context, in *RemoveSharedAppSaveFileRequest, opts ...grpc.CallOption) (*RemoveSharedAppSaveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSharedAppSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RemoveSharedAppSaveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListAppCategories(ctx context.Context, in *ListAppCategoriesRequest, opts ...grpc.CallOption) (*ListAppCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppCategoriesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListAppCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateAppCategory(ctx context.Context, in *CreateAppCategoryRequest, opts ...grpc.CallOption) (*CreateAppCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAppCategoryResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateAppCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateAppCategory(ctx context.Context, in *UpdateAppCategoryRequest, opts ...grpc.CallOption) (*UpdateAppCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAppCategoryResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateAppCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RemoveAppCategory(ctx context.Context, in *RemoveAppCategoryRequest, opts ...grpc.CallOption) (*RemoveAppCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAppCategoryResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RemoveAppCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateNotifyTarget(ctx context.Context, in *CreateNotifyTargetRequest, opts ...grpc.CallOption) (*CreateNotifyTargetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNotifyTargetResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateNotifyTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateNotifyTarget(ctx context.Context, in *UpdateNotifyTargetRequest, opts ...grpc.CallOption) (*UpdateNotifyTargetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNotifyTargetResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateNotifyTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListNotifyTargets(ctx context.Context, in *ListNotifyTargetsRequest, opts ...grpc.CallOption) (*ListNotifyTargetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotifyTargetsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListNotifyTargets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateNotifyFlow(ctx context.Context, in *CreateNotifyFlowRequest, opts ...grpc.CallOption) (*CreateNotifyFlowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNotifyFlowResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateNotifyFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateNotifyFlow(ctx context.Context, in *UpdateNotifyFlowRequest, opts ...grpc.CallOption) (*UpdateNotifyFlowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNotifyFlowResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateNotifyFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListNotifyFlows(ctx context.Context, in *ListNotifyFlowsRequest, opts ...grpc.CallOption) (*ListNotifyFlowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotifyFlowsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListNotifyFlows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListSystemNotifications(ctx context.Context, in *ListSystemNotificationsRequest, opts ...grpc.CallOption) (*ListSystemNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSystemNotificationsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListSystemNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateSystemNotification(ctx context.Context, in *UpdateSystemNotificationRequest, opts ...grpc.CallOption) (*UpdateSystemNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSystemNotificationResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateSystemNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateFeedConfig(ctx context.Context, in *CreateFeedConfigRequest, opts ...grpc.CallOption) (*CreateFeedConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFeedConfigResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateFeedConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateFeedConfig(ctx context.Context, in *UpdateFeedConfigRequest, opts ...grpc.CallOption) (*UpdateFeedConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFeedConfigResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateFeedConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedConfigs(ctx context.Context, in *ListFeedConfigsRequest, opts ...grpc.CallOption) (*ListFeedConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeedConfigsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedCategories(ctx context.Context, in *ListFeedCategoriesRequest, opts ...grpc.CallOption) (*ListFeedCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeedCategoriesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedPlatforms(ctx context.Context, in *ListFeedPlatformsRequest, opts ...grpc.CallOption) (*ListFeedPlatformsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeedPlatformsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedPlatforms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedItems(ctx context.Context, in *ListFeedItemsRequest, opts ...grpc.CallOption) (*ListFeedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeedItemsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GroupFeedItems(ctx context.Context, in *GroupFeedItemsRequest, opts ...grpc.CallOption) (*GroupFeedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GroupFeedItemsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GroupFeedItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetFeedItem(ctx context.Context, in *GetFeedItemRequest, opts ...grpc.CallOption) (*GetFeedItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedItemResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetFeedItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetBatchFeedItems(ctx context.Context, in *GetBatchFeedItemsRequest, opts ...grpc.CallOption) (*GetBatchFeedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBatchFeedItemsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetBatchFeedItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ReadFeedItem(ctx context.Context, in *ReadFeedItemRequest, opts ...grpc.CallOption) (*ReadFeedItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadFeedItemResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ReadFeedItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateFeedItemCollection(ctx context.Context, in *CreateFeedItemCollectionRequest, opts ...grpc.CallOption) (*CreateFeedItemCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFeedItemCollectionResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateFeedItemCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateFeedItemCollection(ctx context.Context, in *UpdateFeedItemCollectionRequest, opts ...grpc.CallOption) (*UpdateFeedItemCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFeedItemCollectionResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateFeedItemCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedItemCollections(ctx context.Context, in *ListFeedItemCollectionsRequest, opts ...grpc.CallOption) (*ListFeedItemCollectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeedItemCollectionsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedItemCollections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) AddFeedItemToCollection(ctx context.Context, in *AddFeedItemToCollectionRequest, opts ...grpc.CallOption) (*AddFeedItemToCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFeedItemToCollectionResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_AddFeedItemToCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RemoveFeedItemFromCollection(ctx context.Context, in *RemoveFeedItemFromCollectionRequest, opts ...grpc.CallOption) (*RemoveFeedItemFromCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFeedItemFromCollectionResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RemoveFeedItemFromCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedItemsInCollection(ctx context.Context, in *ListFeedItemsInCollectionRequest, opts ...grpc.CallOption) (*ListFeedItemsInCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeedItemsInCollectionResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedItemsInCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTagResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateTag(ctx context.Context, in *UpdateTagRequest, opts ...grpc.CallOption) (*UpdateTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTagResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTagsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibrarianSephirahServiceServer is the server API for LibrarianSephirahService service.
// All implementations must embed UnimplementedLibrarianSephirahServiceServer
// for forward compatibility
//
// Sephirah contains the core logic and currently divided into the following modules:
// 1. `Tiphereth` handles account data and provides permission verification
// 2. `Gebura` handles application data
// 3. `Binah` handles file transfer
// 4. `Yesod` handles feed data
// 5. `Netzach` handles notifications
type LibrarianSephirahServiceServer interface {
	// Allow anonymous call, use accessToken to get complete information
	GetServerInformation(context.Context, *GetServerInformationRequest) (*GetServerInformationResponse, error)
	// `Normal` Client can use this to subscribe to server events.
	//
	// Server should send `SERVER_EVENT_LISTENER_CONNECTED` event immediately if the connection is valid.
	// Otherwise, client should treat the connection as failed.
	//
	// Server can close the stream at any time, client should reconnect if needed **with backoff**.
	// Only used to improve real-time experience, no guarantee of delivery.
	ListenServerEvent(*ListenServerEventRequest, LibrarianSephirahService_ListenServerEventServer) error
	// `Tiphereth` `Normal` Login via password and get two token
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	// `Tiphereth` `Normal` `Sentinel` `Porter` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// `Tiphereth` `Porter` Get access_token of another user with allowed privilege
	GainUserPrivilege(context.Context, *GainUserPrivilegeRequest) (*GainUserPrivilegeResponse, error)
	// `Tiphereth` Self register as a new normal user
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	// `Tiphereth` `Normal` Client should register device after the first login
	// and store the device_id locally.
	// The server could add extra limits to non-registered device
	RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error)
	// `Tiphereth` `Normal`
	ListRegisteredDevices(context.Context, *ListRegisteredDevicesRequest) (*ListRegisteredDevicesResponse, error)
	// `Tiphereth` `Normal`
	ListUserSessions(context.Context, *ListUserSessionsRequest) (*ListUserSessionsResponse, error)
	// `Tiphereth` `Normal` delete session will revoke refresh_token immediately.
	// NOTE: This can also be used to log out at server side.
	// NOTE2: Delete session will not affect device registration.
	DeleteUserSession(context.Context, *DeleteUserSessionRequest) (*DeleteUserSessionResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// `Tiphereth` `Normal` Bind third-party account to current user.
	// Create (account)<-[Equal]->(current user)
	LinkAccount(context.Context, *LinkAccountRequest) (*LinkAccountResponse, error)
	// `Tiphereth` `Normal` Unbind third-party account from current user.
	// Delete (account)<-[Equal]->(current user)
	UnLinkAccount(context.Context, *UnLinkAccountRequest) (*UnLinkAccountResponse, error)
	// `Tiphereth` `Normal` List third-party account binded to current user.
	// Match ()<-[Equal]->(current user)
	ListLinkAccounts(context.Context, *ListLinkAccountsRequest) (*ListLinkAccountsResponse, error)
	// `Tiphereth` `Normal`
	ListPorters(context.Context, *ListPortersRequest) (*ListPortersResponse, error)
	// `Tiphereth` `Admin`
	UpdatePorterStatus(context.Context, *UpdatePorterStatusRequest) (*UpdatePorterStatusResponse, error)
	// `Tiphereth` `Normal only` Set porter privilege, default none privilege.
	UpdatePorterPrivilege(context.Context, *UpdatePorterPrivilegeRequest) (*UpdatePorterPrivilegeResponse, error)
	// `Binah` `Admin`
	SetFileCapacity(context.Context, *SetFileCapacityRequest) (*SetFileCapacityResponse, error)
	// `Binah` `Admin` `Normal limited`
	GetFileCapacity(context.Context, *GetFileCapacityRequest) (*GetFileCapacityResponse, error)
	// `Binah` `upload_token`
	UploadFile(LibrarianSephirahService_UploadFileServer) error
	// `Binah` `download_token`
	DownloadFile(LibrarianSephirahService_DownloadFileServer) error
	// `Binah` `upload_token`
	// Maximum 256M
	// Server must send response at least once a minute to keepalive.
	// Client should ignore in_process response and wait for success or error response.
	SimpleUploadFile(LibrarianSephirahService_SimpleUploadFileServer) error
	// `Binah` `download_token`
	// Server will not check the receiving state
	SimpleDownloadFile(*SimpleDownloadFileRequest, LibrarianSephirahService_SimpleDownloadFileServer) error
	// `Binah` `upload_token`
	// Upload file through http url
	PresignedUploadFile(context.Context, *PresignedUploadFileRequest) (*PresignedUploadFileResponse, error)
	// `Binah` `upload_token`
	// Report file transfer status. Mainly used to trigger server post-process immediately
	PresignedUploadFileStatus(context.Context, *PresignedUploadFileStatusRequest) (*PresignedUploadFileStatusResponse, error)
	// `Binah` `download_token`
	// Download file through http url
	PresignedDownloadFile(context.Context, *PresignedDownloadFileRequest) (*PresignedDownloadFileResponse, error)
	// `Chesed` `Normal`
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	// `Chesed` `Normal`
	UpdateImage(context.Context, *UpdateImageRequest) (*UpdateImageResponse, error)
	// `Chesed` `Normal`
	ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error)
	// `Chesed` `Normal`
	SearchImages(context.Context, *SearchImagesRequest) (*SearchImagesResponse, error)
	// `Chesed` `Normal`
	GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error)
	// `Chesed` `Normal`
	DownloadImage(context.Context, *DownloadImageRequest) (*DownloadImageResponse, error)
	// `Gebura` `Admin`
	CreateAppInfo(context.Context, *CreateAppInfoRequest) (*CreateAppInfoResponse, error)
	// `Gebura` `Admin`
	UpdateAppInfo(context.Context, *UpdateAppInfoRequest) (*UpdateAppInfoResponse, error)
	// `Gebura` `Admin` Used to manage app info
	ListAppInfos(context.Context, *ListAppInfosRequest) (*ListAppInfosResponse, error)
	// `Gebura` `Admin` Merge two app infos
	MergeAppInfos(context.Context, *MergeAppInfosRequest) (*MergeAppInfosResponse, error)
	// `Gebura` `Admin` Pick one app info out from merged
	PickAppInfo(context.Context, *PickAppInfoRequest) (*PickAppInfoResponse, error)
	// `Gebura` `Normal` Asynchronous update app infos.
	// Request on INTERNAL app info applies to all bound external app infos.
	// Create an INTERNAL app info when requested external app info does not exist
	// Server should implement a sync rate limit to prevent abuse,
	// when rate limit reached, return without real sync.
	SyncAppInfos(context.Context, *SyncAppInfosRequest) (*SyncAppInfosResponse, error)
	// `Gebura` `Normal` Asynchronously update app infos associated with an account.
	// Create an INTERNAL app info when associated external app info does not exist.
	// Server should implement a sync rate limit to prevent abuse,
	// when rate limit reached, return without real sync.
	SyncAccountAppInfos(context.Context, *SyncAccountAppInfosRequest) (*SyncAccountAppInfosResponse, error)
	// `Gebura` `Normal` Search app infos that already exist in server
	SearchAppInfos(context.Context, *SearchAppInfosRequest) (*SearchAppInfosResponse, error)
	// `Gebura` `Normal` Search new app infos from external
	SearchNewAppInfos(context.Context, *SearchNewAppInfosRequest) (*SearchNewAppInfosResponse, error)
	// `Gebura` `Normal` Flattened app info, data priority is 1.INTERNAL, 2.STEAM.
	// e.g. `id` will always from INTERNAL, `description` may from STEAM if it is empty in INTERNAL
	GetAppInfo(context.Context, *GetAppInfoRequest) (*GetAppInfoResponse, error)
	// `Gebura` `Normal` Original bound apps info of required app
	GetBoundAppInfos(context.Context, *GetBoundAppInfosRequest) (*GetBoundAppInfosResponse, error)
	// `Gebura` `Normal`
	PurchaseAppInfo(context.Context, *PurchaseAppInfoRequest) (*PurchaseAppInfoResponse, error)
	// `Gebura` `Normal`
	// Default get user purchased apps
	// Use `source` to get purchase info from bound account
	// only support steam
	GetPurchasedAppInfos(context.Context, *GetPurchasedAppInfosRequest) (*GetPurchasedAppInfosResponse, error)
	// `Gebura` `Normal`
	CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error)
	// `Gebura` `Normal`
	UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error)
	// `Gebura` `Normal`
	ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error)
	// `Gebura` `Normal`
	AssignApp(context.Context, *AssignAppRequest) (*AssignAppResponse, error)
	// `Gebura` `Normal`
	UnAssignApp(context.Context, *UnAssignAppRequest) (*UnAssignAppResponse, error)
	// `Gebura` `Sentinel`
	// Full update, changes are handled by librarian
	ReportAppBinaries(context.Context, *ReportAppBinariesRequest) (*ReportAppBinariesResponse, error)
	// `Gebura` `Normal`
	DownloadAppBinary(context.Context, *DownloadAppBinaryRequest) (*DownloadAppBinaryResponse, error)
	// `Gebura` `Normal`
	CreateAppInst(context.Context, *CreateAppInstRequest) (*CreateAppInstResponse, error)
	// `Gebura` `Normal`
	UpdateAppInst(context.Context, *UpdateAppInstRequest) (*UpdateAppInstResponse, error)
	// `Gebura` `Normal`
	ListAppInsts(context.Context, *ListAppInstsRequest) (*ListAppInstsResponse, error)
	// `Gebura` `Normal`
	AddAppInstRunTime(context.Context, *AddAppInstRunTimeRequest) (*AddAppInstRunTimeResponse, error)
	// `Gebura` `Normal` Only support AGGREGATION_TYPE_OVERALL
	SumAppInstRunTime(context.Context, *SumAppInstRunTimeRequest) (*SumAppInstRunTimeResponse, error)
	// `Gebura` `Normal`
	UploadAppSaveFile(context.Context, *UploadAppSaveFileRequest) (*UploadAppSaveFileResponse, error)
	// `Gebura` `Normal`
	DownloadAppSaveFile(context.Context, *DownloadAppSaveFileRequest) (*DownloadAppSaveFileResponse, error)
	// `Gebura` `Normal`
	ListAppSaveFiles(context.Context, *ListAppSaveFilesRequest) (*ListAppSaveFilesResponse, error)
	// `Gebura` `Normal`
	RemoveAppSaveFile(context.Context, *RemoveAppSaveFileRequest) (*RemoveAppSaveFileResponse, error)
	// `Gebura` `Normal`
	PinAppSaveFile(context.Context, *PinAppSaveFileRequest) (*PinAppSaveFileResponse, error)
	// `Gebura` `Normal`
	UnpinAppSaveFile(context.Context, *UnpinAppSaveFileRequest) (*UnpinAppSaveFileResponse, error)
	// `Gebura` `Normal`
	SetAppSaveFileCapacity(context.Context, *SetAppSaveFileCapacityRequest) (*SetAppSaveFileCapacityResponse, error)
	// `Gebura` `Normal`
	GetAppSaveFileCapacity(context.Context, *GetAppSaveFileCapacityRequest) (*GetAppSaveFileCapacityResponse, error)
	// `Gebura` `Normal`
	SetAppSaveFileCapacityDefault(context.Context, *SetAppSaveFileCapacityDefaultRequest) (*SetAppSaveFileCapacityDefaultResponse, error)
	// `Gebura` `Normal`
	GetAppSaveFileCapacityDefault(context.Context, *GetAppSaveFileCapacityDefaultRequest) (*GetAppSaveFileCapacityDefaultResponse, error)
	// `Gebura` `Admin`
	CreateSharedAppSave(context.Context, *CreateSharedAppSaveRequest) (*CreateSharedAppSaveResponse, error)
	// `Gebura` `Admin`
	UpdateSharedAppSave(context.Context, *UpdateSharedAppSaveRequest) (*UpdateSharedAppSaveResponse, error)
	// `Gebura` `Normal`
	ListSharedAppSaves(context.Context, *ListSharedAppSavesRequest) (*ListSharedAppSavesResponse, error)
	// `Gebura` `Admin`
	RemoveSharedAppSave(context.Context, *RemoveSharedAppSaveRequest) (*RemoveSharedAppSaveResponse, error)
	// `Gebura` `Admin` `Normal limited`
	CreateSharedAppSaveFile(context.Context, *CreateSharedAppSaveFileRequest) (*CreateSharedAppSaveFileResponse, error)
	// `Gebura` `Admin` `Normal limited`
	UpdateSharedAppSaveFile(context.Context, *UpdateSharedAppSaveFileRequest) (*UpdateSharedAppSaveFileResponse, error)
	// `Gebura` `Normal`
	ListSharedAppSaveFiles(context.Context, *ListSharedAppSaveFilesRequest) (*ListSharedAppSaveFilesResponse, error)
	// `Gebura` `Admin` `Normal limited`
	RemoveSharedAppSaveFile(context.Context, *RemoveSharedAppSaveFileRequest) (*RemoveSharedAppSaveFileResponse, error)
	// `Gebura` `Normal`
	ListAppCategories(context.Context, *ListAppCategoriesRequest) (*ListAppCategoriesResponse, error)
	// `Gebura` `Normal`
	CreateAppCategory(context.Context, *CreateAppCategoryRequest) (*CreateAppCategoryResponse, error)
	// `Gebura` `Normal`
	UpdateAppCategory(context.Context, *UpdateAppCategoryRequest) (*UpdateAppCategoryResponse, error)
	// `Gebura` `Normal`
	RemoveAppCategory(context.Context, *RemoveAppCategoryRequest) (*RemoveAppCategoryResponse, error)
	// `Netzach` `Normal`
	CreateNotifyTarget(context.Context, *CreateNotifyTargetRequest) (*CreateNotifyTargetResponse, error)
	// `Netzach` `Normal`
	UpdateNotifyTarget(context.Context, *UpdateNotifyTargetRequest) (*UpdateNotifyTargetResponse, error)
	// `Netzach` `Normal`
	ListNotifyTargets(context.Context, *ListNotifyTargetsRequest) (*ListNotifyTargetsResponse, error)
	// `Netzach` `Normal`
	CreateNotifyFlow(context.Context, *CreateNotifyFlowRequest) (*CreateNotifyFlowResponse, error)
	// `Netzach` `Normal`
	UpdateNotifyFlow(context.Context, *UpdateNotifyFlowRequest) (*UpdateNotifyFlowResponse, error)
	// `Netzach` `Normal`
	ListNotifyFlows(context.Context, *ListNotifyFlowsRequest) (*ListNotifyFlowsResponse, error)
	// `Netzach` `Admin` `Normal limited`
	ListSystemNotifications(context.Context, *ListSystemNotificationsRequest) (*ListSystemNotificationsResponse, error)
	// `Netzach` `Normal`
	UpdateSystemNotification(context.Context, *UpdateSystemNotificationRequest) (*UpdateSystemNotificationResponse, error)
	// `Yesod` `Normal`
	CreateFeedConfig(context.Context, *CreateFeedConfigRequest) (*CreateFeedConfigResponse, error)
	// `Yesod` `Normal`
	UpdateFeedConfig(context.Context, *UpdateFeedConfigRequest) (*UpdateFeedConfigResponse, error)
	// `Yesod` `Normal`
	ListFeedConfigs(context.Context, *ListFeedConfigsRequest) (*ListFeedConfigsResponse, error)
	// `Yesod` `Normal`
	ListFeedCategories(context.Context, *ListFeedCategoriesRequest) (*ListFeedCategoriesResponse, error)
	// `Yesod` `Normal`
	ListFeedPlatforms(context.Context, *ListFeedPlatformsRequest) (*ListFeedPlatformsResponse, error)
	// `Yesod` `Normal`
	ListFeedItems(context.Context, *ListFeedItemsRequest) (*ListFeedItemsResponse, error)
	// `Yesod` `Normal`
	GroupFeedItems(context.Context, *GroupFeedItemsRequest) (*GroupFeedItemsResponse, error)
	// `Yesod` `Normal`
	GetFeedItem(context.Context, *GetFeedItemRequest) (*GetFeedItemResponse, error)
	// `Yesod` `Normal`
	GetBatchFeedItems(context.Context, *GetBatchFeedItemsRequest) (*GetBatchFeedItemsResponse, error)
	// `Yesod` `Normal`
	ReadFeedItem(context.Context, *ReadFeedItemRequest) (*ReadFeedItemResponse, error)
	// `Yesod` `Normal`
	CreateFeedItemCollection(context.Context, *CreateFeedItemCollectionRequest) (*CreateFeedItemCollectionResponse, error)
	// `Yesod` `Normal`
	UpdateFeedItemCollection(context.Context, *UpdateFeedItemCollectionRequest) (*UpdateFeedItemCollectionResponse, error)
	// `Yesod` `Normal`
	ListFeedItemCollections(context.Context, *ListFeedItemCollectionsRequest) (*ListFeedItemCollectionsResponse, error)
	// `Yesod` `Normal`
	AddFeedItemToCollection(context.Context, *AddFeedItemToCollectionRequest) (*AddFeedItemToCollectionResponse, error)
	// `Yesod` `Normal`
	RemoveFeedItemFromCollection(context.Context, *RemoveFeedItemFromCollectionRequest) (*RemoveFeedItemFromCollectionResponse, error)
	// `Yesod` `Normal`
	ListFeedItemsInCollection(context.Context, *ListFeedItemsInCollectionRequest) (*ListFeedItemsInCollectionResponse, error)
	// `Hokma` `Normal`
	CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error)
	// `Hokma` `Normal`
	UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error)
	// `Hokma` `Normal`
	ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error)
	mustEmbedUnimplementedLibrarianSephirahServiceServer()
}

// UnimplementedLibrarianSephirahServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLibrarianSephirahServiceServer struct {
}

func (UnimplementedLibrarianSephirahServiceServer) GetServerInformation(context.Context, *GetServerInformationRequest) (*GetServerInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInformation not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListenServerEvent(*ListenServerEventRequest, LibrarianSephirahService_ListenServerEventServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenServerEvent not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GainUserPrivilege(context.Context, *GainUserPrivilegeRequest) (*GainUserPrivilegeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GainUserPrivilege not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListRegisteredDevices(context.Context, *ListRegisteredDevicesRequest) (*ListRegisteredDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegisteredDevices not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListUserSessions(context.Context, *ListUserSessionsRequest) (*ListUserSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserSessions not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DeleteUserSession(context.Context, *DeleteUserSessionRequest) (*DeleteUserSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserSession not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) LinkAccount(context.Context, *LinkAccountRequest) (*LinkAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkAccount not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UnLinkAccount(context.Context, *UnLinkAccountRequest) (*UnLinkAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLinkAccount not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListLinkAccounts(context.Context, *ListLinkAccountsRequest) (*ListLinkAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLinkAccounts not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListPorters(context.Context, *ListPortersRequest) (*ListPortersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPorters not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdatePorterStatus(context.Context, *UpdatePorterStatusRequest) (*UpdatePorterStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePorterStatus not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdatePorterPrivilege(context.Context, *UpdatePorterPrivilegeRequest) (*UpdatePorterPrivilegeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePorterPrivilege not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SetFileCapacity(context.Context, *SetFileCapacityRequest) (*SetFileCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFileCapacity not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetFileCapacity(context.Context, *GetFileCapacityRequest) (*GetFileCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileCapacity not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UploadFile(LibrarianSephirahService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DownloadFile(LibrarianSephirahService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SimpleUploadFile(LibrarianSephirahService_SimpleUploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SimpleUploadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SimpleDownloadFile(*SimpleDownloadFileRequest, LibrarianSephirahService_SimpleDownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SimpleDownloadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) PresignedUploadFile(context.Context, *PresignedUploadFileRequest) (*PresignedUploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresignedUploadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) PresignedUploadFileStatus(context.Context, *PresignedUploadFileStatusRequest) (*PresignedUploadFileStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresignedUploadFileStatus not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) PresignedDownloadFile(context.Context, *PresignedDownloadFileRequest) (*PresignedDownloadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresignedDownloadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateImage(context.Context, *UpdateImageRequest) (*UpdateImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImages not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SearchImages(context.Context, *SearchImagesRequest) (*SearchImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchImages not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DownloadImage(context.Context, *DownloadImageRequest) (*DownloadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadImage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateAppInfo(context.Context, *CreateAppInfoRequest) (*CreateAppInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppInfo not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateAppInfo(context.Context, *UpdateAppInfoRequest) (*UpdateAppInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppInfo not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListAppInfos(context.Context, *ListAppInfosRequest) (*ListAppInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppInfos not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) MergeAppInfos(context.Context, *MergeAppInfosRequest) (*MergeAppInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeAppInfos not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) PickAppInfo(context.Context, *PickAppInfoRequest) (*PickAppInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickAppInfo not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SyncAppInfos(context.Context, *SyncAppInfosRequest) (*SyncAppInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAppInfos not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SyncAccountAppInfos(context.Context, *SyncAccountAppInfosRequest) (*SyncAccountAppInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAccountAppInfos not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SearchAppInfos(context.Context, *SearchAppInfosRequest) (*SearchAppInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAppInfos not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SearchNewAppInfos(context.Context, *SearchNewAppInfosRequest) (*SearchNewAppInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNewAppInfos not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetAppInfo(context.Context, *GetAppInfoRequest) (*GetAppInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppInfo not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetBoundAppInfos(context.Context, *GetBoundAppInfosRequest) (*GetBoundAppInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoundAppInfos not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) PurchaseAppInfo(context.Context, *PurchaseAppInfoRequest) (*PurchaseAppInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseAppInfo not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetPurchasedAppInfos(context.Context, *GetPurchasedAppInfosRequest) (*GetPurchasedAppInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchasedAppInfos not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) AssignApp(context.Context, *AssignAppRequest) (*AssignAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UnAssignApp(context.Context, *UnAssignAppRequest) (*UnAssignAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnAssignApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ReportAppBinaries(context.Context, *ReportAppBinariesRequest) (*ReportAppBinariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAppBinaries not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DownloadAppBinary(context.Context, *DownloadAppBinaryRequest) (*DownloadAppBinaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadAppBinary not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateAppInst(context.Context, *CreateAppInstRequest) (*CreateAppInstResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppInst not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateAppInst(context.Context, *UpdateAppInstRequest) (*UpdateAppInstResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppInst not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListAppInsts(context.Context, *ListAppInstsRequest) (*ListAppInstsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppInsts not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) AddAppInstRunTime(context.Context, *AddAppInstRunTimeRequest) (*AddAppInstRunTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppInstRunTime not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SumAppInstRunTime(context.Context, *SumAppInstRunTimeRequest) (*SumAppInstRunTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SumAppInstRunTime not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UploadAppSaveFile(context.Context, *UploadAppSaveFileRequest) (*UploadAppSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAppSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DownloadAppSaveFile(context.Context, *DownloadAppSaveFileRequest) (*DownloadAppSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadAppSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListAppSaveFiles(context.Context, *ListAppSaveFilesRequest) (*ListAppSaveFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppSaveFiles not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RemoveAppSaveFile(context.Context, *RemoveAppSaveFileRequest) (*RemoveAppSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAppSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) PinAppSaveFile(context.Context, *PinAppSaveFileRequest) (*PinAppSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinAppSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UnpinAppSaveFile(context.Context, *UnpinAppSaveFileRequest) (*UnpinAppSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpinAppSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SetAppSaveFileCapacity(context.Context, *SetAppSaveFileCapacityRequest) (*SetAppSaveFileCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAppSaveFileCapacity not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetAppSaveFileCapacity(context.Context, *GetAppSaveFileCapacityRequest) (*GetAppSaveFileCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSaveFileCapacity not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SetAppSaveFileCapacityDefault(context.Context, *SetAppSaveFileCapacityDefaultRequest) (*SetAppSaveFileCapacityDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAppSaveFileCapacityDefault not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetAppSaveFileCapacityDefault(context.Context, *GetAppSaveFileCapacityDefaultRequest) (*GetAppSaveFileCapacityDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSaveFileCapacityDefault not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateSharedAppSave(context.Context, *CreateSharedAppSaveRequest) (*CreateSharedAppSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSharedAppSave not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateSharedAppSave(context.Context, *UpdateSharedAppSaveRequest) (*UpdateSharedAppSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSharedAppSave not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListSharedAppSaves(context.Context, *ListSharedAppSavesRequest) (*ListSharedAppSavesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSharedAppSaves not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RemoveSharedAppSave(context.Context, *RemoveSharedAppSaveRequest) (*RemoveSharedAppSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSharedAppSave not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateSharedAppSaveFile(context.Context, *CreateSharedAppSaveFileRequest) (*CreateSharedAppSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSharedAppSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateSharedAppSaveFile(context.Context, *UpdateSharedAppSaveFileRequest) (*UpdateSharedAppSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSharedAppSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListSharedAppSaveFiles(context.Context, *ListSharedAppSaveFilesRequest) (*ListSharedAppSaveFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSharedAppSaveFiles not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RemoveSharedAppSaveFile(context.Context, *RemoveSharedAppSaveFileRequest) (*RemoveSharedAppSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSharedAppSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListAppCategories(context.Context, *ListAppCategoriesRequest) (*ListAppCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppCategories not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateAppCategory(context.Context, *CreateAppCategoryRequest) (*CreateAppCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppCategory not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateAppCategory(context.Context, *UpdateAppCategoryRequest) (*UpdateAppCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppCategory not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RemoveAppCategory(context.Context, *RemoveAppCategoryRequest) (*RemoveAppCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAppCategory not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateNotifyTarget(context.Context, *CreateNotifyTargetRequest) (*CreateNotifyTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotifyTarget not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateNotifyTarget(context.Context, *UpdateNotifyTargetRequest) (*UpdateNotifyTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifyTarget not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListNotifyTargets(context.Context, *ListNotifyTargetsRequest) (*ListNotifyTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifyTargets not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateNotifyFlow(context.Context, *CreateNotifyFlowRequest) (*CreateNotifyFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotifyFlow not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateNotifyFlow(context.Context, *UpdateNotifyFlowRequest) (*UpdateNotifyFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifyFlow not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListNotifyFlows(context.Context, *ListNotifyFlowsRequest) (*ListNotifyFlowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifyFlows not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListSystemNotifications(context.Context, *ListSystemNotificationsRequest) (*ListSystemNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemNotifications not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateSystemNotification(context.Context, *UpdateSystemNotificationRequest) (*UpdateSystemNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemNotification not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateFeedConfig(context.Context, *CreateFeedConfigRequest) (*CreateFeedConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedConfig not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateFeedConfig(context.Context, *UpdateFeedConfigRequest) (*UpdateFeedConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedConfig not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedConfigs(context.Context, *ListFeedConfigsRequest) (*ListFeedConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedConfigs not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedCategories(context.Context, *ListFeedCategoriesRequest) (*ListFeedCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedCategories not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedPlatforms(context.Context, *ListFeedPlatformsRequest) (*ListFeedPlatformsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedPlatforms not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedItems(context.Context, *ListFeedItemsRequest) (*ListFeedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedItems not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GroupFeedItems(context.Context, *GroupFeedItemsRequest) (*GroupFeedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupFeedItems not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetFeedItem(context.Context, *GetFeedItemRequest) (*GetFeedItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedItem not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetBatchFeedItems(context.Context, *GetBatchFeedItemsRequest) (*GetBatchFeedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchFeedItems not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ReadFeedItem(context.Context, *ReadFeedItemRequest) (*ReadFeedItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFeedItem not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateFeedItemCollection(context.Context, *CreateFeedItemCollectionRequest) (*CreateFeedItemCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedItemCollection not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateFeedItemCollection(context.Context, *UpdateFeedItemCollectionRequest) (*UpdateFeedItemCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedItemCollection not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedItemCollections(context.Context, *ListFeedItemCollectionsRequest) (*ListFeedItemCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedItemCollections not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) AddFeedItemToCollection(context.Context, *AddFeedItemToCollectionRequest) (*AddFeedItemToCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeedItemToCollection not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RemoveFeedItemFromCollection(context.Context, *RemoveFeedItemFromCollectionRequest) (*RemoveFeedItemFromCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFeedItemFromCollection not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedItemsInCollection(context.Context, *ListFeedItemsInCollectionRequest) (*ListFeedItemsInCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedItemsInCollection not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateTag(context.Context, *CreateTagRequest) (*CreateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateTag(context.Context, *UpdateTagRequest) (*UpdateTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) mustEmbedUnimplementedLibrarianSephirahServiceServer() {
}

// UnsafeLibrarianSephirahServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibrarianSephirahServiceServer will
// result in compilation errors.
type UnsafeLibrarianSephirahServiceServer interface {
	mustEmbedUnimplementedLibrarianSephirahServiceServer()
}

func RegisterLibrarianSephirahServiceServer(s grpc.ServiceRegistrar, srv LibrarianSephirahServiceServer) {
	s.RegisterService(&LibrarianSephirahService_ServiceDesc, srv)
}

func _LibrarianSephirahService_GetServerInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetServerInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetServerInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetServerInformation(ctx, req.(*GetServerInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListenServerEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenServerEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LibrarianSephirahServiceServer).ListenServerEvent(m, &librarianSephirahServiceListenServerEventServer{ServerStream: stream})
}

type LibrarianSephirahService_ListenServerEventServer interface {
	Send(*ListenServerEventResponse) error
	grpc.ServerStream
}

type librarianSephirahServiceListenServerEventServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceListenServerEventServer) Send(m *ListenServerEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LibrarianSephirahService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GainUserPrivilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GainUserPrivilegeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GainUserPrivilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GainUserPrivilege_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GainUserPrivilege(ctx, req.(*GainUserPrivilegeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RegisterDevice(ctx, req.(*RegisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListRegisteredDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegisteredDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListRegisteredDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListRegisteredDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListRegisteredDevices(ctx, req.(*ListRegisteredDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListUserSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListUserSessions(ctx, req.(*ListUserSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_DeleteUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).DeleteUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_DeleteUserSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).DeleteUserSession(ctx, req.(*DeleteUserSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_LinkAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).LinkAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_LinkAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).LinkAccount(ctx, req.(*LinkAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UnLinkAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLinkAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UnLinkAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UnLinkAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UnLinkAccount(ctx, req.(*UnLinkAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListLinkAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLinkAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListLinkAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListLinkAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListLinkAccounts(ctx, req.(*ListLinkAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListPorters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListPorters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListPorters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListPorters(ctx, req.(*ListPortersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdatePorterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePorterStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdatePorterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdatePorterStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdatePorterStatus(ctx, req.(*UpdatePorterStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdatePorterPrivilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePorterPrivilegeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdatePorterPrivilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdatePorterPrivilege_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdatePorterPrivilege(ctx, req.(*UpdatePorterPrivilegeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SetFileCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFileCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SetFileCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SetFileCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SetFileCapacity(ctx, req.(*SetFileCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetFileCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetFileCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetFileCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetFileCapacity(ctx, req.(*GetFileCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).UploadFile(&librarianSephirahServiceUploadFileServer{ServerStream: stream})
}

type LibrarianSephirahService_UploadFileServer interface {
	Send(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type librarianSephirahServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceUploadFileServer) Send(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianSephirahServiceUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianSephirahService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).DownloadFile(&librarianSephirahServiceDownloadFileServer{ServerStream: stream})
}

type LibrarianSephirahService_DownloadFileServer interface {
	Send(*DownloadFileResponse) error
	Recv() (*DownloadFileRequest, error)
	grpc.ServerStream
}

type librarianSephirahServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceDownloadFileServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianSephirahServiceDownloadFileServer) Recv() (*DownloadFileRequest, error) {
	m := new(DownloadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianSephirahService_SimpleUploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).SimpleUploadFile(&librarianSephirahServiceSimpleUploadFileServer{ServerStream: stream})
}

type LibrarianSephirahService_SimpleUploadFileServer interface {
	Send(*SimpleUploadFileResponse) error
	Recv() (*SimpleUploadFileRequest, error)
	grpc.ServerStream
}

type librarianSephirahServiceSimpleUploadFileServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceSimpleUploadFileServer) Send(m *SimpleUploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianSephirahServiceSimpleUploadFileServer) Recv() (*SimpleUploadFileRequest, error) {
	m := new(SimpleUploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianSephirahService_SimpleDownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SimpleDownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LibrarianSephirahServiceServer).SimpleDownloadFile(m, &librarianSephirahServiceSimpleDownloadFileServer{ServerStream: stream})
}

type LibrarianSephirahService_SimpleDownloadFileServer interface {
	Send(*SimpleDownloadFileResponse) error
	grpc.ServerStream
}

type librarianSephirahServiceSimpleDownloadFileServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceSimpleDownloadFileServer) Send(m *SimpleDownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LibrarianSephirahService_PresignedUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresignedUploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).PresignedUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_PresignedUploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).PresignedUploadFile(ctx, req.(*PresignedUploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_PresignedUploadFileStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresignedUploadFileStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).PresignedUploadFileStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_PresignedUploadFileStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).PresignedUploadFileStatus(ctx, req.(*PresignedUploadFileStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_PresignedDownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresignedDownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).PresignedDownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_PresignedDownloadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).PresignedDownloadFile(ctx, req.(*PresignedDownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UploadImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateImage(ctx, req.(*UpdateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListImages(ctx, req.(*ListImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SearchImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SearchImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SearchImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SearchImages(ctx, req.(*SearchImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetImage(ctx, req.(*GetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_DownloadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).DownloadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_DownloadImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).DownloadImage(ctx, req.(*DownloadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateAppInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateAppInfo(ctx, req.(*CreateAppInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateAppInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateAppInfo(ctx, req.(*UpdateAppInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListAppInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListAppInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListAppInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListAppInfos(ctx, req.(*ListAppInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_MergeAppInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeAppInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).MergeAppInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_MergeAppInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).MergeAppInfos(ctx, req.(*MergeAppInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_PickAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickAppInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).PickAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_PickAppInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).PickAppInfo(ctx, req.(*PickAppInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SyncAppInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAppInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SyncAppInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SyncAppInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SyncAppInfos(ctx, req.(*SyncAppInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SyncAccountAppInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAccountAppInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SyncAccountAppInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SyncAccountAppInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SyncAccountAppInfos(ctx, req.(*SyncAccountAppInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SearchAppInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAppInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SearchAppInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SearchAppInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SearchAppInfos(ctx, req.(*SearchAppInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SearchNewAppInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchNewAppInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SearchNewAppInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SearchNewAppInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SearchNewAppInfos(ctx, req.(*SearchNewAppInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetAppInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetAppInfo(ctx, req.(*GetAppInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetBoundAppInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoundAppInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetBoundAppInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetBoundAppInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetBoundAppInfos(ctx, req.(*GetBoundAppInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_PurchaseAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseAppInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).PurchaseAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_PurchaseAppInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).PurchaseAppInfo(ctx, req.(*PurchaseAppInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetPurchasedAppInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchasedAppInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetPurchasedAppInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetPurchasedAppInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetPurchasedAppInfos(ctx, req.(*GetPurchasedAppInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateApp(ctx, req.(*CreateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateApp(ctx, req.(*UpdateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_AssignApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).AssignApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_AssignApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).AssignApp(ctx, req.(*AssignAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UnAssignApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnAssignAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UnAssignApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UnAssignApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UnAssignApp(ctx, req.(*UnAssignAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ReportAppBinaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportAppBinariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ReportAppBinaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ReportAppBinaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ReportAppBinaries(ctx, req.(*ReportAppBinariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_DownloadAppBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadAppBinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).DownloadAppBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_DownloadAppBinary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).DownloadAppBinary(ctx, req.(*DownloadAppBinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateAppInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppInstRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateAppInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateAppInst_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateAppInst(ctx, req.(*CreateAppInstRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateAppInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppInstRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateAppInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateAppInst_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateAppInst(ctx, req.(*UpdateAppInstRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListAppInsts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppInstsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListAppInsts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListAppInsts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListAppInsts(ctx, req.(*ListAppInstsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_AddAppInstRunTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppInstRunTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).AddAppInstRunTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_AddAppInstRunTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).AddAppInstRunTime(ctx, req.(*AddAppInstRunTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SumAppInstRunTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumAppInstRunTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SumAppInstRunTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SumAppInstRunTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SumAppInstRunTime(ctx, req.(*SumAppInstRunTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UploadAppSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAppSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UploadAppSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UploadAppSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UploadAppSaveFile(ctx, req.(*UploadAppSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_DownloadAppSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadAppSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).DownloadAppSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_DownloadAppSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).DownloadAppSaveFile(ctx, req.(*DownloadAppSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListAppSaveFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppSaveFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListAppSaveFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListAppSaveFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListAppSaveFiles(ctx, req.(*ListAppSaveFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RemoveAppSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAppSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RemoveAppSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RemoveAppSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RemoveAppSaveFile(ctx, req.(*RemoveAppSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_PinAppSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinAppSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).PinAppSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_PinAppSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).PinAppSaveFile(ctx, req.(*PinAppSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UnpinAppSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpinAppSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UnpinAppSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UnpinAppSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UnpinAppSaveFile(ctx, req.(*UnpinAppSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SetAppSaveFileCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAppSaveFileCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SetAppSaveFileCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SetAppSaveFileCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SetAppSaveFileCapacity(ctx, req.(*SetAppSaveFileCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetAppSaveFileCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppSaveFileCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetAppSaveFileCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetAppSaveFileCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetAppSaveFileCapacity(ctx, req.(*GetAppSaveFileCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SetAppSaveFileCapacityDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAppSaveFileCapacityDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SetAppSaveFileCapacityDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SetAppSaveFileCapacityDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SetAppSaveFileCapacityDefault(ctx, req.(*SetAppSaveFileCapacityDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetAppSaveFileCapacityDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppSaveFileCapacityDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetAppSaveFileCapacityDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetAppSaveFileCapacityDefault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetAppSaveFileCapacityDefault(ctx, req.(*GetAppSaveFileCapacityDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateSharedAppSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSharedAppSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateSharedAppSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateSharedAppSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateSharedAppSave(ctx, req.(*CreateSharedAppSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateSharedAppSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSharedAppSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateSharedAppSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateSharedAppSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateSharedAppSave(ctx, req.(*UpdateSharedAppSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListSharedAppSaves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSharedAppSavesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListSharedAppSaves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListSharedAppSaves_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListSharedAppSaves(ctx, req.(*ListSharedAppSavesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RemoveSharedAppSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSharedAppSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RemoveSharedAppSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RemoveSharedAppSave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RemoveSharedAppSave(ctx, req.(*RemoveSharedAppSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateSharedAppSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSharedAppSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateSharedAppSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateSharedAppSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateSharedAppSaveFile(ctx, req.(*CreateSharedAppSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateSharedAppSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSharedAppSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateSharedAppSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateSharedAppSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateSharedAppSaveFile(ctx, req.(*UpdateSharedAppSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListSharedAppSaveFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSharedAppSaveFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListSharedAppSaveFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListSharedAppSaveFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListSharedAppSaveFiles(ctx, req.(*ListSharedAppSaveFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RemoveSharedAppSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSharedAppSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RemoveSharedAppSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RemoveSharedAppSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RemoveSharedAppSaveFile(ctx, req.(*RemoveSharedAppSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListAppCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListAppCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListAppCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListAppCategories(ctx, req.(*ListAppCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateAppCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateAppCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateAppCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateAppCategory(ctx, req.(*CreateAppCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateAppCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateAppCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateAppCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateAppCategory(ctx, req.(*UpdateAppCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RemoveAppCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAppCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RemoveAppCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RemoveAppCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RemoveAppCategory(ctx, req.(*RemoveAppCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateNotifyTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifyTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateNotifyTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateNotifyTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateNotifyTarget(ctx, req.(*CreateNotifyTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateNotifyTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifyTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateNotifyTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateNotifyTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateNotifyTarget(ctx, req.(*UpdateNotifyTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListNotifyTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotifyTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListNotifyTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListNotifyTargets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListNotifyTargets(ctx, req.(*ListNotifyTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateNotifyFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifyFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateNotifyFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateNotifyFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateNotifyFlow(ctx, req.(*CreateNotifyFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateNotifyFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifyFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateNotifyFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateNotifyFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateNotifyFlow(ctx, req.(*UpdateNotifyFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListNotifyFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotifyFlowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListNotifyFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListNotifyFlows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListNotifyFlows(ctx, req.(*ListNotifyFlowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListSystemNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListSystemNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListSystemNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListSystemNotifications(ctx, req.(*ListSystemNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateSystemNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateSystemNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateSystemNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateSystemNotification(ctx, req.(*UpdateSystemNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateFeedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateFeedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateFeedConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateFeedConfig(ctx, req.(*CreateFeedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateFeedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateFeedConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedConfig(ctx, req.(*UpdateFeedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedConfigs(ctx, req.(*ListFeedConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedCategories(ctx, req.(*ListFeedCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedPlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedPlatformsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedPlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedPlatforms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedPlatforms(ctx, req.(*ListFeedPlatformsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedItems(ctx, req.(*ListFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GroupFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GroupFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GroupFeedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GroupFeedItems(ctx, req.(*GroupFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetFeedItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetFeedItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetFeedItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetFeedItem(ctx, req.(*GetFeedItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetBatchFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetBatchFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetBatchFeedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetBatchFeedItems(ctx, req.(*GetBatchFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ReadFeedItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFeedItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ReadFeedItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ReadFeedItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ReadFeedItem(ctx, req.(*ReadFeedItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateFeedItemCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedItemCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateFeedItemCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateFeedItemCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateFeedItemCollection(ctx, req.(*CreateFeedItemCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateFeedItemCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedItemCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedItemCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateFeedItemCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedItemCollection(ctx, req.(*UpdateFeedItemCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedItemCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedItemCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedItemCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedItemCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedItemCollections(ctx, req.(*ListFeedItemCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_AddFeedItemToCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeedItemToCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).AddFeedItemToCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_AddFeedItemToCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).AddFeedItemToCollection(ctx, req.(*AddFeedItemToCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RemoveFeedItemFromCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFeedItemFromCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RemoveFeedItemFromCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RemoveFeedItemFromCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RemoveFeedItemFromCollection(ctx, req.(*RemoveFeedItemFromCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedItemsInCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedItemsInCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedItemsInCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedItemsInCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedItemsInCollection(ctx, req.(*ListFeedItemsInCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateTag(ctx, req.(*UpdateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListTags(ctx, req.(*ListTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibrarianSephirahService_ServiceDesc is the grpc.ServiceDesc for LibrarianSephirahService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibrarianSephirahService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "librarian.sephirah.v1.LibrarianSephirahService",
	HandlerType: (*LibrarianSephirahServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerInformation",
			Handler:    _LibrarianSephirahService_GetServerInformation_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _LibrarianSephirahService_GetToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _LibrarianSephirahService_RefreshToken_Handler,
		},
		{
			MethodName: "GainUserPrivilege",
			Handler:    _LibrarianSephirahService_GainUserPrivilege_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _LibrarianSephirahService_RegisterUser_Handler,
		},
		{
			MethodName: "RegisterDevice",
			Handler:    _LibrarianSephirahService_RegisterDevice_Handler,
		},
		{
			MethodName: "ListRegisteredDevices",
			Handler:    _LibrarianSephirahService_ListRegisteredDevices_Handler,
		},
		{
			MethodName: "ListUserSessions",
			Handler:    _LibrarianSephirahService_ListUserSessions_Handler,
		},
		{
			MethodName: "DeleteUserSession",
			Handler:    _LibrarianSephirahService_DeleteUserSession_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _LibrarianSephirahService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _LibrarianSephirahService_UpdateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _LibrarianSephirahService_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _LibrarianSephirahService_ListUsers_Handler,
		},
		{
			MethodName: "LinkAccount",
			Handler:    _LibrarianSephirahService_LinkAccount_Handler,
		},
		{
			MethodName: "UnLinkAccount",
			Handler:    _LibrarianSephirahService_UnLinkAccount_Handler,
		},
		{
			MethodName: "ListLinkAccounts",
			Handler:    _LibrarianSephirahService_ListLinkAccounts_Handler,
		},
		{
			MethodName: "ListPorters",
			Handler:    _LibrarianSephirahService_ListPorters_Handler,
		},
		{
			MethodName: "UpdatePorterStatus",
			Handler:    _LibrarianSephirahService_UpdatePorterStatus_Handler,
		},
		{
			MethodName: "UpdatePorterPrivilege",
			Handler:    _LibrarianSephirahService_UpdatePorterPrivilege_Handler,
		},
		{
			MethodName: "SetFileCapacity",
			Handler:    _LibrarianSephirahService_SetFileCapacity_Handler,
		},
		{
			MethodName: "GetFileCapacity",
			Handler:    _LibrarianSephirahService_GetFileCapacity_Handler,
		},
		{
			MethodName: "PresignedUploadFile",
			Handler:    _LibrarianSephirahService_PresignedUploadFile_Handler,
		},
		{
			MethodName: "PresignedUploadFileStatus",
			Handler:    _LibrarianSephirahService_PresignedUploadFileStatus_Handler,
		},
		{
			MethodName: "PresignedDownloadFile",
			Handler:    _LibrarianSephirahService_PresignedDownloadFile_Handler,
		},
		{
			MethodName: "UploadImage",
			Handler:    _LibrarianSephirahService_UploadImage_Handler,
		},
		{
			MethodName: "UpdateImage",
			Handler:    _LibrarianSephirahService_UpdateImage_Handler,
		},
		{
			MethodName: "ListImages",
			Handler:    _LibrarianSephirahService_ListImages_Handler,
		},
		{
			MethodName: "SearchImages",
			Handler:    _LibrarianSephirahService_SearchImages_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _LibrarianSephirahService_GetImage_Handler,
		},
		{
			MethodName: "DownloadImage",
			Handler:    _LibrarianSephirahService_DownloadImage_Handler,
		},
		{
			MethodName: "CreateAppInfo",
			Handler:    _LibrarianSephirahService_CreateAppInfo_Handler,
		},
		{
			MethodName: "UpdateAppInfo",
			Handler:    _LibrarianSephirahService_UpdateAppInfo_Handler,
		},
		{
			MethodName: "ListAppInfos",
			Handler:    _LibrarianSephirahService_ListAppInfos_Handler,
		},
		{
			MethodName: "MergeAppInfos",
			Handler:    _LibrarianSephirahService_MergeAppInfos_Handler,
		},
		{
			MethodName: "PickAppInfo",
			Handler:    _LibrarianSephirahService_PickAppInfo_Handler,
		},
		{
			MethodName: "SyncAppInfos",
			Handler:    _LibrarianSephirahService_SyncAppInfos_Handler,
		},
		{
			MethodName: "SyncAccountAppInfos",
			Handler:    _LibrarianSephirahService_SyncAccountAppInfos_Handler,
		},
		{
			MethodName: "SearchAppInfos",
			Handler:    _LibrarianSephirahService_SearchAppInfos_Handler,
		},
		{
			MethodName: "SearchNewAppInfos",
			Handler:    _LibrarianSephirahService_SearchNewAppInfos_Handler,
		},
		{
			MethodName: "GetAppInfo",
			Handler:    _LibrarianSephirahService_GetAppInfo_Handler,
		},
		{
			MethodName: "GetBoundAppInfos",
			Handler:    _LibrarianSephirahService_GetBoundAppInfos_Handler,
		},
		{
			MethodName: "PurchaseAppInfo",
			Handler:    _LibrarianSephirahService_PurchaseAppInfo_Handler,
		},
		{
			MethodName: "GetPurchasedAppInfos",
			Handler:    _LibrarianSephirahService_GetPurchasedAppInfos_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _LibrarianSephirahService_CreateApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _LibrarianSephirahService_UpdateApp_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _LibrarianSephirahService_ListApps_Handler,
		},
		{
			MethodName: "AssignApp",
			Handler:    _LibrarianSephirahService_AssignApp_Handler,
		},
		{
			MethodName: "UnAssignApp",
			Handler:    _LibrarianSephirahService_UnAssignApp_Handler,
		},
		{
			MethodName: "ReportAppBinaries",
			Handler:    _LibrarianSephirahService_ReportAppBinaries_Handler,
		},
		{
			MethodName: "DownloadAppBinary",
			Handler:    _LibrarianSephirahService_DownloadAppBinary_Handler,
		},
		{
			MethodName: "CreateAppInst",
			Handler:    _LibrarianSephirahService_CreateAppInst_Handler,
		},
		{
			MethodName: "UpdateAppInst",
			Handler:    _LibrarianSephirahService_UpdateAppInst_Handler,
		},
		{
			MethodName: "ListAppInsts",
			Handler:    _LibrarianSephirahService_ListAppInsts_Handler,
		},
		{
			MethodName: "AddAppInstRunTime",
			Handler:    _LibrarianSephirahService_AddAppInstRunTime_Handler,
		},
		{
			MethodName: "SumAppInstRunTime",
			Handler:    _LibrarianSephirahService_SumAppInstRunTime_Handler,
		},
		{
			MethodName: "UploadAppSaveFile",
			Handler:    _LibrarianSephirahService_UploadAppSaveFile_Handler,
		},
		{
			MethodName: "DownloadAppSaveFile",
			Handler:    _LibrarianSephirahService_DownloadAppSaveFile_Handler,
		},
		{
			MethodName: "ListAppSaveFiles",
			Handler:    _LibrarianSephirahService_ListAppSaveFiles_Handler,
		},
		{
			MethodName: "RemoveAppSaveFile",
			Handler:    _LibrarianSephirahService_RemoveAppSaveFile_Handler,
		},
		{
			MethodName: "PinAppSaveFile",
			Handler:    _LibrarianSephirahService_PinAppSaveFile_Handler,
		},
		{
			MethodName: "UnpinAppSaveFile",
			Handler:    _LibrarianSephirahService_UnpinAppSaveFile_Handler,
		},
		{
			MethodName: "SetAppSaveFileCapacity",
			Handler:    _LibrarianSephirahService_SetAppSaveFileCapacity_Handler,
		},
		{
			MethodName: "GetAppSaveFileCapacity",
			Handler:    _LibrarianSephirahService_GetAppSaveFileCapacity_Handler,
		},
		{
			MethodName: "SetAppSaveFileCapacityDefault",
			Handler:    _LibrarianSephirahService_SetAppSaveFileCapacityDefault_Handler,
		},
		{
			MethodName: "GetAppSaveFileCapacityDefault",
			Handler:    _LibrarianSephirahService_GetAppSaveFileCapacityDefault_Handler,
		},
		{
			MethodName: "CreateSharedAppSave",
			Handler:    _LibrarianSephirahService_CreateSharedAppSave_Handler,
		},
		{
			MethodName: "UpdateSharedAppSave",
			Handler:    _LibrarianSephirahService_UpdateSharedAppSave_Handler,
		},
		{
			MethodName: "ListSharedAppSaves",
			Handler:    _LibrarianSephirahService_ListSharedAppSaves_Handler,
		},
		{
			MethodName: "RemoveSharedAppSave",
			Handler:    _LibrarianSephirahService_RemoveSharedAppSave_Handler,
		},
		{
			MethodName: "CreateSharedAppSaveFile",
			Handler:    _LibrarianSephirahService_CreateSharedAppSaveFile_Handler,
		},
		{
			MethodName: "UpdateSharedAppSaveFile",
			Handler:    _LibrarianSephirahService_UpdateSharedAppSaveFile_Handler,
		},
		{
			MethodName: "ListSharedAppSaveFiles",
			Handler:    _LibrarianSephirahService_ListSharedAppSaveFiles_Handler,
		},
		{
			MethodName: "RemoveSharedAppSaveFile",
			Handler:    _LibrarianSephirahService_RemoveSharedAppSaveFile_Handler,
		},
		{
			MethodName: "ListAppCategories",
			Handler:    _LibrarianSephirahService_ListAppCategories_Handler,
		},
		{
			MethodName: "CreateAppCategory",
			Handler:    _LibrarianSephirahService_CreateAppCategory_Handler,
		},
		{
			MethodName: "UpdateAppCategory",
			Handler:    _LibrarianSephirahService_UpdateAppCategory_Handler,
		},
		{
			MethodName: "RemoveAppCategory",
			Handler:    _LibrarianSephirahService_RemoveAppCategory_Handler,
		},
		{
			MethodName: "CreateNotifyTarget",
			Handler:    _LibrarianSephirahService_CreateNotifyTarget_Handler,
		},
		{
			MethodName: "UpdateNotifyTarget",
			Handler:    _LibrarianSephirahService_UpdateNotifyTarget_Handler,
		},
		{
			MethodName: "ListNotifyTargets",
			Handler:    _LibrarianSephirahService_ListNotifyTargets_Handler,
		},
		{
			MethodName: "CreateNotifyFlow",
			Handler:    _LibrarianSephirahService_CreateNotifyFlow_Handler,
		},
		{
			MethodName: "UpdateNotifyFlow",
			Handler:    _LibrarianSephirahService_UpdateNotifyFlow_Handler,
		},
		{
			MethodName: "ListNotifyFlows",
			Handler:    _LibrarianSephirahService_ListNotifyFlows_Handler,
		},
		{
			MethodName: "ListSystemNotifications",
			Handler:    _LibrarianSephirahService_ListSystemNotifications_Handler,
		},
		{
			MethodName: "UpdateSystemNotification",
			Handler:    _LibrarianSephirahService_UpdateSystemNotification_Handler,
		},
		{
			MethodName: "CreateFeedConfig",
			Handler:    _LibrarianSephirahService_CreateFeedConfig_Handler,
		},
		{
			MethodName: "UpdateFeedConfig",
			Handler:    _LibrarianSephirahService_UpdateFeedConfig_Handler,
		},
		{
			MethodName: "ListFeedConfigs",
			Handler:    _LibrarianSephirahService_ListFeedConfigs_Handler,
		},
		{
			MethodName: "ListFeedCategories",
			Handler:    _LibrarianSephirahService_ListFeedCategories_Handler,
		},
		{
			MethodName: "ListFeedPlatforms",
			Handler:    _LibrarianSephirahService_ListFeedPlatforms_Handler,
		},
		{
			MethodName: "ListFeedItems",
			Handler:    _LibrarianSephirahService_ListFeedItems_Handler,
		},
		{
			MethodName: "GroupFeedItems",
			Handler:    _LibrarianSephirahService_GroupFeedItems_Handler,
		},
		{
			MethodName: "GetFeedItem",
			Handler:    _LibrarianSephirahService_GetFeedItem_Handler,
		},
		{
			MethodName: "GetBatchFeedItems",
			Handler:    _LibrarianSephirahService_GetBatchFeedItems_Handler,
		},
		{
			MethodName: "ReadFeedItem",
			Handler:    _LibrarianSephirahService_ReadFeedItem_Handler,
		},
		{
			MethodName: "CreateFeedItemCollection",
			Handler:    _LibrarianSephirahService_CreateFeedItemCollection_Handler,
		},
		{
			MethodName: "UpdateFeedItemCollection",
			Handler:    _LibrarianSephirahService_UpdateFeedItemCollection_Handler,
		},
		{
			MethodName: "ListFeedItemCollections",
			Handler:    _LibrarianSephirahService_ListFeedItemCollections_Handler,
		},
		{
			MethodName: "AddFeedItemToCollection",
			Handler:    _LibrarianSephirahService_AddFeedItemToCollection_Handler,
		},
		{
			MethodName: "RemoveFeedItemFromCollection",
			Handler:    _LibrarianSephirahService_RemoveFeedItemFromCollection_Handler,
		},
		{
			MethodName: "ListFeedItemsInCollection",
			Handler:    _LibrarianSephirahService_ListFeedItemsInCollection_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _LibrarianSephirahService_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _LibrarianSephirahService_UpdateTag_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _LibrarianSephirahService_ListTags_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenServerEvent",
			Handler:       _LibrarianSephirahService_ListenServerEvent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadFile",
			Handler:       _LibrarianSephirahService_UploadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _LibrarianSephirahService_DownloadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SimpleUploadFile",
			Handler:       _LibrarianSephirahService_SimpleUploadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SimpleDownloadFile",
			Handler:       _LibrarianSephirahService_SimpleDownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "librarian/sephirah/v1/sephirah.proto",
}
