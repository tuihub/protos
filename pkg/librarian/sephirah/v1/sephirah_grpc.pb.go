// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: librarian/sephirah/v1/sephirah.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LibrarianSephirahService_GetServerInformation_FullMethodName         = "/librarian.sephirah.v1.LibrarianSephirahService/GetServerInformation"
	LibrarianSephirahService_GetToken_FullMethodName                     = "/librarian.sephirah.v1.LibrarianSephirahService/GetToken"
	LibrarianSephirahService_RefreshToken_FullMethodName                 = "/librarian.sephirah.v1.LibrarianSephirahService/RefreshToken"
	LibrarianSephirahService_GainUserPrivilege_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/GainUserPrivilege"
	LibrarianSephirahService_RegisterDevice_FullMethodName               = "/librarian.sephirah.v1.LibrarianSephirahService/RegisterDevice"
	LibrarianSephirahService_ListUserSessions_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/ListUserSessions"
	LibrarianSephirahService_DeleteUserSession_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/DeleteUserSession"
	LibrarianSephirahService_CreateUser_FullMethodName                   = "/librarian.sephirah.v1.LibrarianSephirahService/CreateUser"
	LibrarianSephirahService_UpdateUser_FullMethodName                   = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateUser"
	LibrarianSephirahService_GetUser_FullMethodName                      = "/librarian.sephirah.v1.LibrarianSephirahService/GetUser"
	LibrarianSephirahService_ListUsers_FullMethodName                    = "/librarian.sephirah.v1.LibrarianSephirahService/ListUsers"
	LibrarianSephirahService_LinkAccount_FullMethodName                  = "/librarian.sephirah.v1.LibrarianSephirahService/LinkAccount"
	LibrarianSephirahService_UnLinkAccount_FullMethodName                = "/librarian.sephirah.v1.LibrarianSephirahService/UnLinkAccount"
	LibrarianSephirahService_ListLinkAccounts_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/ListLinkAccounts"
	LibrarianSephirahService_ListPorters_FullMethodName                  = "/librarian.sephirah.v1.LibrarianSephirahService/ListPorters"
	LibrarianSephirahService_UpdatePorterStatus_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/UpdatePorterStatus"
	LibrarianSephirahService_UpdatePorterPrivilege_FullMethodName        = "/librarian.sephirah.v1.LibrarianSephirahService/UpdatePorterPrivilege"
	LibrarianSephirahService_UploadFile_FullMethodName                   = "/librarian.sephirah.v1.LibrarianSephirahService/UploadFile"
	LibrarianSephirahService_DownloadFile_FullMethodName                 = "/librarian.sephirah.v1.LibrarianSephirahService/DownloadFile"
	LibrarianSephirahService_SimpleUploadFile_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/SimpleUploadFile"
	LibrarianSephirahService_SimpleDownloadFile_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/SimpleDownloadFile"
	LibrarianSephirahService_PresignedUploadFile_FullMethodName          = "/librarian.sephirah.v1.LibrarianSephirahService/PresignedUploadFile"
	LibrarianSephirahService_PresignedUploadFileStatus_FullMethodName    = "/librarian.sephirah.v1.LibrarianSephirahService/PresignedUploadFileStatus"
	LibrarianSephirahService_PresignedDownloadFile_FullMethodName        = "/librarian.sephirah.v1.LibrarianSephirahService/PresignedDownloadFile"
	LibrarianSephirahService_UploadImage_FullMethodName                  = "/librarian.sephirah.v1.LibrarianSephirahService/UploadImage"
	LibrarianSephirahService_UpdateImage_FullMethodName                  = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateImage"
	LibrarianSephirahService_ListImages_FullMethodName                   = "/librarian.sephirah.v1.LibrarianSephirahService/ListImages"
	LibrarianSephirahService_SearchImages_FullMethodName                 = "/librarian.sephirah.v1.LibrarianSephirahService/SearchImages"
	LibrarianSephirahService_GetImage_FullMethodName                     = "/librarian.sephirah.v1.LibrarianSephirahService/GetImage"
	LibrarianSephirahService_DownloadImage_FullMethodName                = "/librarian.sephirah.v1.LibrarianSephirahService/DownloadImage"
	LibrarianSephirahService_CreateApp_FullMethodName                    = "/librarian.sephirah.v1.LibrarianSephirahService/CreateApp"
	LibrarianSephirahService_UpdateApp_FullMethodName                    = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateApp"
	LibrarianSephirahService_ListApps_FullMethodName                     = "/librarian.sephirah.v1.LibrarianSephirahService/ListApps"
	LibrarianSephirahService_SyncApps_FullMethodName                     = "/librarian.sephirah.v1.LibrarianSephirahService/SyncApps"
	LibrarianSephirahService_SyncAccountApps_FullMethodName              = "/librarian.sephirah.v1.LibrarianSephirahService/SyncAccountApps"
	LibrarianSephirahService_MergeApps_FullMethodName                    = "/librarian.sephirah.v1.LibrarianSephirahService/MergeApps"
	LibrarianSephirahService_PickApp_FullMethodName                      = "/librarian.sephirah.v1.LibrarianSephirahService/PickApp"
	LibrarianSephirahService_SearchApps_FullMethodName                   = "/librarian.sephirah.v1.LibrarianSephirahService/SearchApps"
	LibrarianSephirahService_GetApp_FullMethodName                       = "/librarian.sephirah.v1.LibrarianSephirahService/GetApp"
	LibrarianSephirahService_GetBoundApps_FullMethodName                 = "/librarian.sephirah.v1.LibrarianSephirahService/GetBoundApps"
	LibrarianSephirahService_PurchaseApp_FullMethodName                  = "/librarian.sephirah.v1.LibrarianSephirahService/PurchaseApp"
	LibrarianSephirahService_GetPurchasedApps_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/GetPurchasedApps"
	LibrarianSephirahService_CreateAppPackage_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/CreateAppPackage"
	LibrarianSephirahService_UpdateAppPackage_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateAppPackage"
	LibrarianSephirahService_ListAppPackages_FullMethodName              = "/librarian.sephirah.v1.LibrarianSephirahService/ListAppPackages"
	LibrarianSephirahService_AssignAppPackage_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/AssignAppPackage"
	LibrarianSephirahService_UnAssignAppPackage_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/UnAssignAppPackage"
	LibrarianSephirahService_ReportAppPackages_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/ReportAppPackages"
	LibrarianSephirahService_AddAppPackageRunTime_FullMethodName         = "/librarian.sephirah.v1.LibrarianSephirahService/AddAppPackageRunTime"
	LibrarianSephirahService_SumAppPackageRunTime_FullMethodName         = "/librarian.sephirah.v1.LibrarianSephirahService/SumAppPackageRunTime"
	LibrarianSephirahService_UploadGameSaveFile_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/UploadGameSaveFile"
	LibrarianSephirahService_DownloadGameSaveFile_FullMethodName         = "/librarian.sephirah.v1.LibrarianSephirahService/DownloadGameSaveFile"
	LibrarianSephirahService_ListGameSaveFiles_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/ListGameSaveFiles"
	LibrarianSephirahService_RemoveGameSaveFile_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/RemoveGameSaveFile"
	LibrarianSephirahService_PinGameSaveFile_FullMethodName              = "/librarian.sephirah.v1.LibrarianSephirahService/PinGameSaveFile"
	LibrarianSephirahService_UnpinGameSaveFile_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/UnpinGameSaveFile"
	LibrarianSephirahService_SetUserSaveFileCapacity_FullMethodName      = "/librarian.sephirah.v1.LibrarianSephirahService/SetUserSaveFileCapacity"
	LibrarianSephirahService_SetSaveFileRotation_FullMethodName          = "/librarian.sephirah.v1.LibrarianSephirahService/SetSaveFileRotation"
	LibrarianSephirahService_ListAppCategories_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/ListAppCategories"
	LibrarianSephirahService_CreateAppCategory_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/CreateAppCategory"
	LibrarianSephirahService_UpdateAppCategory_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateAppCategory"
	LibrarianSephirahService_RemoveAppCategory_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/RemoveAppCategory"
	LibrarianSephirahService_CreateNotifyTarget_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/CreateNotifyTarget"
	LibrarianSephirahService_UpdateNotifyTarget_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateNotifyTarget"
	LibrarianSephirahService_ListNotifyTargets_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/ListNotifyTargets"
	LibrarianSephirahService_CreateNotifyFlow_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/CreateNotifyFlow"
	LibrarianSephirahService_UpdateNotifyFlow_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateNotifyFlow"
	LibrarianSephirahService_ListNotifyFlows_FullMethodName              = "/librarian.sephirah.v1.LibrarianSephirahService/ListNotifyFlows"
	LibrarianSephirahService_CreateFeedConfig_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/CreateFeedConfig"
	LibrarianSephirahService_UpdateFeedConfig_FullMethodName             = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateFeedConfig"
	LibrarianSephirahService_ListFeedConfigs_FullMethodName              = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedConfigs"
	LibrarianSephirahService_ListFeedCategories_FullMethodName           = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedCategories"
	LibrarianSephirahService_ListFeedPlatforms_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedPlatforms"
	LibrarianSephirahService_ListFeedItems_FullMethodName                = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedItems"
	LibrarianSephirahService_GroupFeedItems_FullMethodName               = "/librarian.sephirah.v1.LibrarianSephirahService/GroupFeedItems"
	LibrarianSephirahService_GetFeedItem_FullMethodName                  = "/librarian.sephirah.v1.LibrarianSephirahService/GetFeedItem"
	LibrarianSephirahService_GetBatchFeedItems_FullMethodName            = "/librarian.sephirah.v1.LibrarianSephirahService/GetBatchFeedItems"
	LibrarianSephirahService_ReadFeedItem_FullMethodName                 = "/librarian.sephirah.v1.LibrarianSephirahService/ReadFeedItem"
	LibrarianSephirahService_CreateFeedItemCollection_FullMethodName     = "/librarian.sephirah.v1.LibrarianSephirahService/CreateFeedItemCollection"
	LibrarianSephirahService_UpdateFeedItemCollection_FullMethodName     = "/librarian.sephirah.v1.LibrarianSephirahService/UpdateFeedItemCollection"
	LibrarianSephirahService_ListFeedItemCollections_FullMethodName      = "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedItemCollections"
	LibrarianSephirahService_AddFeedItemToCollection_FullMethodName      = "/librarian.sephirah.v1.LibrarianSephirahService/AddFeedItemToCollection"
	LibrarianSephirahService_RemoveFeedItemFromCollection_FullMethodName = "/librarian.sephirah.v1.LibrarianSephirahService/RemoveFeedItemFromCollection"
	LibrarianSephirahService_ListCollectionItems_FullMethodName          = "/librarian.sephirah.v1.LibrarianSephirahService/ListCollectionItems"
)

// LibrarianSephirahServiceClient is the client API for LibrarianSephirahService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibrarianSephirahServiceClient interface {
	// Allow anonymous call, use accessToken to get complete information
	GetServerInformation(ctx context.Context, in *GetServerInformationRequest, opts ...grpc.CallOption) (*GetServerInformationResponse, error)
	// `Tiphereth` `Normal` Login via password and get two token
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	// `Tiphereth` `Normal` `Sentinel` `Porter` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// `Tiphereth` `Porter` Get access_token of another user with allowed privilege
	GainUserPrivilege(ctx context.Context, in *GainUserPrivilegeRequest, opts ...grpc.CallOption) (*GainUserPrivilegeResponse, error)
	// `Tiphereth` `Normal` Client should register device after the first login
	// and store the device_id locally.
	// The server could add extra limits to non-registered device
	RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error)
	// `Tiphereth` `Normal`
	ListUserSessions(ctx context.Context, in *ListUserSessionsRequest, opts ...grpc.CallOption) (*ListUserSessionsResponse, error)
	// `Tiphereth` `Normal` delete session will revoke refresh_token immediately.
	// NOTE: This can also be used to logout on server side.
	DeleteUserSession(ctx context.Context, in *DeleteUserSessionRequest, opts ...grpc.CallOption) (*DeleteUserSessionResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// `Tiphereth` `Normal` Bind third-party account to current user.
	// Create (account)<-[Equal]->(current user)
	LinkAccount(ctx context.Context, in *LinkAccountRequest, opts ...grpc.CallOption) (*LinkAccountResponse, error)
	// `Tiphereth` `Normal` Unbind third-party account from current user.
	// Delete (account)<-[Equal]->(current user)
	UnLinkAccount(ctx context.Context, in *UnLinkAccountRequest, opts ...grpc.CallOption) (*UnLinkAccountResponse, error)
	// `Tiphereth` `Normal` List third-party account binded to current user.
	// Match ()<-[Equal]->(current user)
	ListLinkAccounts(ctx context.Context, in *ListLinkAccountsRequest, opts ...grpc.CallOption) (*ListLinkAccountsResponse, error)
	// `Tiphereth` `Normal`
	ListPorters(ctx context.Context, in *ListPortersRequest, opts ...grpc.CallOption) (*ListPortersResponse, error)
	// `Tiphereth` `Admin`
	UpdatePorterStatus(ctx context.Context, in *UpdatePorterStatusRequest, opts ...grpc.CallOption) (*UpdatePorterStatusResponse, error)
	// `Tiphereth` `Normal only` Set porter privilege, default none privilege.
	UpdatePorterPrivilege(ctx context.Context, in *UpdatePorterPrivilegeRequest, opts ...grpc.CallOption) (*UpdatePorterPrivilegeResponse, error)
	// `Binah` `upload_token`
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_UploadFileClient, error)
	// `Binah` `download_token`
	DownloadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_DownloadFileClient, error)
	// `Binah` `upload_token`
	// Maximum 256M
	// Server must send response at least once a minute to keepalive.
	// Client should ignore in_process response and wait for success or error response.
	SimpleUploadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_SimpleUploadFileClient, error)
	// `Binah` `download_token`
	// Server will not check the receiving state
	SimpleDownloadFile(ctx context.Context, in *SimpleDownloadFileRequest, opts ...grpc.CallOption) (LibrarianSephirahService_SimpleDownloadFileClient, error)
	// `Binah` `upload_token`
	// Upload file through http url
	PresignedUploadFile(ctx context.Context, in *PresignedUploadFileRequest, opts ...grpc.CallOption) (*PresignedUploadFileResponse, error)
	// `Binah` `upload_token`
	// Report file transfer status. Mainly used to trigger server post-process immediately
	PresignedUploadFileStatus(ctx context.Context, in *PresignedUploadFileStatusRequest, opts ...grpc.CallOption) (*PresignedUploadFileStatusResponse, error)
	// `Binah` `download_token`
	// Download file through http url
	PresignedDownloadFile(ctx context.Context, in *PresignedDownloadFileRequest, opts ...grpc.CallOption) (*PresignedDownloadFileResponse, error)
	// `Chesed` `Normal`
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	// `Chesed` `Normal`
	UpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*UpdateImageResponse, error)
	// `Chesed` `Normal`
	ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error)
	// `Chesed` `Normal`
	SearchImages(ctx context.Context, in *SearchImagesRequest, opts ...grpc.CallOption) (*SearchImagesResponse, error)
	// `Chesed` `Normal`
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error)
	// `Chesed` `Normal`
	DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error)
	// `Gebura` `Admin`
	CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error)
	// `Gebura` `Admin`
	UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error)
	// `Gebura` `Admin` Used to manage apps
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error)
	// `Gebura` `Admin` Asynchronous update apps.
	// Request on INTERNAL app applies to all bound external apps.
	// Create an INTERNAL app when requested external app does not exist
	// Server should implement a sync rate limit to prevent abuse,
	// when rate limit reached, return without real sync.
	SyncApps(ctx context.Context, in *SyncAppsRequest, opts ...grpc.CallOption) (*SyncAppsResponse, error)
	// `Gebura` `Admin` Asynchronously update apps associated with an account.
	// Create an INTERNAL app when associated external app does not exist.
	// Server should implement a sync rate limit to prevent abuse,
	// when rate limit reached, return without real sync.
	SyncAccountApps(ctx context.Context, in *SyncAccountAppsRequest, opts ...grpc.CallOption) (*SyncAccountAppsResponse, error)
	// `Gebura` `Admin` Merge two apps
	MergeApps(ctx context.Context, in *MergeAppsRequest, opts ...grpc.CallOption) (*MergeAppsResponse, error)
	// `Gebura` `Admin` Pick one app out from merged
	PickApp(ctx context.Context, in *PickAppRequest, opts ...grpc.CallOption) (*PickAppResponse, error)
	// `Gebura` `Normal`
	SearchApps(ctx context.Context, in *SearchAppsRequest, opts ...grpc.CallOption) (*SearchAppsResponse, error)
	// `Gebura` `Normal` Flattened app info, data priority is 1.INTERNAL, 2.STEAM.
	// e.g. `id` will always from INTERNAL, `description` may from STEAM if it is empty in INTERNAL
	GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error)
	// `Gebura` `Normal` Original bound apps info of required app
	GetBoundApps(ctx context.Context, in *GetBoundAppsRequest, opts ...grpc.CallOption) (*GetBoundAppsResponse, error)
	// `Gebura` `Normal`
	PurchaseApp(ctx context.Context, in *PurchaseAppRequest, opts ...grpc.CallOption) (*PurchaseAppResponse, error)
	// `Gebura` `Normal`
	// Default get user purchased apps
	// Use `source` to get purchase info from bound account
	// only support steam
	GetPurchasedApps(ctx context.Context, in *GetPurchasedAppsRequest, opts ...grpc.CallOption) (*GetPurchasedAppsResponse, error)
	// `Gebura` `Normal`
	CreateAppPackage(ctx context.Context, in *CreateAppPackageRequest, opts ...grpc.CallOption) (*CreateAppPackageResponse, error)
	// `Gebura` `Normal`
	UpdateAppPackage(ctx context.Context, in *UpdateAppPackageRequest, opts ...grpc.CallOption) (*UpdateAppPackageResponse, error)
	// `Gebura` `Normal`
	ListAppPackages(ctx context.Context, in *ListAppPackagesRequest, opts ...grpc.CallOption) (*ListAppPackagesResponse, error)
	// `Gebura` `Normal`
	AssignAppPackage(ctx context.Context, in *AssignAppPackageRequest, opts ...grpc.CallOption) (*AssignAppPackageResponse, error)
	// `Gebura` `Normal`
	UnAssignAppPackage(ctx context.Context, in *UnAssignAppPackageRequest, opts ...grpc.CallOption) (*UnAssignAppPackageResponse, error)
	// `Gebura` `Sentinel`
	ReportAppPackages(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_ReportAppPackagesClient, error)
	// `Gebura` `Normal`
	AddAppPackageRunTime(ctx context.Context, in *AddAppPackageRunTimeRequest, opts ...grpc.CallOption) (*AddAppPackageRunTimeResponse, error)
	// `Gebura` `Normal` Only support AGGREGATION_TYPE_OVERALL
	SumAppPackageRunTime(ctx context.Context, in *SumAppPackageRunTimeRequest, opts ...grpc.CallOption) (*SumAppPackageRunTimeResponse, error)
	// `Gebura` `Normal`
	UploadGameSaveFile(ctx context.Context, in *UploadGameSaveFileRequest, opts ...grpc.CallOption) (*UploadGameSaveFileResponse, error)
	// `Gebura` `Normal`
	DownloadGameSaveFile(ctx context.Context, in *DownloadGameSaveFileRequest, opts ...grpc.CallOption) (*DownloadGameSaveFileResponse, error)
	// `Gebura` `Normal`
	ListGameSaveFiles(ctx context.Context, in *ListGameSaveFilesRequest, opts ...grpc.CallOption) (*ListGameSaveFilesResponse, error)
	// `Gebura` `Normal`
	RemoveGameSaveFile(ctx context.Context, in *RemoveGameSaveFileRequest, opts ...grpc.CallOption) (*RemoveGameSaveFileResponse, error)
	// `Gebura` `Normal`
	PinGameSaveFile(ctx context.Context, in *PinGameSaveFileRequest, opts ...grpc.CallOption) (*PinGameSaveFileResponse, error)
	// `Gebura` `Normal`
	UnpinGameSaveFile(ctx context.Context, in *UnpinGameSaveFileRequest, opts ...grpc.CallOption) (*UnpinGameSaveFileResponse, error)
	// `Gebura` `Admin`
	SetUserSaveFileCapacity(ctx context.Context, in *SetUserSaveFileCapacityRequest, opts ...grpc.CallOption) (*SetUserSaveFileCapacityResponse, error)
	// `Gebura` `Normal`
	SetSaveFileRotation(ctx context.Context, in *SetSaveFileRotationRequest, opts ...grpc.CallOption) (*SetSaveFileRotationResponse, error)
	// `Gebura` `Normal`
	ListAppCategories(ctx context.Context, in *ListAppCategoriesRequest, opts ...grpc.CallOption) (*ListAppCategoriesResponse, error)
	// `Gebura` `Normal`
	CreateAppCategory(ctx context.Context, in *CreateAppCategoryRequest, opts ...grpc.CallOption) (*CreateAppCategoryResponse, error)
	// `Gebura` `Normal`
	UpdateAppCategory(ctx context.Context, in *UpdateAppCategoryRequest, opts ...grpc.CallOption) (*UpdateAppCategoryResponse, error)
	// `Gebura` `Normal`
	RemoveAppCategory(ctx context.Context, in *RemoveAppCategoryRequest, opts ...grpc.CallOption) (*RemoveAppCategoryResponse, error)
	// `Netzach` `Normal`
	CreateNotifyTarget(ctx context.Context, in *CreateNotifyTargetRequest, opts ...grpc.CallOption) (*CreateNotifyTargetResponse, error)
	// `Netzach` `Normal`
	UpdateNotifyTarget(ctx context.Context, in *UpdateNotifyTargetRequest, opts ...grpc.CallOption) (*UpdateNotifyTargetResponse, error)
	// `Netzach` `Normal`
	ListNotifyTargets(ctx context.Context, in *ListNotifyTargetsRequest, opts ...grpc.CallOption) (*ListNotifyTargetsResponse, error)
	// `Netzach` `Normal`
	CreateNotifyFlow(ctx context.Context, in *CreateNotifyFlowRequest, opts ...grpc.CallOption) (*CreateNotifyFlowResponse, error)
	// `Netzach` `Normal`
	UpdateNotifyFlow(ctx context.Context, in *UpdateNotifyFlowRequest, opts ...grpc.CallOption) (*UpdateNotifyFlowResponse, error)
	// `Netzach` `Normal`
	ListNotifyFlows(ctx context.Context, in *ListNotifyFlowsRequest, opts ...grpc.CallOption) (*ListNotifyFlowsResponse, error)
	// `Yesod` `Normal`
	CreateFeedConfig(ctx context.Context, in *CreateFeedConfigRequest, opts ...grpc.CallOption) (*CreateFeedConfigResponse, error)
	// `Yesod` `Normal`
	UpdateFeedConfig(ctx context.Context, in *UpdateFeedConfigRequest, opts ...grpc.CallOption) (*UpdateFeedConfigResponse, error)
	// `Yesod` `Normal`
	ListFeedConfigs(ctx context.Context, in *ListFeedConfigsRequest, opts ...grpc.CallOption) (*ListFeedConfigsResponse, error)
	// `Yesod` `Normal`
	ListFeedCategories(ctx context.Context, in *ListFeedCategoriesRequest, opts ...grpc.CallOption) (*ListFeedCategoriesResponse, error)
	// `Yesod` `Normal`
	ListFeedPlatforms(ctx context.Context, in *ListFeedPlatformsRequest, opts ...grpc.CallOption) (*ListFeedPlatformsResponse, error)
	// `Yesod` `Normal`
	ListFeedItems(ctx context.Context, in *ListFeedItemsRequest, opts ...grpc.CallOption) (*ListFeedItemsResponse, error)
	// `Yesod` `Normal`
	GroupFeedItems(ctx context.Context, in *GroupFeedItemsRequest, opts ...grpc.CallOption) (*GroupFeedItemsResponse, error)
	// `Yesod` `Normal`
	GetFeedItem(ctx context.Context, in *GetFeedItemRequest, opts ...grpc.CallOption) (*GetFeedItemResponse, error)
	// `Yesod` `Normal`
	GetBatchFeedItems(ctx context.Context, in *GetBatchFeedItemsRequest, opts ...grpc.CallOption) (*GetBatchFeedItemsResponse, error)
	// `Yesod` `Normal`
	ReadFeedItem(ctx context.Context, in *ReadFeedItemRequest, opts ...grpc.CallOption) (*ReadFeedItemResponse, error)
	// `Yesod` `Normal`
	CreateFeedItemCollection(ctx context.Context, in *CreateFeedItemCollectionRequest, opts ...grpc.CallOption) (*CreateFeedItemCollectionResponse, error)
	// `Yesod` `Normal`
	UpdateFeedItemCollection(ctx context.Context, in *UpdateFeedItemCollectionRequest, opts ...grpc.CallOption) (*UpdateFeedItemCollectionResponse, error)
	// `Yesod` `Normal`
	ListFeedItemCollections(ctx context.Context, in *ListFeedItemCollectionsRequest, opts ...grpc.CallOption) (*ListFeedItemCollectionsResponse, error)
	// `Yesod` `Normal`
	AddFeedItemToCollection(ctx context.Context, in *AddFeedItemToCollectionRequest, opts ...grpc.CallOption) (*AddFeedItemToCollectionResponse, error)
	// `Yesod` `Normal`
	RemoveFeedItemFromCollection(ctx context.Context, in *RemoveFeedItemFromCollectionRequest, opts ...grpc.CallOption) (*RemoveFeedItemFromCollectionResponse, error)
	// `Yesod` `Normal`
	ListCollectionItems(ctx context.Context, in *ListCollectionItemsRequest, opts ...grpc.CallOption) (*ListCollectionItemsResponse, error)
}

type librarianSephirahServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibrarianSephirahServiceClient(cc grpc.ClientConnInterface) LibrarianSephirahServiceClient {
	return &librarianSephirahServiceClient{cc}
}

func (c *librarianSephirahServiceClient) GetServerInformation(ctx context.Context, in *GetServerInformationRequest, opts ...grpc.CallOption) (*GetServerInformationResponse, error) {
	out := new(GetServerInformationResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetServerInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GainUserPrivilege(ctx context.Context, in *GainUserPrivilegeRequest, opts ...grpc.CallOption) (*GainUserPrivilegeResponse, error) {
	out := new(GainUserPrivilegeResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GainUserPrivilege_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error) {
	out := new(RegisterDeviceResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RegisterDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListUserSessions(ctx context.Context, in *ListUserSessionsRequest, opts ...grpc.CallOption) (*ListUserSessionsResponse, error) {
	out := new(ListUserSessionsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListUserSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) DeleteUserSession(ctx context.Context, in *DeleteUserSessionRequest, opts ...grpc.CallOption) (*DeleteUserSessionResponse, error) {
	out := new(DeleteUserSessionResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_DeleteUserSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) LinkAccount(ctx context.Context, in *LinkAccountRequest, opts ...grpc.CallOption) (*LinkAccountResponse, error) {
	out := new(LinkAccountResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_LinkAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UnLinkAccount(ctx context.Context, in *UnLinkAccountRequest, opts ...grpc.CallOption) (*UnLinkAccountResponse, error) {
	out := new(UnLinkAccountResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UnLinkAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListLinkAccounts(ctx context.Context, in *ListLinkAccountsRequest, opts ...grpc.CallOption) (*ListLinkAccountsResponse, error) {
	out := new(ListLinkAccountsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListLinkAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListPorters(ctx context.Context, in *ListPortersRequest, opts ...grpc.CallOption) (*ListPortersResponse, error) {
	out := new(ListPortersResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListPorters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdatePorterStatus(ctx context.Context, in *UpdatePorterStatusRequest, opts ...grpc.CallOption) (*UpdatePorterStatusResponse, error) {
	out := new(UpdatePorterStatusResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdatePorterStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdatePorterPrivilege(ctx context.Context, in *UpdatePorterPrivilegeRequest, opts ...grpc.CallOption) (*UpdatePorterPrivilegeResponse, error) {
	out := new(UpdatePorterPrivilegeResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdatePorterPrivilege_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[0], LibrarianSephirahService_UploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceUploadFileClient{stream}
	return x, nil
}

type LibrarianSephirahService_UploadFileClient interface {
	Send(*UploadFileRequest) error
	Recv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianSephirahServiceUploadFileClient) Recv() (*UploadFileResponse, error) {
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) DownloadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[1], LibrarianSephirahService_DownloadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceDownloadFileClient{stream}
	return x, nil
}

type LibrarianSephirahService_DownloadFileClient interface {
	Send(*DownloadFileRequest) error
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceDownloadFileClient) Send(m *DownloadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianSephirahServiceDownloadFileClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) SimpleUploadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_SimpleUploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[2], LibrarianSephirahService_SimpleUploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceSimpleUploadFileClient{stream}
	return x, nil
}

type LibrarianSephirahService_SimpleUploadFileClient interface {
	Send(*SimpleUploadFileRequest) error
	Recv() (*SimpleUploadFileResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceSimpleUploadFileClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceSimpleUploadFileClient) Send(m *SimpleUploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianSephirahServiceSimpleUploadFileClient) Recv() (*SimpleUploadFileResponse, error) {
	m := new(SimpleUploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) SimpleDownloadFile(ctx context.Context, in *SimpleDownloadFileRequest, opts ...grpc.CallOption) (LibrarianSephirahService_SimpleDownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[3], LibrarianSephirahService_SimpleDownloadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceSimpleDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LibrarianSephirahService_SimpleDownloadFileClient interface {
	Recv() (*SimpleDownloadFileResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceSimpleDownloadFileClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceSimpleDownloadFileClient) Recv() (*SimpleDownloadFileResponse, error) {
	m := new(SimpleDownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) PresignedUploadFile(ctx context.Context, in *PresignedUploadFileRequest, opts ...grpc.CallOption) (*PresignedUploadFileResponse, error) {
	out := new(PresignedUploadFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_PresignedUploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) PresignedUploadFileStatus(ctx context.Context, in *PresignedUploadFileStatusRequest, opts ...grpc.CallOption) (*PresignedUploadFileStatusResponse, error) {
	out := new(PresignedUploadFileStatusResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_PresignedUploadFileStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) PresignedDownloadFile(ctx context.Context, in *PresignedDownloadFileRequest, opts ...grpc.CallOption) (*PresignedDownloadFileResponse, error) {
	out := new(PresignedDownloadFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_PresignedDownloadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UploadImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*UpdateImageResponse, error) {
	out := new(UpdateImageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error) {
	out := new(ListImagesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SearchImages(ctx context.Context, in *SearchImagesRequest, opts ...grpc.CallOption) (*SearchImagesResponse, error) {
	out := new(SearchImagesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SearchImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error) {
	out := new(GetImageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error) {
	out := new(DownloadImageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_DownloadImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error) {
	out := new(CreateAppResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error) {
	out := new(UpdateAppResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error) {
	out := new(ListAppsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SyncApps(ctx context.Context, in *SyncAppsRequest, opts ...grpc.CallOption) (*SyncAppsResponse, error) {
	out := new(SyncAppsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SyncApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SyncAccountApps(ctx context.Context, in *SyncAccountAppsRequest, opts ...grpc.CallOption) (*SyncAccountAppsResponse, error) {
	out := new(SyncAccountAppsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SyncAccountApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) MergeApps(ctx context.Context, in *MergeAppsRequest, opts ...grpc.CallOption) (*MergeAppsResponse, error) {
	out := new(MergeAppsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_MergeApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) PickApp(ctx context.Context, in *PickAppRequest, opts ...grpc.CallOption) (*PickAppResponse, error) {
	out := new(PickAppResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_PickApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SearchApps(ctx context.Context, in *SearchAppsRequest, opts ...grpc.CallOption) (*SearchAppsResponse, error) {
	out := new(SearchAppsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SearchApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error) {
	out := new(GetAppResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetBoundApps(ctx context.Context, in *GetBoundAppsRequest, opts ...grpc.CallOption) (*GetBoundAppsResponse, error) {
	out := new(GetBoundAppsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetBoundApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) PurchaseApp(ctx context.Context, in *PurchaseAppRequest, opts ...grpc.CallOption) (*PurchaseAppResponse, error) {
	out := new(PurchaseAppResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_PurchaseApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetPurchasedApps(ctx context.Context, in *GetPurchasedAppsRequest, opts ...grpc.CallOption) (*GetPurchasedAppsResponse, error) {
	out := new(GetPurchasedAppsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetPurchasedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateAppPackage(ctx context.Context, in *CreateAppPackageRequest, opts ...grpc.CallOption) (*CreateAppPackageResponse, error) {
	out := new(CreateAppPackageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateAppPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateAppPackage(ctx context.Context, in *UpdateAppPackageRequest, opts ...grpc.CallOption) (*UpdateAppPackageResponse, error) {
	out := new(UpdateAppPackageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateAppPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListAppPackages(ctx context.Context, in *ListAppPackagesRequest, opts ...grpc.CallOption) (*ListAppPackagesResponse, error) {
	out := new(ListAppPackagesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListAppPackages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) AssignAppPackage(ctx context.Context, in *AssignAppPackageRequest, opts ...grpc.CallOption) (*AssignAppPackageResponse, error) {
	out := new(AssignAppPackageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_AssignAppPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UnAssignAppPackage(ctx context.Context, in *UnAssignAppPackageRequest, opts ...grpc.CallOption) (*UnAssignAppPackageResponse, error) {
	out := new(UnAssignAppPackageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UnAssignAppPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ReportAppPackages(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_ReportAppPackagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[4], LibrarianSephirahService_ReportAppPackages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceReportAppPackagesClient{stream}
	return x, nil
}

type LibrarianSephirahService_ReportAppPackagesClient interface {
	Send(*ReportAppPackagesRequest) error
	Recv() (*ReportAppPackagesResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceReportAppPackagesClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceReportAppPackagesClient) Send(m *ReportAppPackagesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianSephirahServiceReportAppPackagesClient) Recv() (*ReportAppPackagesResponse, error) {
	m := new(ReportAppPackagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) AddAppPackageRunTime(ctx context.Context, in *AddAppPackageRunTimeRequest, opts ...grpc.CallOption) (*AddAppPackageRunTimeResponse, error) {
	out := new(AddAppPackageRunTimeResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_AddAppPackageRunTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SumAppPackageRunTime(ctx context.Context, in *SumAppPackageRunTimeRequest, opts ...grpc.CallOption) (*SumAppPackageRunTimeResponse, error) {
	out := new(SumAppPackageRunTimeResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SumAppPackageRunTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UploadGameSaveFile(ctx context.Context, in *UploadGameSaveFileRequest, opts ...grpc.CallOption) (*UploadGameSaveFileResponse, error) {
	out := new(UploadGameSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UploadGameSaveFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) DownloadGameSaveFile(ctx context.Context, in *DownloadGameSaveFileRequest, opts ...grpc.CallOption) (*DownloadGameSaveFileResponse, error) {
	out := new(DownloadGameSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_DownloadGameSaveFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListGameSaveFiles(ctx context.Context, in *ListGameSaveFilesRequest, opts ...grpc.CallOption) (*ListGameSaveFilesResponse, error) {
	out := new(ListGameSaveFilesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListGameSaveFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RemoveGameSaveFile(ctx context.Context, in *RemoveGameSaveFileRequest, opts ...grpc.CallOption) (*RemoveGameSaveFileResponse, error) {
	out := new(RemoveGameSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RemoveGameSaveFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) PinGameSaveFile(ctx context.Context, in *PinGameSaveFileRequest, opts ...grpc.CallOption) (*PinGameSaveFileResponse, error) {
	out := new(PinGameSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_PinGameSaveFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UnpinGameSaveFile(ctx context.Context, in *UnpinGameSaveFileRequest, opts ...grpc.CallOption) (*UnpinGameSaveFileResponse, error) {
	out := new(UnpinGameSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UnpinGameSaveFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SetUserSaveFileCapacity(ctx context.Context, in *SetUserSaveFileCapacityRequest, opts ...grpc.CallOption) (*SetUserSaveFileCapacityResponse, error) {
	out := new(SetUserSaveFileCapacityResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SetUserSaveFileCapacity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SetSaveFileRotation(ctx context.Context, in *SetSaveFileRotationRequest, opts ...grpc.CallOption) (*SetSaveFileRotationResponse, error) {
	out := new(SetSaveFileRotationResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SetSaveFileRotation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListAppCategories(ctx context.Context, in *ListAppCategoriesRequest, opts ...grpc.CallOption) (*ListAppCategoriesResponse, error) {
	out := new(ListAppCategoriesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListAppCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateAppCategory(ctx context.Context, in *CreateAppCategoryRequest, opts ...grpc.CallOption) (*CreateAppCategoryResponse, error) {
	out := new(CreateAppCategoryResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateAppCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateAppCategory(ctx context.Context, in *UpdateAppCategoryRequest, opts ...grpc.CallOption) (*UpdateAppCategoryResponse, error) {
	out := new(UpdateAppCategoryResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateAppCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RemoveAppCategory(ctx context.Context, in *RemoveAppCategoryRequest, opts ...grpc.CallOption) (*RemoveAppCategoryResponse, error) {
	out := new(RemoveAppCategoryResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RemoveAppCategory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateNotifyTarget(ctx context.Context, in *CreateNotifyTargetRequest, opts ...grpc.CallOption) (*CreateNotifyTargetResponse, error) {
	out := new(CreateNotifyTargetResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateNotifyTarget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateNotifyTarget(ctx context.Context, in *UpdateNotifyTargetRequest, opts ...grpc.CallOption) (*UpdateNotifyTargetResponse, error) {
	out := new(UpdateNotifyTargetResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateNotifyTarget_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListNotifyTargets(ctx context.Context, in *ListNotifyTargetsRequest, opts ...grpc.CallOption) (*ListNotifyTargetsResponse, error) {
	out := new(ListNotifyTargetsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListNotifyTargets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateNotifyFlow(ctx context.Context, in *CreateNotifyFlowRequest, opts ...grpc.CallOption) (*CreateNotifyFlowResponse, error) {
	out := new(CreateNotifyFlowResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateNotifyFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateNotifyFlow(ctx context.Context, in *UpdateNotifyFlowRequest, opts ...grpc.CallOption) (*UpdateNotifyFlowResponse, error) {
	out := new(UpdateNotifyFlowResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateNotifyFlow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListNotifyFlows(ctx context.Context, in *ListNotifyFlowsRequest, opts ...grpc.CallOption) (*ListNotifyFlowsResponse, error) {
	out := new(ListNotifyFlowsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListNotifyFlows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateFeedConfig(ctx context.Context, in *CreateFeedConfigRequest, opts ...grpc.CallOption) (*CreateFeedConfigResponse, error) {
	out := new(CreateFeedConfigResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateFeedConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateFeedConfig(ctx context.Context, in *UpdateFeedConfigRequest, opts ...grpc.CallOption) (*UpdateFeedConfigResponse, error) {
	out := new(UpdateFeedConfigResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateFeedConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedConfigs(ctx context.Context, in *ListFeedConfigsRequest, opts ...grpc.CallOption) (*ListFeedConfigsResponse, error) {
	out := new(ListFeedConfigsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedCategories(ctx context.Context, in *ListFeedCategoriesRequest, opts ...grpc.CallOption) (*ListFeedCategoriesResponse, error) {
	out := new(ListFeedCategoriesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedPlatforms(ctx context.Context, in *ListFeedPlatformsRequest, opts ...grpc.CallOption) (*ListFeedPlatformsResponse, error) {
	out := new(ListFeedPlatformsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedPlatforms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedItems(ctx context.Context, in *ListFeedItemsRequest, opts ...grpc.CallOption) (*ListFeedItemsResponse, error) {
	out := new(ListFeedItemsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GroupFeedItems(ctx context.Context, in *GroupFeedItemsRequest, opts ...grpc.CallOption) (*GroupFeedItemsResponse, error) {
	out := new(GroupFeedItemsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GroupFeedItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetFeedItem(ctx context.Context, in *GetFeedItemRequest, opts ...grpc.CallOption) (*GetFeedItemResponse, error) {
	out := new(GetFeedItemResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetFeedItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetBatchFeedItems(ctx context.Context, in *GetBatchFeedItemsRequest, opts ...grpc.CallOption) (*GetBatchFeedItemsResponse, error) {
	out := new(GetBatchFeedItemsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetBatchFeedItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ReadFeedItem(ctx context.Context, in *ReadFeedItemRequest, opts ...grpc.CallOption) (*ReadFeedItemResponse, error) {
	out := new(ReadFeedItemResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ReadFeedItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateFeedItemCollection(ctx context.Context, in *CreateFeedItemCollectionRequest, opts ...grpc.CallOption) (*CreateFeedItemCollectionResponse, error) {
	out := new(CreateFeedItemCollectionResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateFeedItemCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateFeedItemCollection(ctx context.Context, in *UpdateFeedItemCollectionRequest, opts ...grpc.CallOption) (*UpdateFeedItemCollectionResponse, error) {
	out := new(UpdateFeedItemCollectionResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateFeedItemCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedItemCollections(ctx context.Context, in *ListFeedItemCollectionsRequest, opts ...grpc.CallOption) (*ListFeedItemCollectionsResponse, error) {
	out := new(ListFeedItemCollectionsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedItemCollections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) AddFeedItemToCollection(ctx context.Context, in *AddFeedItemToCollectionRequest, opts ...grpc.CallOption) (*AddFeedItemToCollectionResponse, error) {
	out := new(AddFeedItemToCollectionResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_AddFeedItemToCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RemoveFeedItemFromCollection(ctx context.Context, in *RemoveFeedItemFromCollectionRequest, opts ...grpc.CallOption) (*RemoveFeedItemFromCollectionResponse, error) {
	out := new(RemoveFeedItemFromCollectionResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RemoveFeedItemFromCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListCollectionItems(ctx context.Context, in *ListCollectionItemsRequest, opts ...grpc.CallOption) (*ListCollectionItemsResponse, error) {
	out := new(ListCollectionItemsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListCollectionItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibrarianSephirahServiceServer is the server API for LibrarianSephirahService service.
// All implementations must embed UnimplementedLibrarianSephirahServiceServer
// for forward compatibility
type LibrarianSephirahServiceServer interface {
	// Allow anonymous call, use accessToken to get complete information
	GetServerInformation(context.Context, *GetServerInformationRequest) (*GetServerInformationResponse, error)
	// `Tiphereth` `Normal` Login via password and get two token
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	// `Tiphereth` `Normal` `Sentinel` `Porter` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// `Tiphereth` `Porter` Get access_token of another user with allowed privilege
	GainUserPrivilege(context.Context, *GainUserPrivilegeRequest) (*GainUserPrivilegeResponse, error)
	// `Tiphereth` `Normal` Client should register device after the first login
	// and store the device_id locally.
	// The server could add extra limits to non-registered device
	RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error)
	// `Tiphereth` `Normal`
	ListUserSessions(context.Context, *ListUserSessionsRequest) (*ListUserSessionsResponse, error)
	// `Tiphereth` `Normal` delete session will revoke refresh_token immediately.
	// NOTE: This can also be used to logout on server side.
	DeleteUserSession(context.Context, *DeleteUserSessionRequest) (*DeleteUserSessionResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// `Tiphereth` `Admin` `Normal limited`
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// `Tiphereth` `Normal` Bind third-party account to current user.
	// Create (account)<-[Equal]->(current user)
	LinkAccount(context.Context, *LinkAccountRequest) (*LinkAccountResponse, error)
	// `Tiphereth` `Normal` Unbind third-party account from current user.
	// Delete (account)<-[Equal]->(current user)
	UnLinkAccount(context.Context, *UnLinkAccountRequest) (*UnLinkAccountResponse, error)
	// `Tiphereth` `Normal` List third-party account binded to current user.
	// Match ()<-[Equal]->(current user)
	ListLinkAccounts(context.Context, *ListLinkAccountsRequest) (*ListLinkAccountsResponse, error)
	// `Tiphereth` `Normal`
	ListPorters(context.Context, *ListPortersRequest) (*ListPortersResponse, error)
	// `Tiphereth` `Admin`
	UpdatePorterStatus(context.Context, *UpdatePorterStatusRequest) (*UpdatePorterStatusResponse, error)
	// `Tiphereth` `Normal only` Set porter privilege, default none privilege.
	UpdatePorterPrivilege(context.Context, *UpdatePorterPrivilegeRequest) (*UpdatePorterPrivilegeResponse, error)
	// `Binah` `upload_token`
	UploadFile(LibrarianSephirahService_UploadFileServer) error
	// `Binah` `download_token`
	DownloadFile(LibrarianSephirahService_DownloadFileServer) error
	// `Binah` `upload_token`
	// Maximum 256M
	// Server must send response at least once a minute to keepalive.
	// Client should ignore in_process response and wait for success or error response.
	SimpleUploadFile(LibrarianSephirahService_SimpleUploadFileServer) error
	// `Binah` `download_token`
	// Server will not check the receiving state
	SimpleDownloadFile(*SimpleDownloadFileRequest, LibrarianSephirahService_SimpleDownloadFileServer) error
	// `Binah` `upload_token`
	// Upload file through http url
	PresignedUploadFile(context.Context, *PresignedUploadFileRequest) (*PresignedUploadFileResponse, error)
	// `Binah` `upload_token`
	// Report file transfer status. Mainly used to trigger server post-process immediately
	PresignedUploadFileStatus(context.Context, *PresignedUploadFileStatusRequest) (*PresignedUploadFileStatusResponse, error)
	// `Binah` `download_token`
	// Download file through http url
	PresignedDownloadFile(context.Context, *PresignedDownloadFileRequest) (*PresignedDownloadFileResponse, error)
	// `Chesed` `Normal`
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	// `Chesed` `Normal`
	UpdateImage(context.Context, *UpdateImageRequest) (*UpdateImageResponse, error)
	// `Chesed` `Normal`
	ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error)
	// `Chesed` `Normal`
	SearchImages(context.Context, *SearchImagesRequest) (*SearchImagesResponse, error)
	// `Chesed` `Normal`
	GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error)
	// `Chesed` `Normal`
	DownloadImage(context.Context, *DownloadImageRequest) (*DownloadImageResponse, error)
	// `Gebura` `Admin`
	CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error)
	// `Gebura` `Admin`
	UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error)
	// `Gebura` `Admin` Used to manage apps
	ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error)
	// `Gebura` `Admin` Asynchronous update apps.
	// Request on INTERNAL app applies to all bound external apps.
	// Create an INTERNAL app when requested external app does not exist
	// Server should implement a sync rate limit to prevent abuse,
	// when rate limit reached, return without real sync.
	SyncApps(context.Context, *SyncAppsRequest) (*SyncAppsResponse, error)
	// `Gebura` `Admin` Asynchronously update apps associated with an account.
	// Create an INTERNAL app when associated external app does not exist.
	// Server should implement a sync rate limit to prevent abuse,
	// when rate limit reached, return without real sync.
	SyncAccountApps(context.Context, *SyncAccountAppsRequest) (*SyncAccountAppsResponse, error)
	// `Gebura` `Admin` Merge two apps
	MergeApps(context.Context, *MergeAppsRequest) (*MergeAppsResponse, error)
	// `Gebura` `Admin` Pick one app out from merged
	PickApp(context.Context, *PickAppRequest) (*PickAppResponse, error)
	// `Gebura` `Normal`
	SearchApps(context.Context, *SearchAppsRequest) (*SearchAppsResponse, error)
	// `Gebura` `Normal` Flattened app info, data priority is 1.INTERNAL, 2.STEAM.
	// e.g. `id` will always from INTERNAL, `description` may from STEAM if it is empty in INTERNAL
	GetApp(context.Context, *GetAppRequest) (*GetAppResponse, error)
	// `Gebura` `Normal` Original bound apps info of required app
	GetBoundApps(context.Context, *GetBoundAppsRequest) (*GetBoundAppsResponse, error)
	// `Gebura` `Normal`
	PurchaseApp(context.Context, *PurchaseAppRequest) (*PurchaseAppResponse, error)
	// `Gebura` `Normal`
	// Default get user purchased apps
	// Use `source` to get purchase info from bound account
	// only support steam
	GetPurchasedApps(context.Context, *GetPurchasedAppsRequest) (*GetPurchasedAppsResponse, error)
	// `Gebura` `Normal`
	CreateAppPackage(context.Context, *CreateAppPackageRequest) (*CreateAppPackageResponse, error)
	// `Gebura` `Normal`
	UpdateAppPackage(context.Context, *UpdateAppPackageRequest) (*UpdateAppPackageResponse, error)
	// `Gebura` `Normal`
	ListAppPackages(context.Context, *ListAppPackagesRequest) (*ListAppPackagesResponse, error)
	// `Gebura` `Normal`
	AssignAppPackage(context.Context, *AssignAppPackageRequest) (*AssignAppPackageResponse, error)
	// `Gebura` `Normal`
	UnAssignAppPackage(context.Context, *UnAssignAppPackageRequest) (*UnAssignAppPackageResponse, error)
	// `Gebura` `Sentinel`
	ReportAppPackages(LibrarianSephirahService_ReportAppPackagesServer) error
	// `Gebura` `Normal`
	AddAppPackageRunTime(context.Context, *AddAppPackageRunTimeRequest) (*AddAppPackageRunTimeResponse, error)
	// `Gebura` `Normal` Only support AGGREGATION_TYPE_OVERALL
	SumAppPackageRunTime(context.Context, *SumAppPackageRunTimeRequest) (*SumAppPackageRunTimeResponse, error)
	// `Gebura` `Normal`
	UploadGameSaveFile(context.Context, *UploadGameSaveFileRequest) (*UploadGameSaveFileResponse, error)
	// `Gebura` `Normal`
	DownloadGameSaveFile(context.Context, *DownloadGameSaveFileRequest) (*DownloadGameSaveFileResponse, error)
	// `Gebura` `Normal`
	ListGameSaveFiles(context.Context, *ListGameSaveFilesRequest) (*ListGameSaveFilesResponse, error)
	// `Gebura` `Normal`
	RemoveGameSaveFile(context.Context, *RemoveGameSaveFileRequest) (*RemoveGameSaveFileResponse, error)
	// `Gebura` `Normal`
	PinGameSaveFile(context.Context, *PinGameSaveFileRequest) (*PinGameSaveFileResponse, error)
	// `Gebura` `Normal`
	UnpinGameSaveFile(context.Context, *UnpinGameSaveFileRequest) (*UnpinGameSaveFileResponse, error)
	// `Gebura` `Admin`
	SetUserSaveFileCapacity(context.Context, *SetUserSaveFileCapacityRequest) (*SetUserSaveFileCapacityResponse, error)
	// `Gebura` `Normal`
	SetSaveFileRotation(context.Context, *SetSaveFileRotationRequest) (*SetSaveFileRotationResponse, error)
	// `Gebura` `Normal`
	ListAppCategories(context.Context, *ListAppCategoriesRequest) (*ListAppCategoriesResponse, error)
	// `Gebura` `Normal`
	CreateAppCategory(context.Context, *CreateAppCategoryRequest) (*CreateAppCategoryResponse, error)
	// `Gebura` `Normal`
	UpdateAppCategory(context.Context, *UpdateAppCategoryRequest) (*UpdateAppCategoryResponse, error)
	// `Gebura` `Normal`
	RemoveAppCategory(context.Context, *RemoveAppCategoryRequest) (*RemoveAppCategoryResponse, error)
	// `Netzach` `Normal`
	CreateNotifyTarget(context.Context, *CreateNotifyTargetRequest) (*CreateNotifyTargetResponse, error)
	// `Netzach` `Normal`
	UpdateNotifyTarget(context.Context, *UpdateNotifyTargetRequest) (*UpdateNotifyTargetResponse, error)
	// `Netzach` `Normal`
	ListNotifyTargets(context.Context, *ListNotifyTargetsRequest) (*ListNotifyTargetsResponse, error)
	// `Netzach` `Normal`
	CreateNotifyFlow(context.Context, *CreateNotifyFlowRequest) (*CreateNotifyFlowResponse, error)
	// `Netzach` `Normal`
	UpdateNotifyFlow(context.Context, *UpdateNotifyFlowRequest) (*UpdateNotifyFlowResponse, error)
	// `Netzach` `Normal`
	ListNotifyFlows(context.Context, *ListNotifyFlowsRequest) (*ListNotifyFlowsResponse, error)
	// `Yesod` `Normal`
	CreateFeedConfig(context.Context, *CreateFeedConfigRequest) (*CreateFeedConfigResponse, error)
	// `Yesod` `Normal`
	UpdateFeedConfig(context.Context, *UpdateFeedConfigRequest) (*UpdateFeedConfigResponse, error)
	// `Yesod` `Normal`
	ListFeedConfigs(context.Context, *ListFeedConfigsRequest) (*ListFeedConfigsResponse, error)
	// `Yesod` `Normal`
	ListFeedCategories(context.Context, *ListFeedCategoriesRequest) (*ListFeedCategoriesResponse, error)
	// `Yesod` `Normal`
	ListFeedPlatforms(context.Context, *ListFeedPlatformsRequest) (*ListFeedPlatformsResponse, error)
	// `Yesod` `Normal`
	ListFeedItems(context.Context, *ListFeedItemsRequest) (*ListFeedItemsResponse, error)
	// `Yesod` `Normal`
	GroupFeedItems(context.Context, *GroupFeedItemsRequest) (*GroupFeedItemsResponse, error)
	// `Yesod` `Normal`
	GetFeedItem(context.Context, *GetFeedItemRequest) (*GetFeedItemResponse, error)
	// `Yesod` `Normal`
	GetBatchFeedItems(context.Context, *GetBatchFeedItemsRequest) (*GetBatchFeedItemsResponse, error)
	// `Yesod` `Normal`
	ReadFeedItem(context.Context, *ReadFeedItemRequest) (*ReadFeedItemResponse, error)
	// `Yesod` `Normal`
	CreateFeedItemCollection(context.Context, *CreateFeedItemCollectionRequest) (*CreateFeedItemCollectionResponse, error)
	// `Yesod` `Normal`
	UpdateFeedItemCollection(context.Context, *UpdateFeedItemCollectionRequest) (*UpdateFeedItemCollectionResponse, error)
	// `Yesod` `Normal`
	ListFeedItemCollections(context.Context, *ListFeedItemCollectionsRequest) (*ListFeedItemCollectionsResponse, error)
	// `Yesod` `Normal`
	AddFeedItemToCollection(context.Context, *AddFeedItemToCollectionRequest) (*AddFeedItemToCollectionResponse, error)
	// `Yesod` `Normal`
	RemoveFeedItemFromCollection(context.Context, *RemoveFeedItemFromCollectionRequest) (*RemoveFeedItemFromCollectionResponse, error)
	// `Yesod` `Normal`
	ListCollectionItems(context.Context, *ListCollectionItemsRequest) (*ListCollectionItemsResponse, error)
	mustEmbedUnimplementedLibrarianSephirahServiceServer()
}

// UnimplementedLibrarianSephirahServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLibrarianSephirahServiceServer struct {
}

func (UnimplementedLibrarianSephirahServiceServer) GetServerInformation(context.Context, *GetServerInformationRequest) (*GetServerInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInformation not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GainUserPrivilege(context.Context, *GainUserPrivilegeRequest) (*GainUserPrivilegeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GainUserPrivilege not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListUserSessions(context.Context, *ListUserSessionsRequest) (*ListUserSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserSessions not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DeleteUserSession(context.Context, *DeleteUserSessionRequest) (*DeleteUserSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserSession not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) LinkAccount(context.Context, *LinkAccountRequest) (*LinkAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkAccount not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UnLinkAccount(context.Context, *UnLinkAccountRequest) (*UnLinkAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLinkAccount not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListLinkAccounts(context.Context, *ListLinkAccountsRequest) (*ListLinkAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLinkAccounts not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListPorters(context.Context, *ListPortersRequest) (*ListPortersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPorters not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdatePorterStatus(context.Context, *UpdatePorterStatusRequest) (*UpdatePorterStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePorterStatus not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdatePorterPrivilege(context.Context, *UpdatePorterPrivilegeRequest) (*UpdatePorterPrivilegeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePorterPrivilege not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UploadFile(LibrarianSephirahService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DownloadFile(LibrarianSephirahService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SimpleUploadFile(LibrarianSephirahService_SimpleUploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SimpleUploadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SimpleDownloadFile(*SimpleDownloadFileRequest, LibrarianSephirahService_SimpleDownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SimpleDownloadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) PresignedUploadFile(context.Context, *PresignedUploadFileRequest) (*PresignedUploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresignedUploadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) PresignedUploadFileStatus(context.Context, *PresignedUploadFileStatusRequest) (*PresignedUploadFileStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresignedUploadFileStatus not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) PresignedDownloadFile(context.Context, *PresignedDownloadFileRequest) (*PresignedDownloadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresignedDownloadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateImage(context.Context, *UpdateImageRequest) (*UpdateImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImages not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SearchImages(context.Context, *SearchImagesRequest) (*SearchImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchImages not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DownloadImage(context.Context, *DownloadImageRequest) (*DownloadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadImage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SyncApps(context.Context, *SyncAppsRequest) (*SyncAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncApps not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SyncAccountApps(context.Context, *SyncAccountAppsRequest) (*SyncAccountAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAccountApps not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) MergeApps(context.Context, *MergeAppsRequest) (*MergeAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeApps not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) PickApp(context.Context, *PickAppRequest) (*PickAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SearchApps(context.Context, *SearchAppsRequest) (*SearchAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchApps not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetApp(context.Context, *GetAppRequest) (*GetAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetBoundApps(context.Context, *GetBoundAppsRequest) (*GetBoundAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoundApps not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) PurchaseApp(context.Context, *PurchaseAppRequest) (*PurchaseAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetPurchasedApps(context.Context, *GetPurchasedAppsRequest) (*GetPurchasedAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchasedApps not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateAppPackage(context.Context, *CreateAppPackageRequest) (*CreateAppPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppPackage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateAppPackage(context.Context, *UpdateAppPackageRequest) (*UpdateAppPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppPackage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListAppPackages(context.Context, *ListAppPackagesRequest) (*ListAppPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppPackages not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) AssignAppPackage(context.Context, *AssignAppPackageRequest) (*AssignAppPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignAppPackage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UnAssignAppPackage(context.Context, *UnAssignAppPackageRequest) (*UnAssignAppPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnAssignAppPackage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ReportAppPackages(LibrarianSephirahService_ReportAppPackagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportAppPackages not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) AddAppPackageRunTime(context.Context, *AddAppPackageRunTimeRequest) (*AddAppPackageRunTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppPackageRunTime not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SumAppPackageRunTime(context.Context, *SumAppPackageRunTimeRequest) (*SumAppPackageRunTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SumAppPackageRunTime not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UploadGameSaveFile(context.Context, *UploadGameSaveFileRequest) (*UploadGameSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGameSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DownloadGameSaveFile(context.Context, *DownloadGameSaveFileRequest) (*DownloadGameSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadGameSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListGameSaveFiles(context.Context, *ListGameSaveFilesRequest) (*ListGameSaveFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameSaveFiles not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RemoveGameSaveFile(context.Context, *RemoveGameSaveFileRequest) (*RemoveGameSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGameSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) PinGameSaveFile(context.Context, *PinGameSaveFileRequest) (*PinGameSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinGameSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UnpinGameSaveFile(context.Context, *UnpinGameSaveFileRequest) (*UnpinGameSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpinGameSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SetUserSaveFileCapacity(context.Context, *SetUserSaveFileCapacityRequest) (*SetUserSaveFileCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserSaveFileCapacity not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SetSaveFileRotation(context.Context, *SetSaveFileRotationRequest) (*SetSaveFileRotationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSaveFileRotation not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListAppCategories(context.Context, *ListAppCategoriesRequest) (*ListAppCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppCategories not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateAppCategory(context.Context, *CreateAppCategoryRequest) (*CreateAppCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppCategory not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateAppCategory(context.Context, *UpdateAppCategoryRequest) (*UpdateAppCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppCategory not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RemoveAppCategory(context.Context, *RemoveAppCategoryRequest) (*RemoveAppCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAppCategory not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateNotifyTarget(context.Context, *CreateNotifyTargetRequest) (*CreateNotifyTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotifyTarget not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateNotifyTarget(context.Context, *UpdateNotifyTargetRequest) (*UpdateNotifyTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifyTarget not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListNotifyTargets(context.Context, *ListNotifyTargetsRequest) (*ListNotifyTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifyTargets not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateNotifyFlow(context.Context, *CreateNotifyFlowRequest) (*CreateNotifyFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotifyFlow not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateNotifyFlow(context.Context, *UpdateNotifyFlowRequest) (*UpdateNotifyFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifyFlow not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListNotifyFlows(context.Context, *ListNotifyFlowsRequest) (*ListNotifyFlowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifyFlows not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateFeedConfig(context.Context, *CreateFeedConfigRequest) (*CreateFeedConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedConfig not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateFeedConfig(context.Context, *UpdateFeedConfigRequest) (*UpdateFeedConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedConfig not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedConfigs(context.Context, *ListFeedConfigsRequest) (*ListFeedConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedConfigs not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedCategories(context.Context, *ListFeedCategoriesRequest) (*ListFeedCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedCategories not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedPlatforms(context.Context, *ListFeedPlatformsRequest) (*ListFeedPlatformsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedPlatforms not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedItems(context.Context, *ListFeedItemsRequest) (*ListFeedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedItems not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GroupFeedItems(context.Context, *GroupFeedItemsRequest) (*GroupFeedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupFeedItems not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetFeedItem(context.Context, *GetFeedItemRequest) (*GetFeedItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedItem not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetBatchFeedItems(context.Context, *GetBatchFeedItemsRequest) (*GetBatchFeedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchFeedItems not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ReadFeedItem(context.Context, *ReadFeedItemRequest) (*ReadFeedItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFeedItem not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateFeedItemCollection(context.Context, *CreateFeedItemCollectionRequest) (*CreateFeedItemCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedItemCollection not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateFeedItemCollection(context.Context, *UpdateFeedItemCollectionRequest) (*UpdateFeedItemCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedItemCollection not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedItemCollections(context.Context, *ListFeedItemCollectionsRequest) (*ListFeedItemCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedItemCollections not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) AddFeedItemToCollection(context.Context, *AddFeedItemToCollectionRequest) (*AddFeedItemToCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeedItemToCollection not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RemoveFeedItemFromCollection(context.Context, *RemoveFeedItemFromCollectionRequest) (*RemoveFeedItemFromCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFeedItemFromCollection not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListCollectionItems(context.Context, *ListCollectionItemsRequest) (*ListCollectionItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollectionItems not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) mustEmbedUnimplementedLibrarianSephirahServiceServer() {
}

// UnsafeLibrarianSephirahServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibrarianSephirahServiceServer will
// result in compilation errors.
type UnsafeLibrarianSephirahServiceServer interface {
	mustEmbedUnimplementedLibrarianSephirahServiceServer()
}

func RegisterLibrarianSephirahServiceServer(s grpc.ServiceRegistrar, srv LibrarianSephirahServiceServer) {
	s.RegisterService(&LibrarianSephirahService_ServiceDesc, srv)
}

func _LibrarianSephirahService_GetServerInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetServerInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetServerInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetServerInformation(ctx, req.(*GetServerInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GainUserPrivilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GainUserPrivilegeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GainUserPrivilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GainUserPrivilege_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GainUserPrivilege(ctx, req.(*GainUserPrivilegeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RegisterDevice(ctx, req.(*RegisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListUserSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListUserSessions(ctx, req.(*ListUserSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_DeleteUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).DeleteUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_DeleteUserSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).DeleteUserSession(ctx, req.(*DeleteUserSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_LinkAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).LinkAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_LinkAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).LinkAccount(ctx, req.(*LinkAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UnLinkAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLinkAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UnLinkAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UnLinkAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UnLinkAccount(ctx, req.(*UnLinkAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListLinkAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLinkAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListLinkAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListLinkAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListLinkAccounts(ctx, req.(*ListLinkAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListPorters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListPorters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListPorters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListPorters(ctx, req.(*ListPortersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdatePorterStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePorterStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdatePorterStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdatePorterStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdatePorterStatus(ctx, req.(*UpdatePorterStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdatePorterPrivilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePorterPrivilegeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdatePorterPrivilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdatePorterPrivilege_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdatePorterPrivilege(ctx, req.(*UpdatePorterPrivilegeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).UploadFile(&librarianSephirahServiceUploadFileServer{stream})
}

type LibrarianSephirahService_UploadFileServer interface {
	Send(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type librarianSephirahServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceUploadFileServer) Send(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianSephirahServiceUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianSephirahService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).DownloadFile(&librarianSephirahServiceDownloadFileServer{stream})
}

type LibrarianSephirahService_DownloadFileServer interface {
	Send(*DownloadFileResponse) error
	Recv() (*DownloadFileRequest, error)
	grpc.ServerStream
}

type librarianSephirahServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceDownloadFileServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianSephirahServiceDownloadFileServer) Recv() (*DownloadFileRequest, error) {
	m := new(DownloadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianSephirahService_SimpleUploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).SimpleUploadFile(&librarianSephirahServiceSimpleUploadFileServer{stream})
}

type LibrarianSephirahService_SimpleUploadFileServer interface {
	Send(*SimpleUploadFileResponse) error
	Recv() (*SimpleUploadFileRequest, error)
	grpc.ServerStream
}

type librarianSephirahServiceSimpleUploadFileServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceSimpleUploadFileServer) Send(m *SimpleUploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianSephirahServiceSimpleUploadFileServer) Recv() (*SimpleUploadFileRequest, error) {
	m := new(SimpleUploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianSephirahService_SimpleDownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SimpleDownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LibrarianSephirahServiceServer).SimpleDownloadFile(m, &librarianSephirahServiceSimpleDownloadFileServer{stream})
}

type LibrarianSephirahService_SimpleDownloadFileServer interface {
	Send(*SimpleDownloadFileResponse) error
	grpc.ServerStream
}

type librarianSephirahServiceSimpleDownloadFileServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceSimpleDownloadFileServer) Send(m *SimpleDownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LibrarianSephirahService_PresignedUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresignedUploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).PresignedUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_PresignedUploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).PresignedUploadFile(ctx, req.(*PresignedUploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_PresignedUploadFileStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresignedUploadFileStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).PresignedUploadFileStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_PresignedUploadFileStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).PresignedUploadFileStatus(ctx, req.(*PresignedUploadFileStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_PresignedDownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresignedDownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).PresignedDownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_PresignedDownloadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).PresignedDownloadFile(ctx, req.(*PresignedDownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UploadImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateImage(ctx, req.(*UpdateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListImages(ctx, req.(*ListImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SearchImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SearchImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SearchImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SearchImages(ctx, req.(*SearchImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetImage(ctx, req.(*GetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_DownloadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).DownloadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_DownloadImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).DownloadImage(ctx, req.(*DownloadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateApp(ctx, req.(*CreateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateApp(ctx, req.(*UpdateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SyncApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SyncApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SyncApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SyncApps(ctx, req.(*SyncAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SyncAccountApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAccountAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SyncAccountApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SyncAccountApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SyncAccountApps(ctx, req.(*SyncAccountAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_MergeApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).MergeApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_MergeApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).MergeApps(ctx, req.(*MergeAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_PickApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).PickApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_PickApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).PickApp(ctx, req.(*PickAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SearchApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SearchApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SearchApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SearchApps(ctx, req.(*SearchAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetApp(ctx, req.(*GetAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetBoundApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBoundAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetBoundApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetBoundApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetBoundApps(ctx, req.(*GetBoundAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_PurchaseApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).PurchaseApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_PurchaseApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).PurchaseApp(ctx, req.(*PurchaseAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetPurchasedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchasedAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetPurchasedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetPurchasedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetPurchasedApps(ctx, req.(*GetPurchasedAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateAppPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateAppPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateAppPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateAppPackage(ctx, req.(*CreateAppPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateAppPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateAppPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateAppPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateAppPackage(ctx, req.(*UpdateAppPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListAppPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListAppPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListAppPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListAppPackages(ctx, req.(*ListAppPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_AssignAppPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignAppPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).AssignAppPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_AssignAppPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).AssignAppPackage(ctx, req.(*AssignAppPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UnAssignAppPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnAssignAppPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UnAssignAppPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UnAssignAppPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UnAssignAppPackage(ctx, req.(*UnAssignAppPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ReportAppPackages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).ReportAppPackages(&librarianSephirahServiceReportAppPackagesServer{stream})
}

type LibrarianSephirahService_ReportAppPackagesServer interface {
	Send(*ReportAppPackagesResponse) error
	Recv() (*ReportAppPackagesRequest, error)
	grpc.ServerStream
}

type librarianSephirahServiceReportAppPackagesServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceReportAppPackagesServer) Send(m *ReportAppPackagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianSephirahServiceReportAppPackagesServer) Recv() (*ReportAppPackagesRequest, error) {
	m := new(ReportAppPackagesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianSephirahService_AddAppPackageRunTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppPackageRunTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).AddAppPackageRunTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_AddAppPackageRunTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).AddAppPackageRunTime(ctx, req.(*AddAppPackageRunTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SumAppPackageRunTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumAppPackageRunTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SumAppPackageRunTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SumAppPackageRunTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SumAppPackageRunTime(ctx, req.(*SumAppPackageRunTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UploadGameSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadGameSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UploadGameSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UploadGameSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UploadGameSaveFile(ctx, req.(*UploadGameSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_DownloadGameSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadGameSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).DownloadGameSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_DownloadGameSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).DownloadGameSaveFile(ctx, req.(*DownloadGameSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListGameSaveFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameSaveFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListGameSaveFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListGameSaveFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListGameSaveFiles(ctx, req.(*ListGameSaveFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RemoveGameSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGameSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RemoveGameSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RemoveGameSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RemoveGameSaveFile(ctx, req.(*RemoveGameSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_PinGameSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinGameSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).PinGameSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_PinGameSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).PinGameSaveFile(ctx, req.(*PinGameSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UnpinGameSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpinGameSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UnpinGameSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UnpinGameSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UnpinGameSaveFile(ctx, req.(*UnpinGameSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SetUserSaveFileCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserSaveFileCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SetUserSaveFileCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SetUserSaveFileCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SetUserSaveFileCapacity(ctx, req.(*SetUserSaveFileCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SetSaveFileRotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSaveFileRotationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SetSaveFileRotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SetSaveFileRotation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SetSaveFileRotation(ctx, req.(*SetSaveFileRotationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListAppCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListAppCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListAppCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListAppCategories(ctx, req.(*ListAppCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateAppCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateAppCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateAppCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateAppCategory(ctx, req.(*CreateAppCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateAppCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateAppCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateAppCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateAppCategory(ctx, req.(*UpdateAppCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RemoveAppCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAppCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RemoveAppCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RemoveAppCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RemoveAppCategory(ctx, req.(*RemoveAppCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateNotifyTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifyTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateNotifyTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateNotifyTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateNotifyTarget(ctx, req.(*CreateNotifyTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateNotifyTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifyTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateNotifyTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateNotifyTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateNotifyTarget(ctx, req.(*UpdateNotifyTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListNotifyTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotifyTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListNotifyTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListNotifyTargets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListNotifyTargets(ctx, req.(*ListNotifyTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateNotifyFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifyFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateNotifyFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateNotifyFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateNotifyFlow(ctx, req.(*CreateNotifyFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateNotifyFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifyFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateNotifyFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateNotifyFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateNotifyFlow(ctx, req.(*UpdateNotifyFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListNotifyFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotifyFlowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListNotifyFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListNotifyFlows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListNotifyFlows(ctx, req.(*ListNotifyFlowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateFeedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateFeedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateFeedConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateFeedConfig(ctx, req.(*CreateFeedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateFeedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateFeedConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedConfig(ctx, req.(*UpdateFeedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedConfigs(ctx, req.(*ListFeedConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedCategories(ctx, req.(*ListFeedCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedPlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedPlatformsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedPlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedPlatforms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedPlatforms(ctx, req.(*ListFeedPlatformsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedItems(ctx, req.(*ListFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GroupFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GroupFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GroupFeedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GroupFeedItems(ctx, req.(*GroupFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetFeedItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetFeedItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetFeedItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetFeedItem(ctx, req.(*GetFeedItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetBatchFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetBatchFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetBatchFeedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetBatchFeedItems(ctx, req.(*GetBatchFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ReadFeedItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFeedItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ReadFeedItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ReadFeedItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ReadFeedItem(ctx, req.(*ReadFeedItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateFeedItemCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedItemCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateFeedItemCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateFeedItemCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateFeedItemCollection(ctx, req.(*CreateFeedItemCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateFeedItemCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedItemCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedItemCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateFeedItemCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedItemCollection(ctx, req.(*UpdateFeedItemCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedItemCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedItemCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedItemCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedItemCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedItemCollections(ctx, req.(*ListFeedItemCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_AddFeedItemToCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeedItemToCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).AddFeedItemToCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_AddFeedItemToCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).AddFeedItemToCollection(ctx, req.(*AddFeedItemToCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RemoveFeedItemFromCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFeedItemFromCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RemoveFeedItemFromCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RemoveFeedItemFromCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RemoveFeedItemFromCollection(ctx, req.(*RemoveFeedItemFromCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListCollectionItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListCollectionItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListCollectionItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListCollectionItems(ctx, req.(*ListCollectionItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibrarianSephirahService_ServiceDesc is the grpc.ServiceDesc for LibrarianSephirahService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibrarianSephirahService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "librarian.sephirah.v1.LibrarianSephirahService",
	HandlerType: (*LibrarianSephirahServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerInformation",
			Handler:    _LibrarianSephirahService_GetServerInformation_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _LibrarianSephirahService_GetToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _LibrarianSephirahService_RefreshToken_Handler,
		},
		{
			MethodName: "GainUserPrivilege",
			Handler:    _LibrarianSephirahService_GainUserPrivilege_Handler,
		},
		{
			MethodName: "RegisterDevice",
			Handler:    _LibrarianSephirahService_RegisterDevice_Handler,
		},
		{
			MethodName: "ListUserSessions",
			Handler:    _LibrarianSephirahService_ListUserSessions_Handler,
		},
		{
			MethodName: "DeleteUserSession",
			Handler:    _LibrarianSephirahService_DeleteUserSession_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _LibrarianSephirahService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _LibrarianSephirahService_UpdateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _LibrarianSephirahService_GetUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _LibrarianSephirahService_ListUsers_Handler,
		},
		{
			MethodName: "LinkAccount",
			Handler:    _LibrarianSephirahService_LinkAccount_Handler,
		},
		{
			MethodName: "UnLinkAccount",
			Handler:    _LibrarianSephirahService_UnLinkAccount_Handler,
		},
		{
			MethodName: "ListLinkAccounts",
			Handler:    _LibrarianSephirahService_ListLinkAccounts_Handler,
		},
		{
			MethodName: "ListPorters",
			Handler:    _LibrarianSephirahService_ListPorters_Handler,
		},
		{
			MethodName: "UpdatePorterStatus",
			Handler:    _LibrarianSephirahService_UpdatePorterStatus_Handler,
		},
		{
			MethodName: "UpdatePorterPrivilege",
			Handler:    _LibrarianSephirahService_UpdatePorterPrivilege_Handler,
		},
		{
			MethodName: "PresignedUploadFile",
			Handler:    _LibrarianSephirahService_PresignedUploadFile_Handler,
		},
		{
			MethodName: "PresignedUploadFileStatus",
			Handler:    _LibrarianSephirahService_PresignedUploadFileStatus_Handler,
		},
		{
			MethodName: "PresignedDownloadFile",
			Handler:    _LibrarianSephirahService_PresignedDownloadFile_Handler,
		},
		{
			MethodName: "UploadImage",
			Handler:    _LibrarianSephirahService_UploadImage_Handler,
		},
		{
			MethodName: "UpdateImage",
			Handler:    _LibrarianSephirahService_UpdateImage_Handler,
		},
		{
			MethodName: "ListImages",
			Handler:    _LibrarianSephirahService_ListImages_Handler,
		},
		{
			MethodName: "SearchImages",
			Handler:    _LibrarianSephirahService_SearchImages_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _LibrarianSephirahService_GetImage_Handler,
		},
		{
			MethodName: "DownloadImage",
			Handler:    _LibrarianSephirahService_DownloadImage_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _LibrarianSephirahService_CreateApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _LibrarianSephirahService_UpdateApp_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _LibrarianSephirahService_ListApps_Handler,
		},
		{
			MethodName: "SyncApps",
			Handler:    _LibrarianSephirahService_SyncApps_Handler,
		},
		{
			MethodName: "SyncAccountApps",
			Handler:    _LibrarianSephirahService_SyncAccountApps_Handler,
		},
		{
			MethodName: "MergeApps",
			Handler:    _LibrarianSephirahService_MergeApps_Handler,
		},
		{
			MethodName: "PickApp",
			Handler:    _LibrarianSephirahService_PickApp_Handler,
		},
		{
			MethodName: "SearchApps",
			Handler:    _LibrarianSephirahService_SearchApps_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _LibrarianSephirahService_GetApp_Handler,
		},
		{
			MethodName: "GetBoundApps",
			Handler:    _LibrarianSephirahService_GetBoundApps_Handler,
		},
		{
			MethodName: "PurchaseApp",
			Handler:    _LibrarianSephirahService_PurchaseApp_Handler,
		},
		{
			MethodName: "GetPurchasedApps",
			Handler:    _LibrarianSephirahService_GetPurchasedApps_Handler,
		},
		{
			MethodName: "CreateAppPackage",
			Handler:    _LibrarianSephirahService_CreateAppPackage_Handler,
		},
		{
			MethodName: "UpdateAppPackage",
			Handler:    _LibrarianSephirahService_UpdateAppPackage_Handler,
		},
		{
			MethodName: "ListAppPackages",
			Handler:    _LibrarianSephirahService_ListAppPackages_Handler,
		},
		{
			MethodName: "AssignAppPackage",
			Handler:    _LibrarianSephirahService_AssignAppPackage_Handler,
		},
		{
			MethodName: "UnAssignAppPackage",
			Handler:    _LibrarianSephirahService_UnAssignAppPackage_Handler,
		},
		{
			MethodName: "AddAppPackageRunTime",
			Handler:    _LibrarianSephirahService_AddAppPackageRunTime_Handler,
		},
		{
			MethodName: "SumAppPackageRunTime",
			Handler:    _LibrarianSephirahService_SumAppPackageRunTime_Handler,
		},
		{
			MethodName: "UploadGameSaveFile",
			Handler:    _LibrarianSephirahService_UploadGameSaveFile_Handler,
		},
		{
			MethodName: "DownloadGameSaveFile",
			Handler:    _LibrarianSephirahService_DownloadGameSaveFile_Handler,
		},
		{
			MethodName: "ListGameSaveFiles",
			Handler:    _LibrarianSephirahService_ListGameSaveFiles_Handler,
		},
		{
			MethodName: "RemoveGameSaveFile",
			Handler:    _LibrarianSephirahService_RemoveGameSaveFile_Handler,
		},
		{
			MethodName: "PinGameSaveFile",
			Handler:    _LibrarianSephirahService_PinGameSaveFile_Handler,
		},
		{
			MethodName: "UnpinGameSaveFile",
			Handler:    _LibrarianSephirahService_UnpinGameSaveFile_Handler,
		},
		{
			MethodName: "SetUserSaveFileCapacity",
			Handler:    _LibrarianSephirahService_SetUserSaveFileCapacity_Handler,
		},
		{
			MethodName: "SetSaveFileRotation",
			Handler:    _LibrarianSephirahService_SetSaveFileRotation_Handler,
		},
		{
			MethodName: "ListAppCategories",
			Handler:    _LibrarianSephirahService_ListAppCategories_Handler,
		},
		{
			MethodName: "CreateAppCategory",
			Handler:    _LibrarianSephirahService_CreateAppCategory_Handler,
		},
		{
			MethodName: "UpdateAppCategory",
			Handler:    _LibrarianSephirahService_UpdateAppCategory_Handler,
		},
		{
			MethodName: "RemoveAppCategory",
			Handler:    _LibrarianSephirahService_RemoveAppCategory_Handler,
		},
		{
			MethodName: "CreateNotifyTarget",
			Handler:    _LibrarianSephirahService_CreateNotifyTarget_Handler,
		},
		{
			MethodName: "UpdateNotifyTarget",
			Handler:    _LibrarianSephirahService_UpdateNotifyTarget_Handler,
		},
		{
			MethodName: "ListNotifyTargets",
			Handler:    _LibrarianSephirahService_ListNotifyTargets_Handler,
		},
		{
			MethodName: "CreateNotifyFlow",
			Handler:    _LibrarianSephirahService_CreateNotifyFlow_Handler,
		},
		{
			MethodName: "UpdateNotifyFlow",
			Handler:    _LibrarianSephirahService_UpdateNotifyFlow_Handler,
		},
		{
			MethodName: "ListNotifyFlows",
			Handler:    _LibrarianSephirahService_ListNotifyFlows_Handler,
		},
		{
			MethodName: "CreateFeedConfig",
			Handler:    _LibrarianSephirahService_CreateFeedConfig_Handler,
		},
		{
			MethodName: "UpdateFeedConfig",
			Handler:    _LibrarianSephirahService_UpdateFeedConfig_Handler,
		},
		{
			MethodName: "ListFeedConfigs",
			Handler:    _LibrarianSephirahService_ListFeedConfigs_Handler,
		},
		{
			MethodName: "ListFeedCategories",
			Handler:    _LibrarianSephirahService_ListFeedCategories_Handler,
		},
		{
			MethodName: "ListFeedPlatforms",
			Handler:    _LibrarianSephirahService_ListFeedPlatforms_Handler,
		},
		{
			MethodName: "ListFeedItems",
			Handler:    _LibrarianSephirahService_ListFeedItems_Handler,
		},
		{
			MethodName: "GroupFeedItems",
			Handler:    _LibrarianSephirahService_GroupFeedItems_Handler,
		},
		{
			MethodName: "GetFeedItem",
			Handler:    _LibrarianSephirahService_GetFeedItem_Handler,
		},
		{
			MethodName: "GetBatchFeedItems",
			Handler:    _LibrarianSephirahService_GetBatchFeedItems_Handler,
		},
		{
			MethodName: "ReadFeedItem",
			Handler:    _LibrarianSephirahService_ReadFeedItem_Handler,
		},
		{
			MethodName: "CreateFeedItemCollection",
			Handler:    _LibrarianSephirahService_CreateFeedItemCollection_Handler,
		},
		{
			MethodName: "UpdateFeedItemCollection",
			Handler:    _LibrarianSephirahService_UpdateFeedItemCollection_Handler,
		},
		{
			MethodName: "ListFeedItemCollections",
			Handler:    _LibrarianSephirahService_ListFeedItemCollections_Handler,
		},
		{
			MethodName: "AddFeedItemToCollection",
			Handler:    _LibrarianSephirahService_AddFeedItemToCollection_Handler,
		},
		{
			MethodName: "RemoveFeedItemFromCollection",
			Handler:    _LibrarianSephirahService_RemoveFeedItemFromCollection_Handler,
		},
		{
			MethodName: "ListCollectionItems",
			Handler:    _LibrarianSephirahService_ListCollectionItems_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _LibrarianSephirahService_UploadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _LibrarianSephirahService_DownloadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SimpleUploadFile",
			Handler:       _LibrarianSephirahService_SimpleUploadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SimpleDownloadFile",
			Handler:       _LibrarianSephirahService_SimpleDownloadFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReportAppPackages",
			Handler:       _LibrarianSephirahService_ReportAppPackages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "librarian/sephirah/v1/sephirah.proto",
}
