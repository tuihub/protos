// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: librarian/sephirah/v1/sephirah.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LibrarianSephirahServiceClient is the client API for LibrarianSephirahService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibrarianSephirahServiceClient interface {
	// `Tiphereth` `Normal` Login via password and get two token
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	// `Tiphereth` `Normal` `Sentinel` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// `Tiphereth` `Admin` Generate token for given user
	GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
	// `Tiphereth` `Admin`
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// `Tiphereth` `Admin` `Normal`
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// `Tiphereth` `Normal`
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
	// `Tiphereth` `Normal` Bind third-party account to current user.
	// Create (account)<-[Equal]->(current user)
	LinkAccount(ctx context.Context, in *LinkAccountRequest, opts ...grpc.CallOption) (*LinkAccountResponse, error)
	// `Tiphereth` `Normal` Unbind third-party account from current user.
	// Delete (account)<-[Equal]->(current user)
	UnLinkAccount(ctx context.Context, in *UnLinkAccountRequest, opts ...grpc.CallOption) (*UnLinkAccountResponse, error)
	// `Tiphereth` `Normal` List third-party account binded to current user.
	// Match ()<-[Equal]->(current user)
	ListLinkAccount(ctx context.Context, in *ListLinkAccountRequest, opts ...grpc.CallOption) (*ListLinkAccountResponse, error)
	// `Binah` `upload_token`
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_UploadFileClient, error)
	// `Binah` `download_token`
	DownloadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_DownloadFileClient, error)
	// `Binah` `upload_token`
	SimpleUploadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_SimpleUploadFileClient, error)
	// `Binah` `download_token`
	SimpleDownloadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_SimpleDownloadFileClient, error)
	// `Gebura` `Admin`
	CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error)
	// `Gebura` `Admin`
	UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error)
	// `Gebura` `Normal`
	ListApp(ctx context.Context, in *ListAppRequest, opts ...grpc.CallOption) (*ListAppResponse, error)
	// `Gebura` `Admin` Bind two app
	// Create (src_id)<-[Equal]->(dst_id)
	BindApp(ctx context.Context, in *BindAppRequest, opts ...grpc.CallOption) (*BindAppResponse, error)
	// `Gebura` `Admin` Unbind two app
	// Delete (src_id)<-[Equal]->(dst_id)
	UnBindApp(ctx context.Context, in *UnBindAppRequest, opts ...grpc.CallOption) (*UnBindAppResponse, error)
	// `Gebura` `Admin` Submit an asynchronous update request
	RefreshApp(ctx context.Context, in *RefreshAppRequest, opts ...grpc.CallOption) (*RefreshAppResponse, error)
	// `Gebura` `Admin`
	CreateAppPackage(ctx context.Context, in *CreateAppPackageRequest, opts ...grpc.CallOption) (*CreateAppPackageResponse, error)
	// `Gebura` `Admin`
	UpdateAppPackage(ctx context.Context, in *UpdateAppPackageRequest, opts ...grpc.CallOption) (*UpdateAppPackageResponse, error)
	// `Gebura` `Normal`
	ListAppPackage(ctx context.Context, in *ListAppPackageRequest, opts ...grpc.CallOption) (*ListAppPackageResponse, error)
	// `Gebura` `Admin`
	BindAppPackage(ctx context.Context, in *BindAppPackageRequest, opts ...grpc.CallOption) (*BindAppPackageResponse, error)
	// `Gebura` `Admin`
	UnBindAppPackage(ctx context.Context, in *UnBindAppPackageRequest, opts ...grpc.CallOption) (*UnBindAppPackageResponse, error)
	// `Gebura` `Sentinel`
	ReportAppPackage(ctx context.Context, in *ReportAppPackageRequest, opts ...grpc.CallOption) (*ReportAppPackageResponse, error)
	// `Gebura` `Normal`
	UploadGameSaveFile(ctx context.Context, in *UploadGameSaveFileRequest, opts ...grpc.CallOption) (*UploadGameSaveFileResponse, error)
	// `Gebura` `Normal`
	DownloadGameSaveFile(ctx context.Context, in *DownloadGameSaveFileRequest, opts ...grpc.CallOption) (*DownloadGameSaveFileResponse, error)
	// `Gebura` `Normal`
	ListGameSaveFile(ctx context.Context, in *ListGameSaveFileRequest, opts ...grpc.CallOption) (*ListGameSaveFileResponse, error)
	// `Yesod` `Normal`
	CreateFeedConfig(ctx context.Context, in *CreateFeedConfigRequest, opts ...grpc.CallOption) (*CreateFeedConfigResponse, error)
	// `Yesod` `Normal`
	UpdateFeedConfig(ctx context.Context, in *UpdateFeedConfigRequest, opts ...grpc.CallOption) (*UpdateFeedConfigResponse, error)
	// `Yesod` `Normal`
	ListFeed(ctx context.Context, in *ListFeedRequest, opts ...grpc.CallOption) (*ListFeedResponse, error)
	// `Yesod` `Normal`
	ListFeedItem(ctx context.Context, in *ListFeedItemRequest, opts ...grpc.CallOption) (*ListFeedItemResponse, error)
}

type librarianSephirahServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibrarianSephirahServiceClient(cc grpc.ClientConnInterface) LibrarianSephirahServiceClient {
	return &librarianSephirahServiceClient{cc}
}

func (c *librarianSephirahServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	out := new(GenerateTokenResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/GenerateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) LinkAccount(ctx context.Context, in *LinkAccountRequest, opts ...grpc.CallOption) (*LinkAccountResponse, error) {
	out := new(LinkAccountResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/LinkAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UnLinkAccount(ctx context.Context, in *UnLinkAccountRequest, opts ...grpc.CallOption) (*UnLinkAccountResponse, error) {
	out := new(UnLinkAccountResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/UnLinkAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListLinkAccount(ctx context.Context, in *ListLinkAccountRequest, opts ...grpc.CallOption) (*ListLinkAccountResponse, error) {
	out := new(ListLinkAccountResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/ListLinkAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[0], "/librarian.sephirah.v1.LibrarianSephirahService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceUploadFileClient{stream}
	return x, nil
}

type LibrarianSephirahService_UploadFileClient interface {
	Send(*UploadFileRequest) error
	Recv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceUploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianSephirahServiceUploadFileClient) Recv() (*UploadFileResponse, error) {
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) DownloadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[1], "/librarian.sephirah.v1.LibrarianSephirahService/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceDownloadFileClient{stream}
	return x, nil
}

type LibrarianSephirahService_DownloadFileClient interface {
	Send(*DownloadFileRequest) error
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceDownloadFileClient) Send(m *DownloadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianSephirahServiceDownloadFileClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) SimpleUploadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_SimpleUploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[2], "/librarian.sephirah.v1.LibrarianSephirahService/SimpleUploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceSimpleUploadFileClient{stream}
	return x, nil
}

type LibrarianSephirahService_SimpleUploadFileClient interface {
	Send(*SimpleUploadFileRequest) error
	Recv() (*SimpleUploadFileResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceSimpleUploadFileClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceSimpleUploadFileClient) Send(m *SimpleUploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianSephirahServiceSimpleUploadFileClient) Recv() (*SimpleUploadFileResponse, error) {
	m := new(SimpleUploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) SimpleDownloadFile(ctx context.Context, opts ...grpc.CallOption) (LibrarianSephirahService_SimpleDownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[3], "/librarian.sephirah.v1.LibrarianSephirahService/SimpleDownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianSephirahServiceSimpleDownloadFileClient{stream}
	return x, nil
}

type LibrarianSephirahService_SimpleDownloadFileClient interface {
	Send(*SimpleDownloadFileRequest) error
	Recv() (*SimpleDownloadFileResponse, error)
	grpc.ClientStream
}

type librarianSephirahServiceSimpleDownloadFileClient struct {
	grpc.ClientStream
}

func (x *librarianSephirahServiceSimpleDownloadFileClient) Send(m *SimpleDownloadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianSephirahServiceSimpleDownloadFileClient) Recv() (*SimpleDownloadFileResponse, error) {
	m := new(SimpleDownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianSephirahServiceClient) CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error) {
	out := new(CreateAppResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/CreateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error) {
	out := new(UpdateAppResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/UpdateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListApp(ctx context.Context, in *ListAppRequest, opts ...grpc.CallOption) (*ListAppResponse, error) {
	out := new(ListAppResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/ListApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) BindApp(ctx context.Context, in *BindAppRequest, opts ...grpc.CallOption) (*BindAppResponse, error) {
	out := new(BindAppResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/BindApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UnBindApp(ctx context.Context, in *UnBindAppRequest, opts ...grpc.CallOption) (*UnBindAppResponse, error) {
	out := new(UnBindAppResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/UnBindApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RefreshApp(ctx context.Context, in *RefreshAppRequest, opts ...grpc.CallOption) (*RefreshAppResponse, error) {
	out := new(RefreshAppResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/RefreshApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateAppPackage(ctx context.Context, in *CreateAppPackageRequest, opts ...grpc.CallOption) (*CreateAppPackageResponse, error) {
	out := new(CreateAppPackageResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/CreateAppPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateAppPackage(ctx context.Context, in *UpdateAppPackageRequest, opts ...grpc.CallOption) (*UpdateAppPackageResponse, error) {
	out := new(UpdateAppPackageResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/UpdateAppPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListAppPackage(ctx context.Context, in *ListAppPackageRequest, opts ...grpc.CallOption) (*ListAppPackageResponse, error) {
	out := new(ListAppPackageResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/ListAppPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) BindAppPackage(ctx context.Context, in *BindAppPackageRequest, opts ...grpc.CallOption) (*BindAppPackageResponse, error) {
	out := new(BindAppPackageResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/BindAppPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UnBindAppPackage(ctx context.Context, in *UnBindAppPackageRequest, opts ...grpc.CallOption) (*UnBindAppPackageResponse, error) {
	out := new(UnBindAppPackageResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/UnBindAppPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ReportAppPackage(ctx context.Context, in *ReportAppPackageRequest, opts ...grpc.CallOption) (*ReportAppPackageResponse, error) {
	out := new(ReportAppPackageResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/ReportAppPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UploadGameSaveFile(ctx context.Context, in *UploadGameSaveFileRequest, opts ...grpc.CallOption) (*UploadGameSaveFileResponse, error) {
	out := new(UploadGameSaveFileResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/UploadGameSaveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) DownloadGameSaveFile(ctx context.Context, in *DownloadGameSaveFileRequest, opts ...grpc.CallOption) (*DownloadGameSaveFileResponse, error) {
	out := new(DownloadGameSaveFileResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/DownloadGameSaveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListGameSaveFile(ctx context.Context, in *ListGameSaveFileRequest, opts ...grpc.CallOption) (*ListGameSaveFileResponse, error) {
	out := new(ListGameSaveFileResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/ListGameSaveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateFeedConfig(ctx context.Context, in *CreateFeedConfigRequest, opts ...grpc.CallOption) (*CreateFeedConfigResponse, error) {
	out := new(CreateFeedConfigResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/CreateFeedConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateFeedConfig(ctx context.Context, in *UpdateFeedConfigRequest, opts ...grpc.CallOption) (*UpdateFeedConfigResponse, error) {
	out := new(UpdateFeedConfigResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/UpdateFeedConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeed(ctx context.Context, in *ListFeedRequest, opts ...grpc.CallOption) (*ListFeedResponse, error) {
	out := new(ListFeedResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/ListFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedItem(ctx context.Context, in *ListFeedItemRequest, opts ...grpc.CallOption) (*ListFeedItemResponse, error) {
	out := new(ListFeedItemResponse)
	err := c.cc.Invoke(ctx, "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibrarianSephirahServiceServer is the server API for LibrarianSephirahService service.
// All implementations must embed UnimplementedLibrarianSephirahServiceServer
// for forward compatibility
type LibrarianSephirahServiceServer interface {
	// `Tiphereth` `Normal` Login via password and get two token
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	// `Tiphereth` `Normal` `Sentinel` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// `Tiphereth` `Admin` Generate token for given user
	GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error)
	// `Tiphereth` `Admin`
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// `Tiphereth` `Admin` `Normal`
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// `Tiphereth` `Normal`
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
	// `Tiphereth` `Normal` Bind third-party account to current user.
	// Create (account)<-[Equal]->(current user)
	LinkAccount(context.Context, *LinkAccountRequest) (*LinkAccountResponse, error)
	// `Tiphereth` `Normal` Unbind third-party account from current user.
	// Delete (account)<-[Equal]->(current user)
	UnLinkAccount(context.Context, *UnLinkAccountRequest) (*UnLinkAccountResponse, error)
	// `Tiphereth` `Normal` List third-party account binded to current user.
	// Match ()<-[Equal]->(current user)
	ListLinkAccount(context.Context, *ListLinkAccountRequest) (*ListLinkAccountResponse, error)
	// `Binah` `upload_token`
	UploadFile(LibrarianSephirahService_UploadFileServer) error
	// `Binah` `download_token`
	DownloadFile(LibrarianSephirahService_DownloadFileServer) error
	// `Binah` `upload_token`
	SimpleUploadFile(LibrarianSephirahService_SimpleUploadFileServer) error
	// `Binah` `download_token`
	SimpleDownloadFile(LibrarianSephirahService_SimpleDownloadFileServer) error
	// `Gebura` `Admin`
	CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error)
	// `Gebura` `Admin`
	UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error)
	// `Gebura` `Normal`
	ListApp(context.Context, *ListAppRequest) (*ListAppResponse, error)
	// `Gebura` `Admin` Bind two app
	// Create (src_id)<-[Equal]->(dst_id)
	BindApp(context.Context, *BindAppRequest) (*BindAppResponse, error)
	// `Gebura` `Admin` Unbind two app
	// Delete (src_id)<-[Equal]->(dst_id)
	UnBindApp(context.Context, *UnBindAppRequest) (*UnBindAppResponse, error)
	// `Gebura` `Admin` Submit an asynchronous update request
	RefreshApp(context.Context, *RefreshAppRequest) (*RefreshAppResponse, error)
	// `Gebura` `Admin`
	CreateAppPackage(context.Context, *CreateAppPackageRequest) (*CreateAppPackageResponse, error)
	// `Gebura` `Admin`
	UpdateAppPackage(context.Context, *UpdateAppPackageRequest) (*UpdateAppPackageResponse, error)
	// `Gebura` `Normal`
	ListAppPackage(context.Context, *ListAppPackageRequest) (*ListAppPackageResponse, error)
	// `Gebura` `Admin`
	BindAppPackage(context.Context, *BindAppPackageRequest) (*BindAppPackageResponse, error)
	// `Gebura` `Admin`
	UnBindAppPackage(context.Context, *UnBindAppPackageRequest) (*UnBindAppPackageResponse, error)
	// `Gebura` `Sentinel`
	ReportAppPackage(context.Context, *ReportAppPackageRequest) (*ReportAppPackageResponse, error)
	// `Gebura` `Normal`
	UploadGameSaveFile(context.Context, *UploadGameSaveFileRequest) (*UploadGameSaveFileResponse, error)
	// `Gebura` `Normal`
	DownloadGameSaveFile(context.Context, *DownloadGameSaveFileRequest) (*DownloadGameSaveFileResponse, error)
	// `Gebura` `Normal`
	ListGameSaveFile(context.Context, *ListGameSaveFileRequest) (*ListGameSaveFileResponse, error)
	// `Yesod` `Normal`
	CreateFeedConfig(context.Context, *CreateFeedConfigRequest) (*CreateFeedConfigResponse, error)
	// `Yesod` `Normal`
	UpdateFeedConfig(context.Context, *UpdateFeedConfigRequest) (*UpdateFeedConfigResponse, error)
	// `Yesod` `Normal`
	ListFeed(context.Context, *ListFeedRequest) (*ListFeedResponse, error)
	// `Yesod` `Normal`
	ListFeedItem(context.Context, *ListFeedItemRequest) (*ListFeedItemResponse, error)
	mustEmbedUnimplementedLibrarianSephirahServiceServer()
}

// UnimplementedLibrarianSephirahServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLibrarianSephirahServiceServer struct {
}

func (UnimplementedLibrarianSephirahServiceServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) LinkAccount(context.Context, *LinkAccountRequest) (*LinkAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkAccount not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UnLinkAccount(context.Context, *UnLinkAccountRequest) (*UnLinkAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLinkAccount not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListLinkAccount(context.Context, *ListLinkAccountRequest) (*ListLinkAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLinkAccount not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UploadFile(LibrarianSephirahService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DownloadFile(LibrarianSephirahService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SimpleUploadFile(LibrarianSephirahService_SimpleUploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SimpleUploadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SimpleDownloadFile(LibrarianSephirahService_SimpleDownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SimpleDownloadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListApp(context.Context, *ListAppRequest) (*ListAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) BindApp(context.Context, *BindAppRequest) (*BindAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UnBindApp(context.Context, *UnBindAppRequest) (*UnBindAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBindApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RefreshApp(context.Context, *RefreshAppRequest) (*RefreshAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateAppPackage(context.Context, *CreateAppPackageRequest) (*CreateAppPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppPackage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateAppPackage(context.Context, *UpdateAppPackageRequest) (*UpdateAppPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppPackage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListAppPackage(context.Context, *ListAppPackageRequest) (*ListAppPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppPackage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) BindAppPackage(context.Context, *BindAppPackageRequest) (*BindAppPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindAppPackage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UnBindAppPackage(context.Context, *UnBindAppPackageRequest) (*UnBindAppPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBindAppPackage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ReportAppPackage(context.Context, *ReportAppPackageRequest) (*ReportAppPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAppPackage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UploadGameSaveFile(context.Context, *UploadGameSaveFileRequest) (*UploadGameSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGameSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DownloadGameSaveFile(context.Context, *DownloadGameSaveFileRequest) (*DownloadGameSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadGameSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListGameSaveFile(context.Context, *ListGameSaveFileRequest) (*ListGameSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGameSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateFeedConfig(context.Context, *CreateFeedConfigRequest) (*CreateFeedConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedConfig not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateFeedConfig(context.Context, *UpdateFeedConfigRequest) (*UpdateFeedConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedConfig not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeed(context.Context, *ListFeedRequest) (*ListFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeed not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedItem(context.Context, *ListFeedItemRequest) (*ListFeedItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedItem not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) mustEmbedUnimplementedLibrarianSephirahServiceServer() {
}

// UnsafeLibrarianSephirahServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibrarianSephirahServiceServer will
// result in compilation errors.
type UnsafeLibrarianSephirahServiceServer interface {
	mustEmbedUnimplementedLibrarianSephirahServiceServer()
}

func RegisterLibrarianSephirahServiceServer(s grpc.ServiceRegistrar, srv LibrarianSephirahServiceServer) {
	s.RegisterService(&LibrarianSephirahService_ServiceDesc, srv)
}

func _LibrarianSephirahService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/GenerateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GenerateToken(ctx, req.(*GenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_LinkAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).LinkAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/LinkAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).LinkAccount(ctx, req.(*LinkAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UnLinkAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLinkAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UnLinkAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/UnLinkAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UnLinkAccount(ctx, req.(*UnLinkAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListLinkAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLinkAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListLinkAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/ListLinkAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListLinkAccount(ctx, req.(*ListLinkAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).UploadFile(&librarianSephirahServiceUploadFileServer{stream})
}

type LibrarianSephirahService_UploadFileServer interface {
	Send(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type librarianSephirahServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceUploadFileServer) Send(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianSephirahServiceUploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianSephirahService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).DownloadFile(&librarianSephirahServiceDownloadFileServer{stream})
}

type LibrarianSephirahService_DownloadFileServer interface {
	Send(*DownloadFileResponse) error
	Recv() (*DownloadFileRequest, error)
	grpc.ServerStream
}

type librarianSephirahServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceDownloadFileServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianSephirahServiceDownloadFileServer) Recv() (*DownloadFileRequest, error) {
	m := new(DownloadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianSephirahService_SimpleUploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).SimpleUploadFile(&librarianSephirahServiceSimpleUploadFileServer{stream})
}

type LibrarianSephirahService_SimpleUploadFileServer interface {
	Send(*SimpleUploadFileResponse) error
	Recv() (*SimpleUploadFileRequest, error)
	grpc.ServerStream
}

type librarianSephirahServiceSimpleUploadFileServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceSimpleUploadFileServer) Send(m *SimpleUploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianSephirahServiceSimpleUploadFileServer) Recv() (*SimpleUploadFileRequest, error) {
	m := new(SimpleUploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianSephirahService_SimpleDownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).SimpleDownloadFile(&librarianSephirahServiceSimpleDownloadFileServer{stream})
}

type LibrarianSephirahService_SimpleDownloadFileServer interface {
	Send(*SimpleDownloadFileResponse) error
	Recv() (*SimpleDownloadFileRequest, error)
	grpc.ServerStream
}

type librarianSephirahServiceSimpleDownloadFileServer struct {
	grpc.ServerStream
}

func (x *librarianSephirahServiceSimpleDownloadFileServer) Send(m *SimpleDownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianSephirahServiceSimpleDownloadFileServer) Recv() (*SimpleDownloadFileRequest, error) {
	m := new(SimpleDownloadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianSephirahService_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateApp(ctx, req.(*CreateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateApp(ctx, req.(*UpdateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/ListApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListApp(ctx, req.(*ListAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_BindApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).BindApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/BindApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).BindApp(ctx, req.(*BindAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UnBindApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBindAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UnBindApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/UnBindApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UnBindApp(ctx, req.(*UnBindAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RefreshApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RefreshApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/RefreshApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RefreshApp(ctx, req.(*RefreshAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateAppPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateAppPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/CreateAppPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateAppPackage(ctx, req.(*CreateAppPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateAppPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateAppPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/UpdateAppPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateAppPackage(ctx, req.(*UpdateAppPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListAppPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListAppPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/ListAppPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListAppPackage(ctx, req.(*ListAppPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_BindAppPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindAppPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).BindAppPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/BindAppPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).BindAppPackage(ctx, req.(*BindAppPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UnBindAppPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBindAppPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UnBindAppPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/UnBindAppPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UnBindAppPackage(ctx, req.(*UnBindAppPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ReportAppPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportAppPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ReportAppPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/ReportAppPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ReportAppPackage(ctx, req.(*ReportAppPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UploadGameSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadGameSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UploadGameSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/UploadGameSaveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UploadGameSaveFile(ctx, req.(*UploadGameSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_DownloadGameSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadGameSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).DownloadGameSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/DownloadGameSaveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).DownloadGameSaveFile(ctx, req.(*DownloadGameSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListGameSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGameSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListGameSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/ListGameSaveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListGameSaveFile(ctx, req.(*ListGameSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateFeedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateFeedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/CreateFeedConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateFeedConfig(ctx, req.(*CreateFeedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateFeedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/UpdateFeedConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedConfig(ctx, req.(*UpdateFeedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/ListFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeed(ctx, req.(*ListFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.sephirah.v1.LibrarianSephirahService/ListFeedItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedItem(ctx, req.(*ListFeedItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibrarianSephirahService_ServiceDesc is the grpc.ServiceDesc for LibrarianSephirahService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibrarianSephirahService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "librarian.sephirah.v1.LibrarianSephirahService",
	HandlerType: (*LibrarianSephirahServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _LibrarianSephirahService_GetToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _LibrarianSephirahService_RefreshToken_Handler,
		},
		{
			MethodName: "GenerateToken",
			Handler:    _LibrarianSephirahService_GenerateToken_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _LibrarianSephirahService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _LibrarianSephirahService_UpdateUser_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _LibrarianSephirahService_ListUser_Handler,
		},
		{
			MethodName: "LinkAccount",
			Handler:    _LibrarianSephirahService_LinkAccount_Handler,
		},
		{
			MethodName: "UnLinkAccount",
			Handler:    _LibrarianSephirahService_UnLinkAccount_Handler,
		},
		{
			MethodName: "ListLinkAccount",
			Handler:    _LibrarianSephirahService_ListLinkAccount_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _LibrarianSephirahService_CreateApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _LibrarianSephirahService_UpdateApp_Handler,
		},
		{
			MethodName: "ListApp",
			Handler:    _LibrarianSephirahService_ListApp_Handler,
		},
		{
			MethodName: "BindApp",
			Handler:    _LibrarianSephirahService_BindApp_Handler,
		},
		{
			MethodName: "UnBindApp",
			Handler:    _LibrarianSephirahService_UnBindApp_Handler,
		},
		{
			MethodName: "RefreshApp",
			Handler:    _LibrarianSephirahService_RefreshApp_Handler,
		},
		{
			MethodName: "CreateAppPackage",
			Handler:    _LibrarianSephirahService_CreateAppPackage_Handler,
		},
		{
			MethodName: "UpdateAppPackage",
			Handler:    _LibrarianSephirahService_UpdateAppPackage_Handler,
		},
		{
			MethodName: "ListAppPackage",
			Handler:    _LibrarianSephirahService_ListAppPackage_Handler,
		},
		{
			MethodName: "BindAppPackage",
			Handler:    _LibrarianSephirahService_BindAppPackage_Handler,
		},
		{
			MethodName: "UnBindAppPackage",
			Handler:    _LibrarianSephirahService_UnBindAppPackage_Handler,
		},
		{
			MethodName: "ReportAppPackage",
			Handler:    _LibrarianSephirahService_ReportAppPackage_Handler,
		},
		{
			MethodName: "UploadGameSaveFile",
			Handler:    _LibrarianSephirahService_UploadGameSaveFile_Handler,
		},
		{
			MethodName: "DownloadGameSaveFile",
			Handler:    _LibrarianSephirahService_DownloadGameSaveFile_Handler,
		},
		{
			MethodName: "ListGameSaveFile",
			Handler:    _LibrarianSephirahService_ListGameSaveFile_Handler,
		},
		{
			MethodName: "CreateFeedConfig",
			Handler:    _LibrarianSephirahService_CreateFeedConfig_Handler,
		},
		{
			MethodName: "UpdateFeedConfig",
			Handler:    _LibrarianSephirahService_UpdateFeedConfig_Handler,
		},
		{
			MethodName: "ListFeed",
			Handler:    _LibrarianSephirahService_ListFeed_Handler,
		},
		{
			MethodName: "ListFeedItem",
			Handler:    _LibrarianSephirahService_ListFeedItem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _LibrarianSephirahService_UploadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _LibrarianSephirahService_DownloadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SimpleUploadFile",
			Handler:       _LibrarianSephirahService_SimpleUploadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SimpleDownloadFile",
			Handler:       _LibrarianSephirahService_SimpleDownloadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "librarian/sephirah/v1/sephirah.proto",
}
