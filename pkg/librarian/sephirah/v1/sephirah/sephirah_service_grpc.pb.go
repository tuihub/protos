// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: librarian/sephirah/v1/sephirah/sephirah_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LibrarianSephirahService_GetServerInformation_FullMethodName         = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/GetServerInformation"
	LibrarianSephirahService_ListenServerEvent_FullMethodName            = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListenServerEvent"
	LibrarianSephirahService_GetToken_FullMethodName                     = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/GetToken"
	LibrarianSephirahService_RefreshToken_FullMethodName                 = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/RefreshToken"
	LibrarianSephirahService_GetUser_FullMethodName                      = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/GetUser"
	LibrarianSephirahService_RegisterUser_FullMethodName                 = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/RegisterUser"
	LibrarianSephirahService_UpdateUser_FullMethodName                   = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/UpdateUser"
	LibrarianSephirahService_RegisterDevice_FullMethodName               = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/RegisterDevice"
	LibrarianSephirahService_ListRegisteredDevices_FullMethodName        = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListRegisteredDevices"
	LibrarianSephirahService_ListUserSessions_FullMethodName             = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListUserSessions"
	LibrarianSephirahService_DeleteUserSession_FullMethodName            = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/DeleteUserSession"
	LibrarianSephirahService_LinkAccount_FullMethodName                  = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/LinkAccount"
	LibrarianSephirahService_UnLinkAccount_FullMethodName                = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/UnLinkAccount"
	LibrarianSephirahService_ListLinkAccounts_FullMethodName             = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListLinkAccounts"
	LibrarianSephirahService_ListPorterDigests_FullMethodName            = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListPorterDigests"
	LibrarianSephirahService_CreatePorterContext_FullMethodName          = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/CreatePorterContext"
	LibrarianSephirahService_ListPorterContexts_FullMethodName           = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListPorterContexts"
	LibrarianSephirahService_UpdatePorterContext_FullMethodName          = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/UpdatePorterContext"
	LibrarianSephirahService_GetStorageCapacityUsage_FullMethodName      = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/GetStorageCapacityUsage"
	LibrarianSephirahService_UploadFile_FullMethodName                   = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/UploadFile"
	LibrarianSephirahService_DownloadFile_FullMethodName                 = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/DownloadFile"
	LibrarianSephirahService_SimpleUploadFile_FullMethodName             = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/SimpleUploadFile"
	LibrarianSephirahService_SimpleDownloadFile_FullMethodName           = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/SimpleDownloadFile"
	LibrarianSephirahService_PresignedUploadFile_FullMethodName          = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/PresignedUploadFile"
	LibrarianSephirahService_PresignedUploadFileStatus_FullMethodName    = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/PresignedUploadFileStatus"
	LibrarianSephirahService_PresignedDownloadFile_FullMethodName        = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/PresignedDownloadFile"
	LibrarianSephirahService_UploadImage_FullMethodName                  = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/UploadImage"
	LibrarianSephirahService_UpdateImage_FullMethodName                  = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/UpdateImage"
	LibrarianSephirahService_ListImages_FullMethodName                   = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListImages"
	LibrarianSephirahService_SearchImages_FullMethodName                 = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/SearchImages"
	LibrarianSephirahService_GetImage_FullMethodName                     = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/GetImage"
	LibrarianSephirahService_DownloadImage_FullMethodName                = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/DownloadImage"
	LibrarianSephirahService_SearchStoreApps_FullMethodName              = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/SearchStoreApps"
	LibrarianSephirahService_GetStoreAppSummary_FullMethodName           = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/GetStoreAppSummary"
	LibrarianSephirahService_AcquireStoreApp_FullMethodName              = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/AcquireStoreApp"
	LibrarianSephirahService_ListStoreAppBinaries_FullMethodName         = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListStoreAppBinaries"
	LibrarianSephirahService_ListStoreAppBinaryFiles_FullMethodName      = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListStoreAppBinaryFiles"
	LibrarianSephirahService_DownloadStoreAppBinary_FullMethodName       = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/DownloadStoreAppBinary"
	LibrarianSephirahService_ListStoreAppSaveFiles_FullMethodName        = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListStoreAppSaveFiles"
	LibrarianSephirahService_DownloadStoreAppSaveFile_FullMethodName     = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/DownloadStoreAppSaveFile"
	LibrarianSephirahService_SearchAppInfos_FullMethodName               = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/SearchAppInfos"
	LibrarianSephirahService_CreateApp_FullMethodName                    = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/CreateApp"
	LibrarianSephirahService_UpdateApp_FullMethodName                    = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/UpdateApp"
	LibrarianSephirahService_ListApps_FullMethodName                     = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListApps"
	LibrarianSephirahService_BatchCreateAppRunTime_FullMethodName        = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/BatchCreateAppRunTime"
	LibrarianSephirahService_SumAppRunTime_FullMethodName                = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/SumAppRunTime"
	LibrarianSephirahService_ListAppRunTimes_FullMethodName              = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListAppRunTimes"
	LibrarianSephirahService_DeleteAppRunTime_FullMethodName             = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/DeleteAppRunTime"
	LibrarianSephirahService_UploadAppSaveFile_FullMethodName            = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/UploadAppSaveFile"
	LibrarianSephirahService_DownloadAppSaveFile_FullMethodName          = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/DownloadAppSaveFile"
	LibrarianSephirahService_ListAppSaveFiles_FullMethodName             = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListAppSaveFiles"
	LibrarianSephirahService_DeleteAppSaveFile_FullMethodName            = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/DeleteAppSaveFile"
	LibrarianSephirahService_PinAppSaveFile_FullMethodName               = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/PinAppSaveFile"
	LibrarianSephirahService_UnpinAppSaveFile_FullMethodName             = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/UnpinAppSaveFile"
	LibrarianSephirahService_GetAppSaveFileCapacity_FullMethodName       = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/GetAppSaveFileCapacity"
	LibrarianSephirahService_SetAppSaveFileCapacity_FullMethodName       = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/SetAppSaveFileCapacity"
	LibrarianSephirahService_ListAppCategories_FullMethodName            = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListAppCategories"
	LibrarianSephirahService_CreateAppCategory_FullMethodName            = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/CreateAppCategory"
	LibrarianSephirahService_UpdateAppCategory_FullMethodName            = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/UpdateAppCategory"
	LibrarianSephirahService_DeleteAppCategory_FullMethodName            = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/DeleteAppCategory"
	LibrarianSephirahService_CreateNotifyTarget_FullMethodName           = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/CreateNotifyTarget"
	LibrarianSephirahService_UpdateNotifyTarget_FullMethodName           = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/UpdateNotifyTarget"
	LibrarianSephirahService_ListNotifyTargets_FullMethodName            = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListNotifyTargets"
	LibrarianSephirahService_CreateNotifyFlow_FullMethodName             = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/CreateNotifyFlow"
	LibrarianSephirahService_UpdateNotifyFlow_FullMethodName             = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/UpdateNotifyFlow"
	LibrarianSephirahService_ListNotifyFlows_FullMethodName              = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListNotifyFlows"
	LibrarianSephirahService_ListSystemNotifications_FullMethodName      = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListSystemNotifications"
	LibrarianSephirahService_UpdateSystemNotification_FullMethodName     = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/UpdateSystemNotification"
	LibrarianSephirahService_CreateFeedConfig_FullMethodName             = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/CreateFeedConfig"
	LibrarianSephirahService_UpdateFeedConfig_FullMethodName             = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/UpdateFeedConfig"
	LibrarianSephirahService_ListFeedConfigs_FullMethodName              = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListFeedConfigs"
	LibrarianSephirahService_CreateFeedActionSet_FullMethodName          = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/CreateFeedActionSet"
	LibrarianSephirahService_UpdateFeedActionSet_FullMethodName          = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/UpdateFeedActionSet"
	LibrarianSephirahService_ListFeedActionSets_FullMethodName           = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListFeedActionSets"
	LibrarianSephirahService_ListFeedCategories_FullMethodName           = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListFeedCategories"
	LibrarianSephirahService_ListFeedPlatforms_FullMethodName            = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListFeedPlatforms"
	LibrarianSephirahService_ListFeedItems_FullMethodName                = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListFeedItems"
	LibrarianSephirahService_GetFeedItem_FullMethodName                  = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/GetFeedItem"
	LibrarianSephirahService_GetBatchFeedItems_FullMethodName            = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/GetBatchFeedItems"
	LibrarianSephirahService_ReadFeedItem_FullMethodName                 = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ReadFeedItem"
	LibrarianSephirahService_CreateFeedItemCollection_FullMethodName     = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/CreateFeedItemCollection"
	LibrarianSephirahService_UpdateFeedItemCollection_FullMethodName     = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/UpdateFeedItemCollection"
	LibrarianSephirahService_ListFeedItemCollections_FullMethodName      = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListFeedItemCollections"
	LibrarianSephirahService_AddFeedItemToCollection_FullMethodName      = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/AddFeedItemToCollection"
	LibrarianSephirahService_RemoveFeedItemFromCollection_FullMethodName = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/RemoveFeedItemFromCollection"
	LibrarianSephirahService_ListFeedItemsInCollection_FullMethodName    = "/librarian.sephirah.v1.sephirah.LibrarianSephirahService/ListFeedItemsInCollection"
)

// LibrarianSephirahServiceClient is the client API for LibrarianSephirahService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Sephirah contains the core logic and currently divided into the following modules:
// 1. `Tiphereth` handles account data and provides permission verification
// 2. `Gebura` handles application data
// 3. `Binah` handles file transfer
// 4. `Yesod` handles feed data
// 5. `Netzach` handles notifications
type LibrarianSephirahServiceClient interface {
	// Allow anonymous call, use accessToken to get complete information
	GetServerInformation(ctx context.Context, in *GetServerInformationRequest, opts ...grpc.CallOption) (*GetServerInformationResponse, error)
	// `Normal` Client can use this to subscribe to server events.
	//
	// Server should send `SERVER_EVENT_LISTENER_CONNECTED` event immediately if the connection is valid.
	// Otherwise, client should treat the connection as failed.
	//
	// Server can close the stream at any time, client should reconnect if needed **with backoff**.
	// Only used to improve real-time experience, no guarantee of delivery.
	ListenServerEvent(ctx context.Context, in *ListenServerEventRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListenServerEventResponse], error)
	// `Tiphereth` `Normal` Login via password and get two token
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	// `Tiphereth` `Normal` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// `Tiphereth`
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// `Tiphereth` Self register as a new normal user
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	// `Tiphereth` `Normal` Update self user info
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// `Tiphereth` `Normal` Client should register device after the first login
	// and store the device_id locally.
	// The server could add extra limits to non-registered device
	RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error)
	// `Tiphereth` `Normal`
	ListRegisteredDevices(ctx context.Context, in *ListRegisteredDevicesRequest, opts ...grpc.CallOption) (*ListRegisteredDevicesResponse, error)
	// `Tiphereth` `Normal`
	ListUserSessions(ctx context.Context, in *ListUserSessionsRequest, opts ...grpc.CallOption) (*ListUserSessionsResponse, error)
	// `Tiphereth` `Normal` delete session will revoke refresh_token immediately.
	// NOTE: This can also be used to log out at server side.
	// NOTE2: Delete session will not affect device registration.
	DeleteUserSession(ctx context.Context, in *DeleteUserSessionRequest, opts ...grpc.CallOption) (*DeleteUserSessionResponse, error)
	// `Tiphereth` `Normal` Bind third-party account to current user.
	LinkAccount(ctx context.Context, in *LinkAccountRequest, opts ...grpc.CallOption) (*LinkAccountResponse, error)
	// `Tiphereth` `Normal` Unbind third-party account from current user.
	UnLinkAccount(ctx context.Context, in *UnLinkAccountRequest, opts ...grpc.CallOption) (*UnLinkAccountResponse, error)
	// `Tiphereth` `Normal` List third-party account binded to current user.
	ListLinkAccounts(ctx context.Context, in *ListLinkAccountsRequest, opts ...grpc.CallOption) (*ListLinkAccountsResponse, error)
	// `Tiphereth` `Normal`
	ListPorterDigests(ctx context.Context, in *ListPorterDigestsRequest, opts ...grpc.CallOption) (*ListPorterDigestsResponse, error)
	// `Tiphereth` `Normal`
	CreatePorterContext(ctx context.Context, in *CreatePorterContextRequest, opts ...grpc.CallOption) (*CreatePorterContextResponse, error)
	// `Tiphereth` `Normal`
	ListPorterContexts(ctx context.Context, in *ListPorterContextsRequest, opts ...grpc.CallOption) (*ListPorterContextsResponse, error)
	// `Tiphereth` `Normal` Set porter context.
	UpdatePorterContext(ctx context.Context, in *UpdatePorterContextRequest, opts ...grpc.CallOption) (*UpdatePorterContextResponse, error)
	// `Binah` `Normal`
	GetStorageCapacityUsage(ctx context.Context, in *GetStorageCapacityUsageRequest, opts ...grpc.CallOption) (*GetStorageCapacityUsageResponse, error)
	// `Binah` `upload_token`
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UploadFileRequest, UploadFileResponse], error)
	// `Binah` `download_token`
	DownloadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DownloadFileRequest, DownloadFileResponse], error)
	// `Binah` `upload_token`
	// Maximum 256M
	// Server must send response at least once a minute to keepalive.
	// Client should ignore in_process response and wait for success or error response.
	SimpleUploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SimpleUploadFileRequest, SimpleUploadFileResponse], error)
	// `Binah` `download_token`
	// Server will not check the receiving state
	SimpleDownloadFile(ctx context.Context, in *SimpleDownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SimpleDownloadFileResponse], error)
	// `Binah` `upload_token`
	// Upload file through http url
	PresignedUploadFile(ctx context.Context, in *PresignedUploadFileRequest, opts ...grpc.CallOption) (*PresignedUploadFileResponse, error)
	// `Binah` `upload_token`
	// Report file transfer status. Mainly used to trigger server post-process immediately
	PresignedUploadFileStatus(ctx context.Context, in *PresignedUploadFileStatusRequest, opts ...grpc.CallOption) (*PresignedUploadFileStatusResponse, error)
	// `Binah` `download_token`
	// Download file through http url
	PresignedDownloadFile(ctx context.Context, in *PresignedDownloadFileRequest, opts ...grpc.CallOption) (*PresignedDownloadFileResponse, error)
	// `Chesed` `Normal`
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	// `Chesed` `Normal`
	UpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*UpdateImageResponse, error)
	// `Chesed` `Normal`
	ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error)
	// `Chesed` `Normal`
	SearchImages(ctx context.Context, in *SearchImagesRequest, opts ...grpc.CallOption) (*SearchImagesResponse, error)
	// `Chesed` `Normal`
	GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error)
	// `Chesed` `Normal`
	DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error)
	// `Gebura` `Normal`
	SearchStoreApps(ctx context.Context, in *SearchStoreAppsRequest, opts ...grpc.CallOption) (*SearchStoreAppsResponse, error)
	// `Gebura` `Normal`
	GetStoreAppSummary(ctx context.Context, in *GetStoreAppSummaryRequest, opts ...grpc.CallOption) (*GetStoreAppSummaryResponse, error)
	// `Gebura` `Normal`
	AcquireStoreApp(ctx context.Context, in *AcquireStoreAppRequest, opts ...grpc.CallOption) (*AcquireStoreAppResponse, error)
	// `Gebura` `Normal`
	ListStoreAppBinaries(ctx context.Context, in *ListStoreAppBinariesRequest, opts ...grpc.CallOption) (*ListStoreAppBinariesResponse, error)
	// `Gebura` `Normal`
	ListStoreAppBinaryFiles(ctx context.Context, in *ListStoreAppBinaryFilesRequest, opts ...grpc.CallOption) (*ListStoreAppBinaryFilesResponse, error)
	// `Gebura` `Normal`
	DownloadStoreAppBinary(ctx context.Context, in *DownloadStoreAppBinaryRequest, opts ...grpc.CallOption) (*DownloadStoreAppBinaryResponse, error)
	// `Gebura` `Normal`
	ListStoreAppSaveFiles(ctx context.Context, in *ListStoreAppSaveFilesRequest, opts ...grpc.CallOption) (*ListStoreAppSaveFilesResponse, error)
	// `Gebura` `Normal`
	DownloadStoreAppSaveFile(ctx context.Context, in *DownloadStoreAppSaveFileRequest, opts ...grpc.CallOption) (*DownloadStoreAppSaveFileResponse, error)
	// `Gebura` `Normal` Search app infos
	SearchAppInfos(ctx context.Context, in *SearchAppInfosRequest, opts ...grpc.CallOption) (*SearchAppInfosResponse, error)
	// `Gebura` `Normal`
	CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error)
	// `Gebura` `Normal`
	UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error)
	// `Gebura` `Normal`
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error)
	// `Gebura` `Normal`
	BatchCreateAppRunTime(ctx context.Context, in *BatchCreateAppRunTimeRequest, opts ...grpc.CallOption) (*BatchCreateAppRunTimeResponse, error)
	// `Gebura` `Normal`
	SumAppRunTime(ctx context.Context, in *SumAppRunTimeRequest, opts ...grpc.CallOption) (*SumAppRunTimeResponse, error)
	// `Gebura` `Normal`
	ListAppRunTimes(ctx context.Context, in *ListAppRunTimesRequest, opts ...grpc.CallOption) (*ListAppRunTimesResponse, error)
	// `Gebura` `Normal`
	DeleteAppRunTime(ctx context.Context, in *DeleteAppRunTimeRequest, opts ...grpc.CallOption) (*DeleteAppRunTimeResponse, error)
	// `Gebura` `Normal`
	UploadAppSaveFile(ctx context.Context, in *UploadAppSaveFileRequest, opts ...grpc.CallOption) (*UploadAppSaveFileResponse, error)
	// `Gebura` `Normal`
	DownloadAppSaveFile(ctx context.Context, in *DownloadAppSaveFileRequest, opts ...grpc.CallOption) (*DownloadAppSaveFileResponse, error)
	// `Gebura` `Normal`
	ListAppSaveFiles(ctx context.Context, in *ListAppSaveFilesRequest, opts ...grpc.CallOption) (*ListAppSaveFilesResponse, error)
	// `Gebura` `Normal`
	DeleteAppSaveFile(ctx context.Context, in *DeleteAppSaveFileRequest, opts ...grpc.CallOption) (*DeleteAppSaveFileResponse, error)
	// `Gebura` `Normal`
	PinAppSaveFile(ctx context.Context, in *PinAppSaveFileRequest, opts ...grpc.CallOption) (*PinAppSaveFileResponse, error)
	// `Gebura` `Normal`
	UnpinAppSaveFile(ctx context.Context, in *UnpinAppSaveFileRequest, opts ...grpc.CallOption) (*UnpinAppSaveFileResponse, error)
	// `Gebura` `Normal`
	GetAppSaveFileCapacity(ctx context.Context, in *GetAppSaveFileCapacityRequest, opts ...grpc.CallOption) (*GetAppSaveFileCapacityResponse, error)
	// `Gebura` `Normal`
	SetAppSaveFileCapacity(ctx context.Context, in *SetAppSaveFileCapacityRequest, opts ...grpc.CallOption) (*SetAppSaveFileCapacityResponse, error)
	// `Gebura` `Normal`
	ListAppCategories(ctx context.Context, in *ListAppCategoriesRequest, opts ...grpc.CallOption) (*ListAppCategoriesResponse, error)
	// `Gebura` `Normal`
	CreateAppCategory(ctx context.Context, in *CreateAppCategoryRequest, opts ...grpc.CallOption) (*CreateAppCategoryResponse, error)
	// `Gebura` `Normal`
	UpdateAppCategory(ctx context.Context, in *UpdateAppCategoryRequest, opts ...grpc.CallOption) (*UpdateAppCategoryResponse, error)
	// `Gebura` `Normal`
	DeleteAppCategory(ctx context.Context, in *DeleteAppCategoryRequest, opts ...grpc.CallOption) (*DeleteAppCategoryResponse, error)
	// `Netzach` `Normal`
	CreateNotifyTarget(ctx context.Context, in *CreateNotifyTargetRequest, opts ...grpc.CallOption) (*CreateNotifyTargetResponse, error)
	// `Netzach` `Normal`
	UpdateNotifyTarget(ctx context.Context, in *UpdateNotifyTargetRequest, opts ...grpc.CallOption) (*UpdateNotifyTargetResponse, error)
	// `Netzach` `Normal`
	ListNotifyTargets(ctx context.Context, in *ListNotifyTargetsRequest, opts ...grpc.CallOption) (*ListNotifyTargetsResponse, error)
	// `Netzach` `Normal`
	CreateNotifyFlow(ctx context.Context, in *CreateNotifyFlowRequest, opts ...grpc.CallOption) (*CreateNotifyFlowResponse, error)
	// `Netzach` `Normal`
	UpdateNotifyFlow(ctx context.Context, in *UpdateNotifyFlowRequest, opts ...grpc.CallOption) (*UpdateNotifyFlowResponse, error)
	// `Netzach` `Normal`
	ListNotifyFlows(ctx context.Context, in *ListNotifyFlowsRequest, opts ...grpc.CallOption) (*ListNotifyFlowsResponse, error)
	// `Netzach` `Normal`
	ListSystemNotifications(ctx context.Context, in *ListSystemNotificationsRequest, opts ...grpc.CallOption) (*ListSystemNotificationsResponse, error)
	// `Netzach` `Normal`
	UpdateSystemNotification(ctx context.Context, in *UpdateSystemNotificationRequest, opts ...grpc.CallOption) (*UpdateSystemNotificationResponse, error)
	// `Yesod` `Normal`
	CreateFeedConfig(ctx context.Context, in *CreateFeedConfigRequest, opts ...grpc.CallOption) (*CreateFeedConfigResponse, error)
	// `Yesod` `Normal`
	UpdateFeedConfig(ctx context.Context, in *UpdateFeedConfigRequest, opts ...grpc.CallOption) (*UpdateFeedConfigResponse, error)
	// `Yesod` `Normal`
	ListFeedConfigs(ctx context.Context, in *ListFeedConfigsRequest, opts ...grpc.CallOption) (*ListFeedConfigsResponse, error)
	// `Yesod` `Normal`
	CreateFeedActionSet(ctx context.Context, in *CreateFeedActionSetRequest, opts ...grpc.CallOption) (*CreateFeedActionSetResponse, error)
	// `Yesod` `Normal`
	UpdateFeedActionSet(ctx context.Context, in *UpdateFeedActionSetRequest, opts ...grpc.CallOption) (*UpdateFeedActionSetResponse, error)
	// `Yesod` `Normal`
	ListFeedActionSets(ctx context.Context, in *ListFeedActionSetsRequest, opts ...grpc.CallOption) (*ListFeedActionSetsResponse, error)
	// `Yesod` `Normal`
	ListFeedCategories(ctx context.Context, in *ListFeedCategoriesRequest, opts ...grpc.CallOption) (*ListFeedCategoriesResponse, error)
	// `Yesod` `Normal`
	ListFeedPlatforms(ctx context.Context, in *ListFeedPlatformsRequest, opts ...grpc.CallOption) (*ListFeedPlatformsResponse, error)
	// `Yesod` `Normal`
	ListFeedItems(ctx context.Context, in *ListFeedItemsRequest, opts ...grpc.CallOption) (*ListFeedItemsResponse, error)
	// `Yesod` `Normal`
	GetFeedItem(ctx context.Context, in *GetFeedItemRequest, opts ...grpc.CallOption) (*GetFeedItemResponse, error)
	// `Yesod` `Normal`
	GetBatchFeedItems(ctx context.Context, in *GetBatchFeedItemsRequest, opts ...grpc.CallOption) (*GetBatchFeedItemsResponse, error)
	// `Yesod` `Normal`
	ReadFeedItem(ctx context.Context, in *ReadFeedItemRequest, opts ...grpc.CallOption) (*ReadFeedItemResponse, error)
	// `Yesod` `Normal`
	CreateFeedItemCollection(ctx context.Context, in *CreateFeedItemCollectionRequest, opts ...grpc.CallOption) (*CreateFeedItemCollectionResponse, error)
	// `Yesod` `Normal`
	UpdateFeedItemCollection(ctx context.Context, in *UpdateFeedItemCollectionRequest, opts ...grpc.CallOption) (*UpdateFeedItemCollectionResponse, error)
	// `Yesod` `Normal`
	ListFeedItemCollections(ctx context.Context, in *ListFeedItemCollectionsRequest, opts ...grpc.CallOption) (*ListFeedItemCollectionsResponse, error)
	// `Yesod` `Normal`
	AddFeedItemToCollection(ctx context.Context, in *AddFeedItemToCollectionRequest, opts ...grpc.CallOption) (*AddFeedItemToCollectionResponse, error)
	// `Yesod` `Normal`
	RemoveFeedItemFromCollection(ctx context.Context, in *RemoveFeedItemFromCollectionRequest, opts ...grpc.CallOption) (*RemoveFeedItemFromCollectionResponse, error)
	// `Yesod` `Normal`
	ListFeedItemsInCollection(ctx context.Context, in *ListFeedItemsInCollectionRequest, opts ...grpc.CallOption) (*ListFeedItemsInCollectionResponse, error)
}

type librarianSephirahServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibrarianSephirahServiceClient(cc grpc.ClientConnInterface) LibrarianSephirahServiceClient {
	return &librarianSephirahServiceClient{cc}
}

func (c *librarianSephirahServiceClient) GetServerInformation(ctx context.Context, in *GetServerInformationRequest, opts ...grpc.CallOption) (*GetServerInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServerInformationResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetServerInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListenServerEvent(ctx context.Context, in *ListenServerEventRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ListenServerEventResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[0], LibrarianSephirahService_ListenServerEvent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListenServerEventRequest, ListenServerEventResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LibrarianSephirahService_ListenServerEventClient = grpc.ServerStreamingClient[ListenServerEventResponse]

func (c *librarianSephirahServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterDeviceResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RegisterDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListRegisteredDevices(ctx context.Context, in *ListRegisteredDevicesRequest, opts ...grpc.CallOption) (*ListRegisteredDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRegisteredDevicesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListRegisteredDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListUserSessions(ctx context.Context, in *ListUserSessionsRequest, opts ...grpc.CallOption) (*ListUserSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserSessionsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListUserSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) DeleteUserSession(ctx context.Context, in *DeleteUserSessionRequest, opts ...grpc.CallOption) (*DeleteUserSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserSessionResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_DeleteUserSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) LinkAccount(ctx context.Context, in *LinkAccountRequest, opts ...grpc.CallOption) (*LinkAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkAccountResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_LinkAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UnLinkAccount(ctx context.Context, in *UnLinkAccountRequest, opts ...grpc.CallOption) (*UnLinkAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnLinkAccountResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UnLinkAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListLinkAccounts(ctx context.Context, in *ListLinkAccountsRequest, opts ...grpc.CallOption) (*ListLinkAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLinkAccountsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListLinkAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListPorterDigests(ctx context.Context, in *ListPorterDigestsRequest, opts ...grpc.CallOption) (*ListPorterDigestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPorterDigestsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListPorterDigests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreatePorterContext(ctx context.Context, in *CreatePorterContextRequest, opts ...grpc.CallOption) (*CreatePorterContextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePorterContextResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreatePorterContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListPorterContexts(ctx context.Context, in *ListPorterContextsRequest, opts ...grpc.CallOption) (*ListPorterContextsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPorterContextsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListPorterContexts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdatePorterContext(ctx context.Context, in *UpdatePorterContextRequest, opts ...grpc.CallOption) (*UpdatePorterContextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePorterContextResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdatePorterContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetStorageCapacityUsage(ctx context.Context, in *GetStorageCapacityUsageRequest, opts ...grpc.CallOption) (*GetStorageCapacityUsageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStorageCapacityUsageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetStorageCapacityUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UploadFileRequest, UploadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[1], LibrarianSephirahService_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadFileRequest, UploadFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LibrarianSephirahService_UploadFileClient = grpc.BidiStreamingClient[UploadFileRequest, UploadFileResponse]

func (c *librarianSephirahServiceClient) DownloadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DownloadFileRequest, DownloadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[2], LibrarianSephirahService_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadFileRequest, DownloadFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LibrarianSephirahService_DownloadFileClient = grpc.BidiStreamingClient[DownloadFileRequest, DownloadFileResponse]

func (c *librarianSephirahServiceClient) SimpleUploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SimpleUploadFileRequest, SimpleUploadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[3], LibrarianSephirahService_SimpleUploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SimpleUploadFileRequest, SimpleUploadFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LibrarianSephirahService_SimpleUploadFileClient = grpc.BidiStreamingClient[SimpleUploadFileRequest, SimpleUploadFileResponse]

func (c *librarianSephirahServiceClient) SimpleDownloadFile(ctx context.Context, in *SimpleDownloadFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SimpleDownloadFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LibrarianSephirahService_ServiceDesc.Streams[4], LibrarianSephirahService_SimpleDownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SimpleDownloadFileRequest, SimpleDownloadFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LibrarianSephirahService_SimpleDownloadFileClient = grpc.ServerStreamingClient[SimpleDownloadFileResponse]

func (c *librarianSephirahServiceClient) PresignedUploadFile(ctx context.Context, in *PresignedUploadFileRequest, opts ...grpc.CallOption) (*PresignedUploadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PresignedUploadFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_PresignedUploadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) PresignedUploadFileStatus(ctx context.Context, in *PresignedUploadFileStatusRequest, opts ...grpc.CallOption) (*PresignedUploadFileStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PresignedUploadFileStatusResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_PresignedUploadFileStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) PresignedDownloadFile(ctx context.Context, in *PresignedDownloadFileRequest, opts ...grpc.CallOption) (*PresignedDownloadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PresignedDownloadFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_PresignedDownloadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UploadImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateImage(ctx context.Context, in *UpdateImageRequest, opts ...grpc.CallOption) (*UpdateImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateImageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListImages(ctx context.Context, in *ListImagesRequest, opts ...grpc.CallOption) (*ListImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListImagesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SearchImages(ctx context.Context, in *SearchImagesRequest, opts ...grpc.CallOption) (*SearchImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchImagesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SearchImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetImage(ctx context.Context, in *GetImageRequest, opts ...grpc.CallOption) (*GetImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadImageResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_DownloadImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SearchStoreApps(ctx context.Context, in *SearchStoreAppsRequest, opts ...grpc.CallOption) (*SearchStoreAppsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchStoreAppsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SearchStoreApps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetStoreAppSummary(ctx context.Context, in *GetStoreAppSummaryRequest, opts ...grpc.CallOption) (*GetStoreAppSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoreAppSummaryResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetStoreAppSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) AcquireStoreApp(ctx context.Context, in *AcquireStoreAppRequest, opts ...grpc.CallOption) (*AcquireStoreAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcquireStoreAppResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_AcquireStoreApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListStoreAppBinaries(ctx context.Context, in *ListStoreAppBinariesRequest, opts ...grpc.CallOption) (*ListStoreAppBinariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStoreAppBinariesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListStoreAppBinaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListStoreAppBinaryFiles(ctx context.Context, in *ListStoreAppBinaryFilesRequest, opts ...grpc.CallOption) (*ListStoreAppBinaryFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStoreAppBinaryFilesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListStoreAppBinaryFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) DownloadStoreAppBinary(ctx context.Context, in *DownloadStoreAppBinaryRequest, opts ...grpc.CallOption) (*DownloadStoreAppBinaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadStoreAppBinaryResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_DownloadStoreAppBinary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListStoreAppSaveFiles(ctx context.Context, in *ListStoreAppSaveFilesRequest, opts ...grpc.CallOption) (*ListStoreAppSaveFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStoreAppSaveFilesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListStoreAppSaveFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) DownloadStoreAppSaveFile(ctx context.Context, in *DownloadStoreAppSaveFileRequest, opts ...grpc.CallOption) (*DownloadStoreAppSaveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadStoreAppSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_DownloadStoreAppSaveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SearchAppInfos(ctx context.Context, in *SearchAppInfosRequest, opts ...grpc.CallOption) (*SearchAppInfosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchAppInfosResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SearchAppInfos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAppResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAppResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListApps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) BatchCreateAppRunTime(ctx context.Context, in *BatchCreateAppRunTimeRequest, opts ...grpc.CallOption) (*BatchCreateAppRunTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreateAppRunTimeResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_BatchCreateAppRunTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SumAppRunTime(ctx context.Context, in *SumAppRunTimeRequest, opts ...grpc.CallOption) (*SumAppRunTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SumAppRunTimeResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SumAppRunTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListAppRunTimes(ctx context.Context, in *ListAppRunTimesRequest, opts ...grpc.CallOption) (*ListAppRunTimesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppRunTimesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListAppRunTimes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) DeleteAppRunTime(ctx context.Context, in *DeleteAppRunTimeRequest, opts ...grpc.CallOption) (*DeleteAppRunTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAppRunTimeResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_DeleteAppRunTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UploadAppSaveFile(ctx context.Context, in *UploadAppSaveFileRequest, opts ...grpc.CallOption) (*UploadAppSaveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadAppSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UploadAppSaveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) DownloadAppSaveFile(ctx context.Context, in *DownloadAppSaveFileRequest, opts ...grpc.CallOption) (*DownloadAppSaveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadAppSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_DownloadAppSaveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListAppSaveFiles(ctx context.Context, in *ListAppSaveFilesRequest, opts ...grpc.CallOption) (*ListAppSaveFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppSaveFilesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListAppSaveFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) DeleteAppSaveFile(ctx context.Context, in *DeleteAppSaveFileRequest, opts ...grpc.CallOption) (*DeleteAppSaveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAppSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_DeleteAppSaveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) PinAppSaveFile(ctx context.Context, in *PinAppSaveFileRequest, opts ...grpc.CallOption) (*PinAppSaveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PinAppSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_PinAppSaveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UnpinAppSaveFile(ctx context.Context, in *UnpinAppSaveFileRequest, opts ...grpc.CallOption) (*UnpinAppSaveFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnpinAppSaveFileResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UnpinAppSaveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetAppSaveFileCapacity(ctx context.Context, in *GetAppSaveFileCapacityRequest, opts ...grpc.CallOption) (*GetAppSaveFileCapacityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppSaveFileCapacityResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetAppSaveFileCapacity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) SetAppSaveFileCapacity(ctx context.Context, in *SetAppSaveFileCapacityRequest, opts ...grpc.CallOption) (*SetAppSaveFileCapacityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAppSaveFileCapacityResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_SetAppSaveFileCapacity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListAppCategories(ctx context.Context, in *ListAppCategoriesRequest, opts ...grpc.CallOption) (*ListAppCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppCategoriesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListAppCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateAppCategory(ctx context.Context, in *CreateAppCategoryRequest, opts ...grpc.CallOption) (*CreateAppCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAppCategoryResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateAppCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateAppCategory(ctx context.Context, in *UpdateAppCategoryRequest, opts ...grpc.CallOption) (*UpdateAppCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAppCategoryResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateAppCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) DeleteAppCategory(ctx context.Context, in *DeleteAppCategoryRequest, opts ...grpc.CallOption) (*DeleteAppCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAppCategoryResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_DeleteAppCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateNotifyTarget(ctx context.Context, in *CreateNotifyTargetRequest, opts ...grpc.CallOption) (*CreateNotifyTargetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNotifyTargetResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateNotifyTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateNotifyTarget(ctx context.Context, in *UpdateNotifyTargetRequest, opts ...grpc.CallOption) (*UpdateNotifyTargetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNotifyTargetResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateNotifyTarget_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListNotifyTargets(ctx context.Context, in *ListNotifyTargetsRequest, opts ...grpc.CallOption) (*ListNotifyTargetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotifyTargetsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListNotifyTargets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateNotifyFlow(ctx context.Context, in *CreateNotifyFlowRequest, opts ...grpc.CallOption) (*CreateNotifyFlowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNotifyFlowResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateNotifyFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateNotifyFlow(ctx context.Context, in *UpdateNotifyFlowRequest, opts ...grpc.CallOption) (*UpdateNotifyFlowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateNotifyFlowResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateNotifyFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListNotifyFlows(ctx context.Context, in *ListNotifyFlowsRequest, opts ...grpc.CallOption) (*ListNotifyFlowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotifyFlowsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListNotifyFlows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListSystemNotifications(ctx context.Context, in *ListSystemNotificationsRequest, opts ...grpc.CallOption) (*ListSystemNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSystemNotificationsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListSystemNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateSystemNotification(ctx context.Context, in *UpdateSystemNotificationRequest, opts ...grpc.CallOption) (*UpdateSystemNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSystemNotificationResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateSystemNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateFeedConfig(ctx context.Context, in *CreateFeedConfigRequest, opts ...grpc.CallOption) (*CreateFeedConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFeedConfigResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateFeedConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateFeedConfig(ctx context.Context, in *UpdateFeedConfigRequest, opts ...grpc.CallOption) (*UpdateFeedConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFeedConfigResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateFeedConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedConfigs(ctx context.Context, in *ListFeedConfigsRequest, opts ...grpc.CallOption) (*ListFeedConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeedConfigsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateFeedActionSet(ctx context.Context, in *CreateFeedActionSetRequest, opts ...grpc.CallOption) (*CreateFeedActionSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFeedActionSetResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateFeedActionSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateFeedActionSet(ctx context.Context, in *UpdateFeedActionSetRequest, opts ...grpc.CallOption) (*UpdateFeedActionSetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFeedActionSetResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateFeedActionSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedActionSets(ctx context.Context, in *ListFeedActionSetsRequest, opts ...grpc.CallOption) (*ListFeedActionSetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeedActionSetsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedActionSets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedCategories(ctx context.Context, in *ListFeedCategoriesRequest, opts ...grpc.CallOption) (*ListFeedCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeedCategoriesResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedPlatforms(ctx context.Context, in *ListFeedPlatformsRequest, opts ...grpc.CallOption) (*ListFeedPlatformsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeedPlatformsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedPlatforms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedItems(ctx context.Context, in *ListFeedItemsRequest, opts ...grpc.CallOption) (*ListFeedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeedItemsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetFeedItem(ctx context.Context, in *GetFeedItemRequest, opts ...grpc.CallOption) (*GetFeedItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeedItemResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetFeedItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) GetBatchFeedItems(ctx context.Context, in *GetBatchFeedItemsRequest, opts ...grpc.CallOption) (*GetBatchFeedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBatchFeedItemsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_GetBatchFeedItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ReadFeedItem(ctx context.Context, in *ReadFeedItemRequest, opts ...grpc.CallOption) (*ReadFeedItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadFeedItemResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ReadFeedItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) CreateFeedItemCollection(ctx context.Context, in *CreateFeedItemCollectionRequest, opts ...grpc.CallOption) (*CreateFeedItemCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFeedItemCollectionResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_CreateFeedItemCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) UpdateFeedItemCollection(ctx context.Context, in *UpdateFeedItemCollectionRequest, opts ...grpc.CallOption) (*UpdateFeedItemCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFeedItemCollectionResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_UpdateFeedItemCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedItemCollections(ctx context.Context, in *ListFeedItemCollectionsRequest, opts ...grpc.CallOption) (*ListFeedItemCollectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeedItemCollectionsResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedItemCollections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) AddFeedItemToCollection(ctx context.Context, in *AddFeedItemToCollectionRequest, opts ...grpc.CallOption) (*AddFeedItemToCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFeedItemToCollectionResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_AddFeedItemToCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) RemoveFeedItemFromCollection(ctx context.Context, in *RemoveFeedItemFromCollectionRequest, opts ...grpc.CallOption) (*RemoveFeedItemFromCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFeedItemFromCollectionResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_RemoveFeedItemFromCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSephirahServiceClient) ListFeedItemsInCollection(ctx context.Context, in *ListFeedItemsInCollectionRequest, opts ...grpc.CallOption) (*ListFeedItemsInCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeedItemsInCollectionResponse)
	err := c.cc.Invoke(ctx, LibrarianSephirahService_ListFeedItemsInCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibrarianSephirahServiceServer is the server API for LibrarianSephirahService service.
// All implementations must embed UnimplementedLibrarianSephirahServiceServer
// for forward compatibility.
//
// Sephirah contains the core logic and currently divided into the following modules:
// 1. `Tiphereth` handles account data and provides permission verification
// 2. `Gebura` handles application data
// 3. `Binah` handles file transfer
// 4. `Yesod` handles feed data
// 5. `Netzach` handles notifications
type LibrarianSephirahServiceServer interface {
	// Allow anonymous call, use accessToken to get complete information
	GetServerInformation(context.Context, *GetServerInformationRequest) (*GetServerInformationResponse, error)
	// `Normal` Client can use this to subscribe to server events.
	//
	// Server should send `SERVER_EVENT_LISTENER_CONNECTED` event immediately if the connection is valid.
	// Otherwise, client should treat the connection as failed.
	//
	// Server can close the stream at any time, client should reconnect if needed **with backoff**.
	// Only used to improve real-time experience, no guarantee of delivery.
	ListenServerEvent(*ListenServerEventRequest, grpc.ServerStreamingServer[ListenServerEventResponse]) error
	// `Tiphereth` `Normal` Login via password and get two token
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	// `Tiphereth` `Normal` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// `Tiphereth`
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// `Tiphereth` Self register as a new normal user
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	// `Tiphereth` `Normal` Update self user info
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// `Tiphereth` `Normal` Client should register device after the first login
	// and store the device_id locally.
	// The server could add extra limits to non-registered device
	RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error)
	// `Tiphereth` `Normal`
	ListRegisteredDevices(context.Context, *ListRegisteredDevicesRequest) (*ListRegisteredDevicesResponse, error)
	// `Tiphereth` `Normal`
	ListUserSessions(context.Context, *ListUserSessionsRequest) (*ListUserSessionsResponse, error)
	// `Tiphereth` `Normal` delete session will revoke refresh_token immediately.
	// NOTE: This can also be used to log out at server side.
	// NOTE2: Delete session will not affect device registration.
	DeleteUserSession(context.Context, *DeleteUserSessionRequest) (*DeleteUserSessionResponse, error)
	// `Tiphereth` `Normal` Bind third-party account to current user.
	LinkAccount(context.Context, *LinkAccountRequest) (*LinkAccountResponse, error)
	// `Tiphereth` `Normal` Unbind third-party account from current user.
	UnLinkAccount(context.Context, *UnLinkAccountRequest) (*UnLinkAccountResponse, error)
	// `Tiphereth` `Normal` List third-party account binded to current user.
	ListLinkAccounts(context.Context, *ListLinkAccountsRequest) (*ListLinkAccountsResponse, error)
	// `Tiphereth` `Normal`
	ListPorterDigests(context.Context, *ListPorterDigestsRequest) (*ListPorterDigestsResponse, error)
	// `Tiphereth` `Normal`
	CreatePorterContext(context.Context, *CreatePorterContextRequest) (*CreatePorterContextResponse, error)
	// `Tiphereth` `Normal`
	ListPorterContexts(context.Context, *ListPorterContextsRequest) (*ListPorterContextsResponse, error)
	// `Tiphereth` `Normal` Set porter context.
	UpdatePorterContext(context.Context, *UpdatePorterContextRequest) (*UpdatePorterContextResponse, error)
	// `Binah` `Normal`
	GetStorageCapacityUsage(context.Context, *GetStorageCapacityUsageRequest) (*GetStorageCapacityUsageResponse, error)
	// `Binah` `upload_token`
	UploadFile(grpc.BidiStreamingServer[UploadFileRequest, UploadFileResponse]) error
	// `Binah` `download_token`
	DownloadFile(grpc.BidiStreamingServer[DownloadFileRequest, DownloadFileResponse]) error
	// `Binah` `upload_token`
	// Maximum 256M
	// Server must send response at least once a minute to keepalive.
	// Client should ignore in_process response and wait for success or error response.
	SimpleUploadFile(grpc.BidiStreamingServer[SimpleUploadFileRequest, SimpleUploadFileResponse]) error
	// `Binah` `download_token`
	// Server will not check the receiving state
	SimpleDownloadFile(*SimpleDownloadFileRequest, grpc.ServerStreamingServer[SimpleDownloadFileResponse]) error
	// `Binah` `upload_token`
	// Upload file through http url
	PresignedUploadFile(context.Context, *PresignedUploadFileRequest) (*PresignedUploadFileResponse, error)
	// `Binah` `upload_token`
	// Report file transfer status. Mainly used to trigger server post-process immediately
	PresignedUploadFileStatus(context.Context, *PresignedUploadFileStatusRequest) (*PresignedUploadFileStatusResponse, error)
	// `Binah` `download_token`
	// Download file through http url
	PresignedDownloadFile(context.Context, *PresignedDownloadFileRequest) (*PresignedDownloadFileResponse, error)
	// `Chesed` `Normal`
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	// `Chesed` `Normal`
	UpdateImage(context.Context, *UpdateImageRequest) (*UpdateImageResponse, error)
	// `Chesed` `Normal`
	ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error)
	// `Chesed` `Normal`
	SearchImages(context.Context, *SearchImagesRequest) (*SearchImagesResponse, error)
	// `Chesed` `Normal`
	GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error)
	// `Chesed` `Normal`
	DownloadImage(context.Context, *DownloadImageRequest) (*DownloadImageResponse, error)
	// `Gebura` `Normal`
	SearchStoreApps(context.Context, *SearchStoreAppsRequest) (*SearchStoreAppsResponse, error)
	// `Gebura` `Normal`
	GetStoreAppSummary(context.Context, *GetStoreAppSummaryRequest) (*GetStoreAppSummaryResponse, error)
	// `Gebura` `Normal`
	AcquireStoreApp(context.Context, *AcquireStoreAppRequest) (*AcquireStoreAppResponse, error)
	// `Gebura` `Normal`
	ListStoreAppBinaries(context.Context, *ListStoreAppBinariesRequest) (*ListStoreAppBinariesResponse, error)
	// `Gebura` `Normal`
	ListStoreAppBinaryFiles(context.Context, *ListStoreAppBinaryFilesRequest) (*ListStoreAppBinaryFilesResponse, error)
	// `Gebura` `Normal`
	DownloadStoreAppBinary(context.Context, *DownloadStoreAppBinaryRequest) (*DownloadStoreAppBinaryResponse, error)
	// `Gebura` `Normal`
	ListStoreAppSaveFiles(context.Context, *ListStoreAppSaveFilesRequest) (*ListStoreAppSaveFilesResponse, error)
	// `Gebura` `Normal`
	DownloadStoreAppSaveFile(context.Context, *DownloadStoreAppSaveFileRequest) (*DownloadStoreAppSaveFileResponse, error)
	// `Gebura` `Normal` Search app infos
	SearchAppInfos(context.Context, *SearchAppInfosRequest) (*SearchAppInfosResponse, error)
	// `Gebura` `Normal`
	CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error)
	// `Gebura` `Normal`
	UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error)
	// `Gebura` `Normal`
	ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error)
	// `Gebura` `Normal`
	BatchCreateAppRunTime(context.Context, *BatchCreateAppRunTimeRequest) (*BatchCreateAppRunTimeResponse, error)
	// `Gebura` `Normal`
	SumAppRunTime(context.Context, *SumAppRunTimeRequest) (*SumAppRunTimeResponse, error)
	// `Gebura` `Normal`
	ListAppRunTimes(context.Context, *ListAppRunTimesRequest) (*ListAppRunTimesResponse, error)
	// `Gebura` `Normal`
	DeleteAppRunTime(context.Context, *DeleteAppRunTimeRequest) (*DeleteAppRunTimeResponse, error)
	// `Gebura` `Normal`
	UploadAppSaveFile(context.Context, *UploadAppSaveFileRequest) (*UploadAppSaveFileResponse, error)
	// `Gebura` `Normal`
	DownloadAppSaveFile(context.Context, *DownloadAppSaveFileRequest) (*DownloadAppSaveFileResponse, error)
	// `Gebura` `Normal`
	ListAppSaveFiles(context.Context, *ListAppSaveFilesRequest) (*ListAppSaveFilesResponse, error)
	// `Gebura` `Normal`
	DeleteAppSaveFile(context.Context, *DeleteAppSaveFileRequest) (*DeleteAppSaveFileResponse, error)
	// `Gebura` `Normal`
	PinAppSaveFile(context.Context, *PinAppSaveFileRequest) (*PinAppSaveFileResponse, error)
	// `Gebura` `Normal`
	UnpinAppSaveFile(context.Context, *UnpinAppSaveFileRequest) (*UnpinAppSaveFileResponse, error)
	// `Gebura` `Normal`
	GetAppSaveFileCapacity(context.Context, *GetAppSaveFileCapacityRequest) (*GetAppSaveFileCapacityResponse, error)
	// `Gebura` `Normal`
	SetAppSaveFileCapacity(context.Context, *SetAppSaveFileCapacityRequest) (*SetAppSaveFileCapacityResponse, error)
	// `Gebura` `Normal`
	ListAppCategories(context.Context, *ListAppCategoriesRequest) (*ListAppCategoriesResponse, error)
	// `Gebura` `Normal`
	CreateAppCategory(context.Context, *CreateAppCategoryRequest) (*CreateAppCategoryResponse, error)
	// `Gebura` `Normal`
	UpdateAppCategory(context.Context, *UpdateAppCategoryRequest) (*UpdateAppCategoryResponse, error)
	// `Gebura` `Normal`
	DeleteAppCategory(context.Context, *DeleteAppCategoryRequest) (*DeleteAppCategoryResponse, error)
	// `Netzach` `Normal`
	CreateNotifyTarget(context.Context, *CreateNotifyTargetRequest) (*CreateNotifyTargetResponse, error)
	// `Netzach` `Normal`
	UpdateNotifyTarget(context.Context, *UpdateNotifyTargetRequest) (*UpdateNotifyTargetResponse, error)
	// `Netzach` `Normal`
	ListNotifyTargets(context.Context, *ListNotifyTargetsRequest) (*ListNotifyTargetsResponse, error)
	// `Netzach` `Normal`
	CreateNotifyFlow(context.Context, *CreateNotifyFlowRequest) (*CreateNotifyFlowResponse, error)
	// `Netzach` `Normal`
	UpdateNotifyFlow(context.Context, *UpdateNotifyFlowRequest) (*UpdateNotifyFlowResponse, error)
	// `Netzach` `Normal`
	ListNotifyFlows(context.Context, *ListNotifyFlowsRequest) (*ListNotifyFlowsResponse, error)
	// `Netzach` `Normal`
	ListSystemNotifications(context.Context, *ListSystemNotificationsRequest) (*ListSystemNotificationsResponse, error)
	// `Netzach` `Normal`
	UpdateSystemNotification(context.Context, *UpdateSystemNotificationRequest) (*UpdateSystemNotificationResponse, error)
	// `Yesod` `Normal`
	CreateFeedConfig(context.Context, *CreateFeedConfigRequest) (*CreateFeedConfigResponse, error)
	// `Yesod` `Normal`
	UpdateFeedConfig(context.Context, *UpdateFeedConfigRequest) (*UpdateFeedConfigResponse, error)
	// `Yesod` `Normal`
	ListFeedConfigs(context.Context, *ListFeedConfigsRequest) (*ListFeedConfigsResponse, error)
	// `Yesod` `Normal`
	CreateFeedActionSet(context.Context, *CreateFeedActionSetRequest) (*CreateFeedActionSetResponse, error)
	// `Yesod` `Normal`
	UpdateFeedActionSet(context.Context, *UpdateFeedActionSetRequest) (*UpdateFeedActionSetResponse, error)
	// `Yesod` `Normal`
	ListFeedActionSets(context.Context, *ListFeedActionSetsRequest) (*ListFeedActionSetsResponse, error)
	// `Yesod` `Normal`
	ListFeedCategories(context.Context, *ListFeedCategoriesRequest) (*ListFeedCategoriesResponse, error)
	// `Yesod` `Normal`
	ListFeedPlatforms(context.Context, *ListFeedPlatformsRequest) (*ListFeedPlatformsResponse, error)
	// `Yesod` `Normal`
	ListFeedItems(context.Context, *ListFeedItemsRequest) (*ListFeedItemsResponse, error)
	// `Yesod` `Normal`
	GetFeedItem(context.Context, *GetFeedItemRequest) (*GetFeedItemResponse, error)
	// `Yesod` `Normal`
	GetBatchFeedItems(context.Context, *GetBatchFeedItemsRequest) (*GetBatchFeedItemsResponse, error)
	// `Yesod` `Normal`
	ReadFeedItem(context.Context, *ReadFeedItemRequest) (*ReadFeedItemResponse, error)
	// `Yesod` `Normal`
	CreateFeedItemCollection(context.Context, *CreateFeedItemCollectionRequest) (*CreateFeedItemCollectionResponse, error)
	// `Yesod` `Normal`
	UpdateFeedItemCollection(context.Context, *UpdateFeedItemCollectionRequest) (*UpdateFeedItemCollectionResponse, error)
	// `Yesod` `Normal`
	ListFeedItemCollections(context.Context, *ListFeedItemCollectionsRequest) (*ListFeedItemCollectionsResponse, error)
	// `Yesod` `Normal`
	AddFeedItemToCollection(context.Context, *AddFeedItemToCollectionRequest) (*AddFeedItemToCollectionResponse, error)
	// `Yesod` `Normal`
	RemoveFeedItemFromCollection(context.Context, *RemoveFeedItemFromCollectionRequest) (*RemoveFeedItemFromCollectionResponse, error)
	// `Yesod` `Normal`
	ListFeedItemsInCollection(context.Context, *ListFeedItemsInCollectionRequest) (*ListFeedItemsInCollectionResponse, error)
	mustEmbedUnimplementedLibrarianSephirahServiceServer()
}

// UnimplementedLibrarianSephirahServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLibrarianSephirahServiceServer struct{}

func (UnimplementedLibrarianSephirahServiceServer) GetServerInformation(context.Context, *GetServerInformationRequest) (*GetServerInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInformation not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListenServerEvent(*ListenServerEventRequest, grpc.ServerStreamingServer[ListenServerEventResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListenServerEvent not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListRegisteredDevices(context.Context, *ListRegisteredDevicesRequest) (*ListRegisteredDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegisteredDevices not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListUserSessions(context.Context, *ListUserSessionsRequest) (*ListUserSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserSessions not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DeleteUserSession(context.Context, *DeleteUserSessionRequest) (*DeleteUserSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserSession not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) LinkAccount(context.Context, *LinkAccountRequest) (*LinkAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkAccount not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UnLinkAccount(context.Context, *UnLinkAccountRequest) (*UnLinkAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLinkAccount not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListLinkAccounts(context.Context, *ListLinkAccountsRequest) (*ListLinkAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLinkAccounts not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListPorterDigests(context.Context, *ListPorterDigestsRequest) (*ListPorterDigestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPorterDigests not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreatePorterContext(context.Context, *CreatePorterContextRequest) (*CreatePorterContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePorterContext not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListPorterContexts(context.Context, *ListPorterContextsRequest) (*ListPorterContextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPorterContexts not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdatePorterContext(context.Context, *UpdatePorterContextRequest) (*UpdatePorterContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePorterContext not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetStorageCapacityUsage(context.Context, *GetStorageCapacityUsageRequest) (*GetStorageCapacityUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageCapacityUsage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UploadFile(grpc.BidiStreamingServer[UploadFileRequest, UploadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DownloadFile(grpc.BidiStreamingServer[DownloadFileRequest, DownloadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SimpleUploadFile(grpc.BidiStreamingServer[SimpleUploadFileRequest, SimpleUploadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SimpleUploadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SimpleDownloadFile(*SimpleDownloadFileRequest, grpc.ServerStreamingServer[SimpleDownloadFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SimpleDownloadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) PresignedUploadFile(context.Context, *PresignedUploadFileRequest) (*PresignedUploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresignedUploadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) PresignedUploadFileStatus(context.Context, *PresignedUploadFileStatusRequest) (*PresignedUploadFileStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresignedUploadFileStatus not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) PresignedDownloadFile(context.Context, *PresignedDownloadFileRequest) (*PresignedDownloadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresignedDownloadFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateImage(context.Context, *UpdateImageRequest) (*UpdateImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImages not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SearchImages(context.Context, *SearchImagesRequest) (*SearchImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchImages not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetImage(context.Context, *GetImageRequest) (*GetImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DownloadImage(context.Context, *DownloadImageRequest) (*DownloadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadImage not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SearchStoreApps(context.Context, *SearchStoreAppsRequest) (*SearchStoreAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchStoreApps not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetStoreAppSummary(context.Context, *GetStoreAppSummaryRequest) (*GetStoreAppSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreAppSummary not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) AcquireStoreApp(context.Context, *AcquireStoreAppRequest) (*AcquireStoreAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireStoreApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListStoreAppBinaries(context.Context, *ListStoreAppBinariesRequest) (*ListStoreAppBinariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStoreAppBinaries not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListStoreAppBinaryFiles(context.Context, *ListStoreAppBinaryFilesRequest) (*ListStoreAppBinaryFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStoreAppBinaryFiles not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DownloadStoreAppBinary(context.Context, *DownloadStoreAppBinaryRequest) (*DownloadStoreAppBinaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadStoreAppBinary not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListStoreAppSaveFiles(context.Context, *ListStoreAppSaveFilesRequest) (*ListStoreAppSaveFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStoreAppSaveFiles not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DownloadStoreAppSaveFile(context.Context, *DownloadStoreAppSaveFileRequest) (*DownloadStoreAppSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadStoreAppSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SearchAppInfos(context.Context, *SearchAppInfosRequest) (*SearchAppInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAppInfos not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) BatchCreateAppRunTime(context.Context, *BatchCreateAppRunTimeRequest) (*BatchCreateAppRunTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateAppRunTime not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SumAppRunTime(context.Context, *SumAppRunTimeRequest) (*SumAppRunTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SumAppRunTime not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListAppRunTimes(context.Context, *ListAppRunTimesRequest) (*ListAppRunTimesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppRunTimes not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DeleteAppRunTime(context.Context, *DeleteAppRunTimeRequest) (*DeleteAppRunTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppRunTime not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UploadAppSaveFile(context.Context, *UploadAppSaveFileRequest) (*UploadAppSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAppSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DownloadAppSaveFile(context.Context, *DownloadAppSaveFileRequest) (*DownloadAppSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadAppSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListAppSaveFiles(context.Context, *ListAppSaveFilesRequest) (*ListAppSaveFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppSaveFiles not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DeleteAppSaveFile(context.Context, *DeleteAppSaveFileRequest) (*DeleteAppSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) PinAppSaveFile(context.Context, *PinAppSaveFileRequest) (*PinAppSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinAppSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UnpinAppSaveFile(context.Context, *UnpinAppSaveFileRequest) (*UnpinAppSaveFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpinAppSaveFile not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetAppSaveFileCapacity(context.Context, *GetAppSaveFileCapacityRequest) (*GetAppSaveFileCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSaveFileCapacity not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) SetAppSaveFileCapacity(context.Context, *SetAppSaveFileCapacityRequest) (*SetAppSaveFileCapacityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAppSaveFileCapacity not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListAppCategories(context.Context, *ListAppCategoriesRequest) (*ListAppCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppCategories not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateAppCategory(context.Context, *CreateAppCategoryRequest) (*CreateAppCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppCategory not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateAppCategory(context.Context, *UpdateAppCategoryRequest) (*UpdateAppCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppCategory not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) DeleteAppCategory(context.Context, *DeleteAppCategoryRequest) (*DeleteAppCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppCategory not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateNotifyTarget(context.Context, *CreateNotifyTargetRequest) (*CreateNotifyTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotifyTarget not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateNotifyTarget(context.Context, *UpdateNotifyTargetRequest) (*UpdateNotifyTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifyTarget not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListNotifyTargets(context.Context, *ListNotifyTargetsRequest) (*ListNotifyTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifyTargets not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateNotifyFlow(context.Context, *CreateNotifyFlowRequest) (*CreateNotifyFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotifyFlow not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateNotifyFlow(context.Context, *UpdateNotifyFlowRequest) (*UpdateNotifyFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifyFlow not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListNotifyFlows(context.Context, *ListNotifyFlowsRequest) (*ListNotifyFlowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotifyFlows not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListSystemNotifications(context.Context, *ListSystemNotificationsRequest) (*ListSystemNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemNotifications not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateSystemNotification(context.Context, *UpdateSystemNotificationRequest) (*UpdateSystemNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemNotification not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateFeedConfig(context.Context, *CreateFeedConfigRequest) (*CreateFeedConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedConfig not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateFeedConfig(context.Context, *UpdateFeedConfigRequest) (*UpdateFeedConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedConfig not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedConfigs(context.Context, *ListFeedConfigsRequest) (*ListFeedConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedConfigs not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateFeedActionSet(context.Context, *CreateFeedActionSetRequest) (*CreateFeedActionSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedActionSet not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateFeedActionSet(context.Context, *UpdateFeedActionSetRequest) (*UpdateFeedActionSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedActionSet not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedActionSets(context.Context, *ListFeedActionSetsRequest) (*ListFeedActionSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedActionSets not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedCategories(context.Context, *ListFeedCategoriesRequest) (*ListFeedCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedCategories not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedPlatforms(context.Context, *ListFeedPlatformsRequest) (*ListFeedPlatformsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedPlatforms not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedItems(context.Context, *ListFeedItemsRequest) (*ListFeedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedItems not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetFeedItem(context.Context, *GetFeedItemRequest) (*GetFeedItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedItem not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) GetBatchFeedItems(context.Context, *GetBatchFeedItemsRequest) (*GetBatchFeedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchFeedItems not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ReadFeedItem(context.Context, *ReadFeedItemRequest) (*ReadFeedItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFeedItem not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) CreateFeedItemCollection(context.Context, *CreateFeedItemCollectionRequest) (*CreateFeedItemCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeedItemCollection not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) UpdateFeedItemCollection(context.Context, *UpdateFeedItemCollectionRequest) (*UpdateFeedItemCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeedItemCollection not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedItemCollections(context.Context, *ListFeedItemCollectionsRequest) (*ListFeedItemCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedItemCollections not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) AddFeedItemToCollection(context.Context, *AddFeedItemToCollectionRequest) (*AddFeedItemToCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeedItemToCollection not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) RemoveFeedItemFromCollection(context.Context, *RemoveFeedItemFromCollectionRequest) (*RemoveFeedItemFromCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFeedItemFromCollection not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) ListFeedItemsInCollection(context.Context, *ListFeedItemsInCollectionRequest) (*ListFeedItemsInCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeedItemsInCollection not implemented")
}
func (UnimplementedLibrarianSephirahServiceServer) mustEmbedUnimplementedLibrarianSephirahServiceServer() {
}
func (UnimplementedLibrarianSephirahServiceServer) testEmbeddedByValue() {}

// UnsafeLibrarianSephirahServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibrarianSephirahServiceServer will
// result in compilation errors.
type UnsafeLibrarianSephirahServiceServer interface {
	mustEmbedUnimplementedLibrarianSephirahServiceServer()
}

func RegisterLibrarianSephirahServiceServer(s grpc.ServiceRegistrar, srv LibrarianSephirahServiceServer) {
	// If the following call pancis, it indicates UnimplementedLibrarianSephirahServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LibrarianSephirahService_ServiceDesc, srv)
}

func _LibrarianSephirahService_GetServerInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetServerInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetServerInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetServerInformation(ctx, req.(*GetServerInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListenServerEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenServerEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LibrarianSephirahServiceServer).ListenServerEvent(m, &grpc.GenericServerStream[ListenServerEventRequest, ListenServerEventResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LibrarianSephirahService_ListenServerEventServer = grpc.ServerStreamingServer[ListenServerEventResponse]

func _LibrarianSephirahService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RegisterDevice(ctx, req.(*RegisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListRegisteredDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegisteredDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListRegisteredDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListRegisteredDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListRegisteredDevices(ctx, req.(*ListRegisteredDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListUserSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListUserSessions(ctx, req.(*ListUserSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_DeleteUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).DeleteUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_DeleteUserSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).DeleteUserSession(ctx, req.(*DeleteUserSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_LinkAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).LinkAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_LinkAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).LinkAccount(ctx, req.(*LinkAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UnLinkAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLinkAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UnLinkAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UnLinkAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UnLinkAccount(ctx, req.(*UnLinkAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListLinkAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLinkAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListLinkAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListLinkAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListLinkAccounts(ctx, req.(*ListLinkAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListPorterDigests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPorterDigestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListPorterDigests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListPorterDigests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListPorterDigests(ctx, req.(*ListPorterDigestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreatePorterContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePorterContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreatePorterContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreatePorterContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreatePorterContext(ctx, req.(*CreatePorterContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListPorterContexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPorterContextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListPorterContexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListPorterContexts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListPorterContexts(ctx, req.(*ListPorterContextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdatePorterContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePorterContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdatePorterContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdatePorterContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdatePorterContext(ctx, req.(*UpdatePorterContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetStorageCapacityUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorageCapacityUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetStorageCapacityUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetStorageCapacityUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetStorageCapacityUsage(ctx, req.(*GetStorageCapacityUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).UploadFile(&grpc.GenericServerStream[UploadFileRequest, UploadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LibrarianSephirahService_UploadFileServer = grpc.BidiStreamingServer[UploadFileRequest, UploadFileResponse]

func _LibrarianSephirahService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).DownloadFile(&grpc.GenericServerStream[DownloadFileRequest, DownloadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LibrarianSephirahService_DownloadFileServer = grpc.BidiStreamingServer[DownloadFileRequest, DownloadFileResponse]

func _LibrarianSephirahService_SimpleUploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianSephirahServiceServer).SimpleUploadFile(&grpc.GenericServerStream[SimpleUploadFileRequest, SimpleUploadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LibrarianSephirahService_SimpleUploadFileServer = grpc.BidiStreamingServer[SimpleUploadFileRequest, SimpleUploadFileResponse]

func _LibrarianSephirahService_SimpleDownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SimpleDownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LibrarianSephirahServiceServer).SimpleDownloadFile(m, &grpc.GenericServerStream[SimpleDownloadFileRequest, SimpleDownloadFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LibrarianSephirahService_SimpleDownloadFileServer = grpc.ServerStreamingServer[SimpleDownloadFileResponse]

func _LibrarianSephirahService_PresignedUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresignedUploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).PresignedUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_PresignedUploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).PresignedUploadFile(ctx, req.(*PresignedUploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_PresignedUploadFileStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresignedUploadFileStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).PresignedUploadFileStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_PresignedUploadFileStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).PresignedUploadFileStatus(ctx, req.(*PresignedUploadFileStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_PresignedDownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresignedDownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).PresignedDownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_PresignedDownloadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).PresignedDownloadFile(ctx, req.(*PresignedDownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UploadImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateImage(ctx, req.(*UpdateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListImages(ctx, req.(*ListImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SearchImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SearchImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SearchImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SearchImages(ctx, req.(*SearchImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetImage(ctx, req.(*GetImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_DownloadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).DownloadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_DownloadImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).DownloadImage(ctx, req.(*DownloadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SearchStoreApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchStoreAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SearchStoreApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SearchStoreApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SearchStoreApps(ctx, req.(*SearchStoreAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetStoreAppSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreAppSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetStoreAppSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetStoreAppSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetStoreAppSummary(ctx, req.(*GetStoreAppSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_AcquireStoreApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireStoreAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).AcquireStoreApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_AcquireStoreApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).AcquireStoreApp(ctx, req.(*AcquireStoreAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListStoreAppBinaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoreAppBinariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListStoreAppBinaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListStoreAppBinaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListStoreAppBinaries(ctx, req.(*ListStoreAppBinariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListStoreAppBinaryFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoreAppBinaryFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListStoreAppBinaryFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListStoreAppBinaryFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListStoreAppBinaryFiles(ctx, req.(*ListStoreAppBinaryFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_DownloadStoreAppBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadStoreAppBinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).DownloadStoreAppBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_DownloadStoreAppBinary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).DownloadStoreAppBinary(ctx, req.(*DownloadStoreAppBinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListStoreAppSaveFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoreAppSaveFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListStoreAppSaveFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListStoreAppSaveFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListStoreAppSaveFiles(ctx, req.(*ListStoreAppSaveFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_DownloadStoreAppSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadStoreAppSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).DownloadStoreAppSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_DownloadStoreAppSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).DownloadStoreAppSaveFile(ctx, req.(*DownloadStoreAppSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SearchAppInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAppInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SearchAppInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SearchAppInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SearchAppInfos(ctx, req.(*SearchAppInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateApp(ctx, req.(*CreateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateApp(ctx, req.(*UpdateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_BatchCreateAppRunTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateAppRunTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).BatchCreateAppRunTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_BatchCreateAppRunTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).BatchCreateAppRunTime(ctx, req.(*BatchCreateAppRunTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SumAppRunTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumAppRunTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SumAppRunTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SumAppRunTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SumAppRunTime(ctx, req.(*SumAppRunTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListAppRunTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppRunTimesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListAppRunTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListAppRunTimes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListAppRunTimes(ctx, req.(*ListAppRunTimesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_DeleteAppRunTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppRunTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).DeleteAppRunTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_DeleteAppRunTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).DeleteAppRunTime(ctx, req.(*DeleteAppRunTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UploadAppSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAppSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UploadAppSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UploadAppSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UploadAppSaveFile(ctx, req.(*UploadAppSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_DownloadAppSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadAppSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).DownloadAppSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_DownloadAppSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).DownloadAppSaveFile(ctx, req.(*DownloadAppSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListAppSaveFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppSaveFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListAppSaveFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListAppSaveFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListAppSaveFiles(ctx, req.(*ListAppSaveFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_DeleteAppSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).DeleteAppSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_DeleteAppSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).DeleteAppSaveFile(ctx, req.(*DeleteAppSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_PinAppSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinAppSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).PinAppSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_PinAppSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).PinAppSaveFile(ctx, req.(*PinAppSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UnpinAppSaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpinAppSaveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UnpinAppSaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UnpinAppSaveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UnpinAppSaveFile(ctx, req.(*UnpinAppSaveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetAppSaveFileCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppSaveFileCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetAppSaveFileCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetAppSaveFileCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetAppSaveFileCapacity(ctx, req.(*GetAppSaveFileCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_SetAppSaveFileCapacity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAppSaveFileCapacityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).SetAppSaveFileCapacity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_SetAppSaveFileCapacity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).SetAppSaveFileCapacity(ctx, req.(*SetAppSaveFileCapacityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListAppCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListAppCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListAppCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListAppCategories(ctx, req.(*ListAppCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateAppCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateAppCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateAppCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateAppCategory(ctx, req.(*CreateAppCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateAppCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateAppCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateAppCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateAppCategory(ctx, req.(*UpdateAppCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_DeleteAppCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).DeleteAppCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_DeleteAppCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).DeleteAppCategory(ctx, req.(*DeleteAppCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateNotifyTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifyTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateNotifyTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateNotifyTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateNotifyTarget(ctx, req.(*CreateNotifyTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateNotifyTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifyTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateNotifyTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateNotifyTarget_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateNotifyTarget(ctx, req.(*UpdateNotifyTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListNotifyTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotifyTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListNotifyTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListNotifyTargets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListNotifyTargets(ctx, req.(*ListNotifyTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateNotifyFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifyFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateNotifyFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateNotifyFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateNotifyFlow(ctx, req.(*CreateNotifyFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateNotifyFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifyFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateNotifyFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateNotifyFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateNotifyFlow(ctx, req.(*UpdateNotifyFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListNotifyFlows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotifyFlowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListNotifyFlows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListNotifyFlows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListNotifyFlows(ctx, req.(*ListNotifyFlowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListSystemNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListSystemNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListSystemNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListSystemNotifications(ctx, req.(*ListSystemNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateSystemNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateSystemNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateSystemNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateSystemNotification(ctx, req.(*UpdateSystemNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateFeedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateFeedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateFeedConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateFeedConfig(ctx, req.(*CreateFeedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateFeedConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateFeedConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedConfig(ctx, req.(*UpdateFeedConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedConfigs(ctx, req.(*ListFeedConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateFeedActionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedActionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateFeedActionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateFeedActionSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateFeedActionSet(ctx, req.(*CreateFeedActionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateFeedActionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedActionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedActionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateFeedActionSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedActionSet(ctx, req.(*UpdateFeedActionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedActionSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedActionSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedActionSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedActionSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedActionSets(ctx, req.(*ListFeedActionSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedCategories(ctx, req.(*ListFeedCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedPlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedPlatformsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedPlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedPlatforms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedPlatforms(ctx, req.(*ListFeedPlatformsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedItems(ctx, req.(*ListFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetFeedItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetFeedItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetFeedItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetFeedItem(ctx, req.(*GetFeedItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_GetBatchFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).GetBatchFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_GetBatchFeedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).GetBatchFeedItems(ctx, req.(*GetBatchFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ReadFeedItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFeedItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ReadFeedItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ReadFeedItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ReadFeedItem(ctx, req.(*ReadFeedItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_CreateFeedItemCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeedItemCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).CreateFeedItemCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_CreateFeedItemCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).CreateFeedItemCollection(ctx, req.(*CreateFeedItemCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_UpdateFeedItemCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeedItemCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedItemCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_UpdateFeedItemCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).UpdateFeedItemCollection(ctx, req.(*UpdateFeedItemCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedItemCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedItemCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedItemCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedItemCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedItemCollections(ctx, req.(*ListFeedItemCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_AddFeedItemToCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeedItemToCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).AddFeedItemToCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_AddFeedItemToCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).AddFeedItemToCollection(ctx, req.(*AddFeedItemToCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_RemoveFeedItemFromCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFeedItemFromCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).RemoveFeedItemFromCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_RemoveFeedItemFromCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).RemoveFeedItemFromCollection(ctx, req.(*RemoveFeedItemFromCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSephirahService_ListFeedItemsInCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeedItemsInCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSephirahServiceServer).ListFeedItemsInCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSephirahService_ListFeedItemsInCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSephirahServiceServer).ListFeedItemsInCollection(ctx, req.(*ListFeedItemsInCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibrarianSephirahService_ServiceDesc is the grpc.ServiceDesc for LibrarianSephirahService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibrarianSephirahService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "librarian.sephirah.v1.sephirah.LibrarianSephirahService",
	HandlerType: (*LibrarianSephirahServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerInformation",
			Handler:    _LibrarianSephirahService_GetServerInformation_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _LibrarianSephirahService_GetToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _LibrarianSephirahService_RefreshToken_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _LibrarianSephirahService_GetUser_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _LibrarianSephirahService_RegisterUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _LibrarianSephirahService_UpdateUser_Handler,
		},
		{
			MethodName: "RegisterDevice",
			Handler:    _LibrarianSephirahService_RegisterDevice_Handler,
		},
		{
			MethodName: "ListRegisteredDevices",
			Handler:    _LibrarianSephirahService_ListRegisteredDevices_Handler,
		},
		{
			MethodName: "ListUserSessions",
			Handler:    _LibrarianSephirahService_ListUserSessions_Handler,
		},
		{
			MethodName: "DeleteUserSession",
			Handler:    _LibrarianSephirahService_DeleteUserSession_Handler,
		},
		{
			MethodName: "LinkAccount",
			Handler:    _LibrarianSephirahService_LinkAccount_Handler,
		},
		{
			MethodName: "UnLinkAccount",
			Handler:    _LibrarianSephirahService_UnLinkAccount_Handler,
		},
		{
			MethodName: "ListLinkAccounts",
			Handler:    _LibrarianSephirahService_ListLinkAccounts_Handler,
		},
		{
			MethodName: "ListPorterDigests",
			Handler:    _LibrarianSephirahService_ListPorterDigests_Handler,
		},
		{
			MethodName: "CreatePorterContext",
			Handler:    _LibrarianSephirahService_CreatePorterContext_Handler,
		},
		{
			MethodName: "ListPorterContexts",
			Handler:    _LibrarianSephirahService_ListPorterContexts_Handler,
		},
		{
			MethodName: "UpdatePorterContext",
			Handler:    _LibrarianSephirahService_UpdatePorterContext_Handler,
		},
		{
			MethodName: "GetStorageCapacityUsage",
			Handler:    _LibrarianSephirahService_GetStorageCapacityUsage_Handler,
		},
		{
			MethodName: "PresignedUploadFile",
			Handler:    _LibrarianSephirahService_PresignedUploadFile_Handler,
		},
		{
			MethodName: "PresignedUploadFileStatus",
			Handler:    _LibrarianSephirahService_PresignedUploadFileStatus_Handler,
		},
		{
			MethodName: "PresignedDownloadFile",
			Handler:    _LibrarianSephirahService_PresignedDownloadFile_Handler,
		},
		{
			MethodName: "UploadImage",
			Handler:    _LibrarianSephirahService_UploadImage_Handler,
		},
		{
			MethodName: "UpdateImage",
			Handler:    _LibrarianSephirahService_UpdateImage_Handler,
		},
		{
			MethodName: "ListImages",
			Handler:    _LibrarianSephirahService_ListImages_Handler,
		},
		{
			MethodName: "SearchImages",
			Handler:    _LibrarianSephirahService_SearchImages_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _LibrarianSephirahService_GetImage_Handler,
		},
		{
			MethodName: "DownloadImage",
			Handler:    _LibrarianSephirahService_DownloadImage_Handler,
		},
		{
			MethodName: "SearchStoreApps",
			Handler:    _LibrarianSephirahService_SearchStoreApps_Handler,
		},
		{
			MethodName: "GetStoreAppSummary",
			Handler:    _LibrarianSephirahService_GetStoreAppSummary_Handler,
		},
		{
			MethodName: "AcquireStoreApp",
			Handler:    _LibrarianSephirahService_AcquireStoreApp_Handler,
		},
		{
			MethodName: "ListStoreAppBinaries",
			Handler:    _LibrarianSephirahService_ListStoreAppBinaries_Handler,
		},
		{
			MethodName: "ListStoreAppBinaryFiles",
			Handler:    _LibrarianSephirahService_ListStoreAppBinaryFiles_Handler,
		},
		{
			MethodName: "DownloadStoreAppBinary",
			Handler:    _LibrarianSephirahService_DownloadStoreAppBinary_Handler,
		},
		{
			MethodName: "ListStoreAppSaveFiles",
			Handler:    _LibrarianSephirahService_ListStoreAppSaveFiles_Handler,
		},
		{
			MethodName: "DownloadStoreAppSaveFile",
			Handler:    _LibrarianSephirahService_DownloadStoreAppSaveFile_Handler,
		},
		{
			MethodName: "SearchAppInfos",
			Handler:    _LibrarianSephirahService_SearchAppInfos_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _LibrarianSephirahService_CreateApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _LibrarianSephirahService_UpdateApp_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _LibrarianSephirahService_ListApps_Handler,
		},
		{
			MethodName: "BatchCreateAppRunTime",
			Handler:    _LibrarianSephirahService_BatchCreateAppRunTime_Handler,
		},
		{
			MethodName: "SumAppRunTime",
			Handler:    _LibrarianSephirahService_SumAppRunTime_Handler,
		},
		{
			MethodName: "ListAppRunTimes",
			Handler:    _LibrarianSephirahService_ListAppRunTimes_Handler,
		},
		{
			MethodName: "DeleteAppRunTime",
			Handler:    _LibrarianSephirahService_DeleteAppRunTime_Handler,
		},
		{
			MethodName: "UploadAppSaveFile",
			Handler:    _LibrarianSephirahService_UploadAppSaveFile_Handler,
		},
		{
			MethodName: "DownloadAppSaveFile",
			Handler:    _LibrarianSephirahService_DownloadAppSaveFile_Handler,
		},
		{
			MethodName: "ListAppSaveFiles",
			Handler:    _LibrarianSephirahService_ListAppSaveFiles_Handler,
		},
		{
			MethodName: "DeleteAppSaveFile",
			Handler:    _LibrarianSephirahService_DeleteAppSaveFile_Handler,
		},
		{
			MethodName: "PinAppSaveFile",
			Handler:    _LibrarianSephirahService_PinAppSaveFile_Handler,
		},
		{
			MethodName: "UnpinAppSaveFile",
			Handler:    _LibrarianSephirahService_UnpinAppSaveFile_Handler,
		},
		{
			MethodName: "GetAppSaveFileCapacity",
			Handler:    _LibrarianSephirahService_GetAppSaveFileCapacity_Handler,
		},
		{
			MethodName: "SetAppSaveFileCapacity",
			Handler:    _LibrarianSephirahService_SetAppSaveFileCapacity_Handler,
		},
		{
			MethodName: "ListAppCategories",
			Handler:    _LibrarianSephirahService_ListAppCategories_Handler,
		},
		{
			MethodName: "CreateAppCategory",
			Handler:    _LibrarianSephirahService_CreateAppCategory_Handler,
		},
		{
			MethodName: "UpdateAppCategory",
			Handler:    _LibrarianSephirahService_UpdateAppCategory_Handler,
		},
		{
			MethodName: "DeleteAppCategory",
			Handler:    _LibrarianSephirahService_DeleteAppCategory_Handler,
		},
		{
			MethodName: "CreateNotifyTarget",
			Handler:    _LibrarianSephirahService_CreateNotifyTarget_Handler,
		},
		{
			MethodName: "UpdateNotifyTarget",
			Handler:    _LibrarianSephirahService_UpdateNotifyTarget_Handler,
		},
		{
			MethodName: "ListNotifyTargets",
			Handler:    _LibrarianSephirahService_ListNotifyTargets_Handler,
		},
		{
			MethodName: "CreateNotifyFlow",
			Handler:    _LibrarianSephirahService_CreateNotifyFlow_Handler,
		},
		{
			MethodName: "UpdateNotifyFlow",
			Handler:    _LibrarianSephirahService_UpdateNotifyFlow_Handler,
		},
		{
			MethodName: "ListNotifyFlows",
			Handler:    _LibrarianSephirahService_ListNotifyFlows_Handler,
		},
		{
			MethodName: "ListSystemNotifications",
			Handler:    _LibrarianSephirahService_ListSystemNotifications_Handler,
		},
		{
			MethodName: "UpdateSystemNotification",
			Handler:    _LibrarianSephirahService_UpdateSystemNotification_Handler,
		},
		{
			MethodName: "CreateFeedConfig",
			Handler:    _LibrarianSephirahService_CreateFeedConfig_Handler,
		},
		{
			MethodName: "UpdateFeedConfig",
			Handler:    _LibrarianSephirahService_UpdateFeedConfig_Handler,
		},
		{
			MethodName: "ListFeedConfigs",
			Handler:    _LibrarianSephirahService_ListFeedConfigs_Handler,
		},
		{
			MethodName: "CreateFeedActionSet",
			Handler:    _LibrarianSephirahService_CreateFeedActionSet_Handler,
		},
		{
			MethodName: "UpdateFeedActionSet",
			Handler:    _LibrarianSephirahService_UpdateFeedActionSet_Handler,
		},
		{
			MethodName: "ListFeedActionSets",
			Handler:    _LibrarianSephirahService_ListFeedActionSets_Handler,
		},
		{
			MethodName: "ListFeedCategories",
			Handler:    _LibrarianSephirahService_ListFeedCategories_Handler,
		},
		{
			MethodName: "ListFeedPlatforms",
			Handler:    _LibrarianSephirahService_ListFeedPlatforms_Handler,
		},
		{
			MethodName: "ListFeedItems",
			Handler:    _LibrarianSephirahService_ListFeedItems_Handler,
		},
		{
			MethodName: "GetFeedItem",
			Handler:    _LibrarianSephirahService_GetFeedItem_Handler,
		},
		{
			MethodName: "GetBatchFeedItems",
			Handler:    _LibrarianSephirahService_GetBatchFeedItems_Handler,
		},
		{
			MethodName: "ReadFeedItem",
			Handler:    _LibrarianSephirahService_ReadFeedItem_Handler,
		},
		{
			MethodName: "CreateFeedItemCollection",
			Handler:    _LibrarianSephirahService_CreateFeedItemCollection_Handler,
		},
		{
			MethodName: "UpdateFeedItemCollection",
			Handler:    _LibrarianSephirahService_UpdateFeedItemCollection_Handler,
		},
		{
			MethodName: "ListFeedItemCollections",
			Handler:    _LibrarianSephirahService_ListFeedItemCollections_Handler,
		},
		{
			MethodName: "AddFeedItemToCollection",
			Handler:    _LibrarianSephirahService_AddFeedItemToCollection_Handler,
		},
		{
			MethodName: "RemoveFeedItemFromCollection",
			Handler:    _LibrarianSephirahService_RemoveFeedItemFromCollection_Handler,
		},
		{
			MethodName: "ListFeedItemsInCollection",
			Handler:    _LibrarianSephirahService_ListFeedItemsInCollection_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenServerEvent",
			Handler:       _LibrarianSephirahService_ListenServerEvent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadFile",
			Handler:       _LibrarianSephirahService_UploadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _LibrarianSephirahService_DownloadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SimpleUploadFile",
			Handler:       _LibrarianSephirahService_SimpleUploadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SimpleDownloadFile",
			Handler:       _LibrarianSephirahService_SimpleDownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "librarian/sephirah/v1/sephirah/sephirah_service.proto",
}
