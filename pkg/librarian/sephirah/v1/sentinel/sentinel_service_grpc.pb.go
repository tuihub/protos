// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: librarian/sephirah/v1/sentinel/sentinel_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LibrarianSentinelService_RefreshToken_FullMethodName              = "/librarian.sephirah.v1.sentinel.LibrarianSentinelService/RefreshToken"
	LibrarianSentinelService_ReportSentinelInformation_FullMethodName = "/librarian.sephirah.v1.sentinel.LibrarianSentinelService/ReportSentinelInformation"
	LibrarianSentinelService_ReportAppBinaries_FullMethodName         = "/librarian.sephirah.v1.sentinel.LibrarianSentinelService/ReportAppBinaries"
)

// LibrarianSentinelServiceClient is the client API for LibrarianSentinelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibrarianSentinelServiceClient interface {
	// `Tiphereth` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// `Gebura` `Sentinel`
	ReportSentinelInformation(ctx context.Context, in *ReportSentinelInformationRequest, opts ...grpc.CallOption) (*ReportSentinelInformationResponse, error)
	// `Gebura` `Sentinel`
	// Full update, changes are handled by librarian
	ReportAppBinaries(ctx context.Context, in *ReportAppBinariesRequest, opts ...grpc.CallOption) (*ReportAppBinariesResponse, error)
}

type librarianSentinelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibrarianSentinelServiceClient(cc grpc.ClientConnInterface) LibrarianSentinelServiceClient {
	return &librarianSentinelServiceClient{cc}
}

func (c *librarianSentinelServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, LibrarianSentinelService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSentinelServiceClient) ReportSentinelInformation(ctx context.Context, in *ReportSentinelInformationRequest, opts ...grpc.CallOption) (*ReportSentinelInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportSentinelInformationResponse)
	err := c.cc.Invoke(ctx, LibrarianSentinelService_ReportSentinelInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSentinelServiceClient) ReportAppBinaries(ctx context.Context, in *ReportAppBinariesRequest, opts ...grpc.CallOption) (*ReportAppBinariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportAppBinariesResponse)
	err := c.cc.Invoke(ctx, LibrarianSentinelService_ReportAppBinaries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibrarianSentinelServiceServer is the server API for LibrarianSentinelService service.
// All implementations must embed UnimplementedLibrarianSentinelServiceServer
// for forward compatibility.
type LibrarianSentinelServiceServer interface {
	// `Tiphereth` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error)
	// `Gebura` `Sentinel`
	ReportSentinelInformation(context.Context, *ReportSentinelInformationRequest) (*ReportSentinelInformationResponse, error)
	// `Gebura` `Sentinel`
	// Full update, changes are handled by librarian
	ReportAppBinaries(context.Context, *ReportAppBinariesRequest) (*ReportAppBinariesResponse, error)
	mustEmbedUnimplementedLibrarianSentinelServiceServer()
}

// UnimplementedLibrarianSentinelServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLibrarianSentinelServiceServer struct{}

func (UnimplementedLibrarianSentinelServiceServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedLibrarianSentinelServiceServer) ReportSentinelInformation(context.Context, *ReportSentinelInformationRequest) (*ReportSentinelInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportSentinelInformation not implemented")
}
func (UnimplementedLibrarianSentinelServiceServer) ReportAppBinaries(context.Context, *ReportAppBinariesRequest) (*ReportAppBinariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportAppBinaries not implemented")
}
func (UnimplementedLibrarianSentinelServiceServer) mustEmbedUnimplementedLibrarianSentinelServiceServer() {
}
func (UnimplementedLibrarianSentinelServiceServer) testEmbeddedByValue() {}

// UnsafeLibrarianSentinelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibrarianSentinelServiceServer will
// result in compilation errors.
type UnsafeLibrarianSentinelServiceServer interface {
	mustEmbedUnimplementedLibrarianSentinelServiceServer()
}

func RegisterLibrarianSentinelServiceServer(s grpc.ServiceRegistrar, srv LibrarianSentinelServiceServer) {
	// If the following call pancis, it indicates UnimplementedLibrarianSentinelServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LibrarianSentinelService_ServiceDesc, srv)
}

func _LibrarianSentinelService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSentinelServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSentinelService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSentinelServiceServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSentinelService_ReportSentinelInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportSentinelInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSentinelServiceServer).ReportSentinelInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSentinelService_ReportSentinelInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSentinelServiceServer).ReportSentinelInformation(ctx, req.(*ReportSentinelInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSentinelService_ReportAppBinaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportAppBinariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSentinelServiceServer).ReportAppBinaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianSentinelService_ReportAppBinaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSentinelServiceServer).ReportAppBinaries(ctx, req.(*ReportAppBinariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibrarianSentinelService_ServiceDesc is the grpc.ServiceDesc for LibrarianSentinelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibrarianSentinelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "librarian.sephirah.v1.sentinel.LibrarianSentinelService",
	HandlerType: (*LibrarianSentinelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RefreshToken",
			Handler:    _LibrarianSentinelService_RefreshToken_Handler,
		},
		{
			MethodName: "ReportSentinelInformation",
			Handler:    _LibrarianSentinelService_ReportSentinelInformation_Handler,
		},
		{
			MethodName: "ReportAppBinaries",
			Handler:    _LibrarianSentinelService_ReportAppBinaries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "librarian/sephirah/v1/sentinel/sentinel_service.proto",
}
