// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: librarian/sephirah/v1/sentinel/sentinel_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	sentinel "github.com/tuihub/protos/pkg/librarian/sephirah/v1/sentinel"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LibrarianSentinelServiceName is the fully-qualified name of the LibrarianSentinelService service.
	LibrarianSentinelServiceName = "librarian.sephirah.v1.sentinel.LibrarianSentinelService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LibrarianSentinelServiceRefreshTokenProcedure is the fully-qualified name of the
	// LibrarianSentinelService's RefreshToken RPC.
	LibrarianSentinelServiceRefreshTokenProcedure = "/librarian.sephirah.v1.sentinel.LibrarianSentinelService/RefreshToken"
	// LibrarianSentinelServiceHeartbeatProcedure is the fully-qualified name of the
	// LibrarianSentinelService's Heartbeat RPC.
	LibrarianSentinelServiceHeartbeatProcedure = "/librarian.sephirah.v1.sentinel.LibrarianSentinelService/Heartbeat"
	// LibrarianSentinelServiceReportSentinelInformationProcedure is the fully-qualified name of the
	// LibrarianSentinelService's ReportSentinelInformation RPC.
	LibrarianSentinelServiceReportSentinelInformationProcedure = "/librarian.sephirah.v1.sentinel.LibrarianSentinelService/ReportSentinelInformation"
	// LibrarianSentinelServiceReportAppBinariesProcedure is the fully-qualified name of the
	// LibrarianSentinelService's ReportAppBinaries RPC.
	LibrarianSentinelServiceReportAppBinariesProcedure = "/librarian.sephirah.v1.sentinel.LibrarianSentinelService/ReportAppBinaries"
)

// LibrarianSentinelServiceClient is a client for the
// librarian.sephirah.v1.sentinel.LibrarianSentinelService service.
type LibrarianSentinelServiceClient interface {
	// `Tiphereth` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(context.Context, *connect.Request[sentinel.RefreshTokenRequest]) (*connect.Response[sentinel.RefreshTokenResponse], error)
	// `Tiphereth`
	Heartbeat(context.Context, *connect.Request[sentinel.HeartbeatRequest]) (*connect.Response[sentinel.HeartbeatResponse], error)
	// `Gebura`
	ReportSentinelInformation(context.Context, *connect.Request[sentinel.ReportSentinelInformationRequest]) (*connect.Response[sentinel.ReportSentinelInformationResponse], error)
	// `Gebura`
	// Full update, changes are handled by librarian
	ReportAppBinaries(context.Context, *connect.Request[sentinel.ReportAppBinariesRequest]) (*connect.Response[sentinel.ReportAppBinariesResponse], error)
}

// NewLibrarianSentinelServiceClient constructs a client for the
// librarian.sephirah.v1.sentinel.LibrarianSentinelService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLibrarianSentinelServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LibrarianSentinelServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	librarianSentinelServiceMethods := sentinel.File_librarian_sephirah_v1_sentinel_sentinel_service_proto.Services().ByName("LibrarianSentinelService").Methods()
	return &librarianSentinelServiceClient{
		refreshToken: connect.NewClient[sentinel.RefreshTokenRequest, sentinel.RefreshTokenResponse](
			httpClient,
			baseURL+LibrarianSentinelServiceRefreshTokenProcedure,
			connect.WithSchema(librarianSentinelServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		heartbeat: connect.NewClient[sentinel.HeartbeatRequest, sentinel.HeartbeatResponse](
			httpClient,
			baseURL+LibrarianSentinelServiceHeartbeatProcedure,
			connect.WithSchema(librarianSentinelServiceMethods.ByName("Heartbeat")),
			connect.WithClientOptions(opts...),
		),
		reportSentinelInformation: connect.NewClient[sentinel.ReportSentinelInformationRequest, sentinel.ReportSentinelInformationResponse](
			httpClient,
			baseURL+LibrarianSentinelServiceReportSentinelInformationProcedure,
			connect.WithSchema(librarianSentinelServiceMethods.ByName("ReportSentinelInformation")),
			connect.WithClientOptions(opts...),
		),
		reportAppBinaries: connect.NewClient[sentinel.ReportAppBinariesRequest, sentinel.ReportAppBinariesResponse](
			httpClient,
			baseURL+LibrarianSentinelServiceReportAppBinariesProcedure,
			connect.WithSchema(librarianSentinelServiceMethods.ByName("ReportAppBinaries")),
			connect.WithClientOptions(opts...),
		),
	}
}

// librarianSentinelServiceClient implements LibrarianSentinelServiceClient.
type librarianSentinelServiceClient struct {
	refreshToken              *connect.Client[sentinel.RefreshTokenRequest, sentinel.RefreshTokenResponse]
	heartbeat                 *connect.Client[sentinel.HeartbeatRequest, sentinel.HeartbeatResponse]
	reportSentinelInformation *connect.Client[sentinel.ReportSentinelInformationRequest, sentinel.ReportSentinelInformationResponse]
	reportAppBinaries         *connect.Client[sentinel.ReportAppBinariesRequest, sentinel.ReportAppBinariesResponse]
}

// RefreshToken calls librarian.sephirah.v1.sentinel.LibrarianSentinelService.RefreshToken.
func (c *librarianSentinelServiceClient) RefreshToken(ctx context.Context, req *connect.Request[sentinel.RefreshTokenRequest]) (*connect.Response[sentinel.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// Heartbeat calls librarian.sephirah.v1.sentinel.LibrarianSentinelService.Heartbeat.
func (c *librarianSentinelServiceClient) Heartbeat(ctx context.Context, req *connect.Request[sentinel.HeartbeatRequest]) (*connect.Response[sentinel.HeartbeatResponse], error) {
	return c.heartbeat.CallUnary(ctx, req)
}

// ReportSentinelInformation calls
// librarian.sephirah.v1.sentinel.LibrarianSentinelService.ReportSentinelInformation.
func (c *librarianSentinelServiceClient) ReportSentinelInformation(ctx context.Context, req *connect.Request[sentinel.ReportSentinelInformationRequest]) (*connect.Response[sentinel.ReportSentinelInformationResponse], error) {
	return c.reportSentinelInformation.CallUnary(ctx, req)
}

// ReportAppBinaries calls
// librarian.sephirah.v1.sentinel.LibrarianSentinelService.ReportAppBinaries.
func (c *librarianSentinelServiceClient) ReportAppBinaries(ctx context.Context, req *connect.Request[sentinel.ReportAppBinariesRequest]) (*connect.Response[sentinel.ReportAppBinariesResponse], error) {
	return c.reportAppBinaries.CallUnary(ctx, req)
}

// LibrarianSentinelServiceHandler is an implementation of the
// librarian.sephirah.v1.sentinel.LibrarianSentinelService service.
type LibrarianSentinelServiceHandler interface {
	// `Tiphereth` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(context.Context, *connect.Request[sentinel.RefreshTokenRequest]) (*connect.Response[sentinel.RefreshTokenResponse], error)
	// `Tiphereth`
	Heartbeat(context.Context, *connect.Request[sentinel.HeartbeatRequest]) (*connect.Response[sentinel.HeartbeatResponse], error)
	// `Gebura`
	ReportSentinelInformation(context.Context, *connect.Request[sentinel.ReportSentinelInformationRequest]) (*connect.Response[sentinel.ReportSentinelInformationResponse], error)
	// `Gebura`
	// Full update, changes are handled by librarian
	ReportAppBinaries(context.Context, *connect.Request[sentinel.ReportAppBinariesRequest]) (*connect.Response[sentinel.ReportAppBinariesResponse], error)
}

// NewLibrarianSentinelServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLibrarianSentinelServiceHandler(svc LibrarianSentinelServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	librarianSentinelServiceMethods := sentinel.File_librarian_sephirah_v1_sentinel_sentinel_service_proto.Services().ByName("LibrarianSentinelService").Methods()
	librarianSentinelServiceRefreshTokenHandler := connect.NewUnaryHandler(
		LibrarianSentinelServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(librarianSentinelServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSentinelServiceHeartbeatHandler := connect.NewUnaryHandler(
		LibrarianSentinelServiceHeartbeatProcedure,
		svc.Heartbeat,
		connect.WithSchema(librarianSentinelServiceMethods.ByName("Heartbeat")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSentinelServiceReportSentinelInformationHandler := connect.NewUnaryHandler(
		LibrarianSentinelServiceReportSentinelInformationProcedure,
		svc.ReportSentinelInformation,
		connect.WithSchema(librarianSentinelServiceMethods.ByName("ReportSentinelInformation")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSentinelServiceReportAppBinariesHandler := connect.NewUnaryHandler(
		LibrarianSentinelServiceReportAppBinariesProcedure,
		svc.ReportAppBinaries,
		connect.WithSchema(librarianSentinelServiceMethods.ByName("ReportAppBinaries")),
		connect.WithHandlerOptions(opts...),
	)
	return "/librarian.sephirah.v1.sentinel.LibrarianSentinelService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LibrarianSentinelServiceRefreshTokenProcedure:
			librarianSentinelServiceRefreshTokenHandler.ServeHTTP(w, r)
		case LibrarianSentinelServiceHeartbeatProcedure:
			librarianSentinelServiceHeartbeatHandler.ServeHTTP(w, r)
		case LibrarianSentinelServiceReportSentinelInformationProcedure:
			librarianSentinelServiceReportSentinelInformationHandler.ServeHTTP(w, r)
		case LibrarianSentinelServiceReportAppBinariesProcedure:
			librarianSentinelServiceReportAppBinariesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLibrarianSentinelServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLibrarianSentinelServiceHandler struct{}

func (UnimplementedLibrarianSentinelServiceHandler) RefreshToken(context.Context, *connect.Request[sentinel.RefreshTokenRequest]) (*connect.Response[sentinel.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.sentinel.LibrarianSentinelService.RefreshToken is not implemented"))
}

func (UnimplementedLibrarianSentinelServiceHandler) Heartbeat(context.Context, *connect.Request[sentinel.HeartbeatRequest]) (*connect.Response[sentinel.HeartbeatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.sentinel.LibrarianSentinelService.Heartbeat is not implemented"))
}

func (UnimplementedLibrarianSentinelServiceHandler) ReportSentinelInformation(context.Context, *connect.Request[sentinel.ReportSentinelInformationRequest]) (*connect.Response[sentinel.ReportSentinelInformationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.sentinel.LibrarianSentinelService.ReportSentinelInformation is not implemented"))
}

func (UnimplementedLibrarianSentinelServiceHandler) ReportAppBinaries(context.Context, *connect.Request[sentinel.ReportAppBinariesRequest]) (*connect.Response[sentinel.ReportAppBinariesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.sentinel.LibrarianSentinelService.ReportAppBinaries is not implemented"))
}
