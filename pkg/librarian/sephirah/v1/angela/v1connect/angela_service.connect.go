// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: librarian/sephirah/v1/angela/angela_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tuihub/protos/pkg/librarian/sephirah/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LibrarianAngelaServiceName is the fully-qualified name of the LibrarianAngelaService service.
	LibrarianAngelaServiceName = "librarian.sephirah.v1.angela.LibrarianAngelaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LibrarianAngelaServiceGetServerInformationProcedure is the fully-qualified name of the
	// LibrarianAngelaService's GetServerInformation RPC.
	LibrarianAngelaServiceGetServerInformationProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/GetServerInformation"
	// LibrarianAngelaServiceGetServerConfigProcedure is the fully-qualified name of the
	// LibrarianAngelaService's GetServerConfig RPC.
	LibrarianAngelaServiceGetServerConfigProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/GetServerConfig"
	// LibrarianAngelaServiceUpdateServerConfigProcedure is the fully-qualified name of the
	// LibrarianAngelaService's UpdateServerConfig RPC.
	LibrarianAngelaServiceUpdateServerConfigProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/UpdateServerConfig"
	// LibrarianAngelaServiceGetTokenProcedure is the fully-qualified name of the
	// LibrarianAngelaService's GetToken RPC.
	LibrarianAngelaServiceGetTokenProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/GetToken"
	// LibrarianAngelaServiceRefreshTokenProcedure is the fully-qualified name of the
	// LibrarianAngelaService's RefreshToken RPC.
	LibrarianAngelaServiceRefreshTokenProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/RefreshToken"
	// LibrarianAngelaServiceCreateUserProcedure is the fully-qualified name of the
	// LibrarianAngelaService's CreateUser RPC.
	LibrarianAngelaServiceCreateUserProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/CreateUser"
	// LibrarianAngelaServiceUpdateUserProcedure is the fully-qualified name of the
	// LibrarianAngelaService's UpdateUser RPC.
	LibrarianAngelaServiceUpdateUserProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/UpdateUser"
	// LibrarianAngelaServiceListUsersProcedure is the fully-qualified name of the
	// LibrarianAngelaService's ListUsers RPC.
	LibrarianAngelaServiceListUsersProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/ListUsers"
	// LibrarianAngelaServiceListPortersProcedure is the fully-qualified name of the
	// LibrarianAngelaService's ListPorters RPC.
	LibrarianAngelaServiceListPortersProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/ListPorters"
	// LibrarianAngelaServiceUpdatePorterStatusProcedure is the fully-qualified name of the
	// LibrarianAngelaService's UpdatePorterStatus RPC.
	LibrarianAngelaServiceUpdatePorterStatusProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/UpdatePorterStatus"
	// LibrarianAngelaServiceDeletePorterProcedure is the fully-qualified name of the
	// LibrarianAngelaService's DeletePorter RPC.
	LibrarianAngelaServiceDeletePorterProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/DeletePorter"
	// LibrarianAngelaServiceCreateSentinelProcedure is the fully-qualified name of the
	// LibrarianAngelaService's CreateSentinel RPC.
	LibrarianAngelaServiceCreateSentinelProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/CreateSentinel"
	// LibrarianAngelaServiceGetSentinelTokenProcedure is the fully-qualified name of the
	// LibrarianAngelaService's GetSentinelToken RPC.
	LibrarianAngelaServiceGetSentinelTokenProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/GetSentinelToken"
	// LibrarianAngelaServiceUpdateSentinelProcedure is the fully-qualified name of the
	// LibrarianAngelaService's UpdateSentinel RPC.
	LibrarianAngelaServiceUpdateSentinelProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/UpdateSentinel"
	// LibrarianAngelaServiceListSentinelsProcedure is the fully-qualified name of the
	// LibrarianAngelaService's ListSentinels RPC.
	LibrarianAngelaServiceListSentinelsProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/ListSentinels"
	// LibrarianAngelaServiceDeleteSentinelProcedure is the fully-qualified name of the
	// LibrarianAngelaService's DeleteSentinel RPC.
	LibrarianAngelaServiceDeleteSentinelProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/DeleteSentinel"
	// LibrarianAngelaServiceListStorageCapacityUsageProcedure is the fully-qualified name of the
	// LibrarianAngelaService's ListStorageCapacityUsage RPC.
	LibrarianAngelaServiceListStorageCapacityUsageProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/ListStorageCapacityUsage"
	// LibrarianAngelaServiceSimpleUploadFileProcedure is the fully-qualified name of the
	// LibrarianAngelaService's SimpleUploadFile RPC.
	LibrarianAngelaServiceSimpleUploadFileProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/SimpleUploadFile"
	// LibrarianAngelaServiceSimpleDownloadFileProcedure is the fully-qualified name of the
	// LibrarianAngelaService's SimpleDownloadFile RPC.
	LibrarianAngelaServiceSimpleDownloadFileProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/SimpleDownloadFile"
	// LibrarianAngelaServicePresignedUploadFileProcedure is the fully-qualified name of the
	// LibrarianAngelaService's PresignedUploadFile RPC.
	LibrarianAngelaServicePresignedUploadFileProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/PresignedUploadFile"
	// LibrarianAngelaServicePresignedUploadFileStatusProcedure is the fully-qualified name of the
	// LibrarianAngelaService's PresignedUploadFileStatus RPC.
	LibrarianAngelaServicePresignedUploadFileStatusProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/PresignedUploadFileStatus"
	// LibrarianAngelaServicePresignedDownloadFileProcedure is the fully-qualified name of the
	// LibrarianAngelaService's PresignedDownloadFile RPC.
	LibrarianAngelaServicePresignedDownloadFileProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/PresignedDownloadFile"
	// LibrarianAngelaServiceSearchAppInfosProcedure is the fully-qualified name of the
	// LibrarianAngelaService's SearchAppInfos RPC.
	LibrarianAngelaServiceSearchAppInfosProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/SearchAppInfos"
	// LibrarianAngelaServiceCreateStoreAppProcedure is the fully-qualified name of the
	// LibrarianAngelaService's CreateStoreApp RPC.
	LibrarianAngelaServiceCreateStoreAppProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/CreateStoreApp"
	// LibrarianAngelaServiceUpdateStoreAppProcedure is the fully-qualified name of the
	// LibrarianAngelaService's UpdateStoreApp RPC.
	LibrarianAngelaServiceUpdateStoreAppProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/UpdateStoreApp"
	// LibrarianAngelaServiceListStoreAppsProcedure is the fully-qualified name of the
	// LibrarianAngelaService's ListStoreApps RPC.
	LibrarianAngelaServiceListStoreAppsProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/ListStoreApps"
	// LibrarianAngelaServiceListStoreAppBinariesProcedure is the fully-qualified name of the
	// LibrarianAngelaService's ListStoreAppBinaries RPC.
	LibrarianAngelaServiceListStoreAppBinariesProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/ListStoreAppBinaries"
	// LibrarianAngelaServiceUpdateStoreAppBinaryProcedure is the fully-qualified name of the
	// LibrarianAngelaService's UpdateStoreAppBinary RPC.
	LibrarianAngelaServiceUpdateStoreAppBinaryProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/UpdateStoreAppBinary"
	// LibrarianAngelaServiceListStoreAppBinaryFilesProcedure is the fully-qualified name of the
	// LibrarianAngelaService's ListStoreAppBinaryFiles RPC.
	LibrarianAngelaServiceListStoreAppBinaryFilesProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/ListStoreAppBinaryFiles"
	// LibrarianAngelaServiceCreateStoreAppSaveFileProcedure is the fully-qualified name of the
	// LibrarianAngelaService's CreateStoreAppSaveFile RPC.
	LibrarianAngelaServiceCreateStoreAppSaveFileProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/CreateStoreAppSaveFile"
	// LibrarianAngelaServiceUpdateStoreAppSaveFileProcedure is the fully-qualified name of the
	// LibrarianAngelaService's UpdateStoreAppSaveFile RPC.
	LibrarianAngelaServiceUpdateStoreAppSaveFileProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/UpdateStoreAppSaveFile"
	// LibrarianAngelaServiceUploadStoreAppSaveFileProcedure is the fully-qualified name of the
	// LibrarianAngelaService's UploadStoreAppSaveFile RPC.
	LibrarianAngelaServiceUploadStoreAppSaveFileProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/UploadStoreAppSaveFile"
	// LibrarianAngelaServiceListStoreAppSaveFilesProcedure is the fully-qualified name of the
	// LibrarianAngelaService's ListStoreAppSaveFiles RPC.
	LibrarianAngelaServiceListStoreAppSaveFilesProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/ListStoreAppSaveFiles"
	// LibrarianAngelaServiceDeleteStoreAppSaveFileProcedure is the fully-qualified name of the
	// LibrarianAngelaService's DeleteStoreAppSaveFile RPC.
	LibrarianAngelaServiceDeleteStoreAppSaveFileProcedure = "/librarian.sephirah.v1.angela.LibrarianAngelaService/DeleteStoreAppSaveFile"
)

// LibrarianAngelaServiceClient is a client for the
// librarian.sephirah.v1.angela.LibrarianAngelaService service.
type LibrarianAngelaServiceClient interface {
	// Allow anonymous call, use accessToken to get complete information
	GetServerInformation(context.Context, *connect.Request[v1.GetServerInformationRequest]) (*connect.Response[v1.GetServerInformationResponse], error)
	GetServerConfig(context.Context, *connect.Request[v1.GetServerConfigRequest]) (*connect.Response[v1.GetServerConfigResponse], error)
	UpdateServerConfig(context.Context, *connect.Request[v1.UpdateServerConfigRequest]) (*connect.Response[v1.UpdateServerConfigResponse], error)
	// `Tiphereth` Login via password and get two token
	GetToken(context.Context, *connect.Request[v1.GetTokenRequest]) (*connect.Response[v1.GetTokenResponse], error)
	// `Tiphereth` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	// `Tiphereth`
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	// `Tiphereth`
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// `Tiphereth`
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	// `Tiphereth`
	ListPorters(context.Context, *connect.Request[v1.ListPortersRequest]) (*connect.Response[v1.ListPortersResponse], error)
	// `Tiphereth`
	UpdatePorterStatus(context.Context, *connect.Request[v1.UpdatePorterStatusRequest]) (*connect.Response[v1.UpdatePorterStatusResponse], error)
	// `Tiphereth` Delete porter, only when porter is disabled
	DeletePorter(context.Context, *connect.Request[v1.DeletePorterRequest]) (*connect.Response[v1.DeletePorterResponse], error)
	// `Tiphereth`
	CreateSentinel(context.Context, *connect.Request[v1.CreateSentinelRequest]) (*connect.Response[v1.CreateSentinelResponse], error)
	// `Tiphereth`
	GetSentinelToken(context.Context, *connect.Request[v1.GetSentinelTokenRequest]) (*connect.Response[v1.GetSentinelTokenResponse], error)
	// `Tiphereth`
	UpdateSentinel(context.Context, *connect.Request[v1.UpdateSentinelRequest]) (*connect.Response[v1.UpdateSentinelResponse], error)
	// `Tiphereth`
	ListSentinels(context.Context, *connect.Request[v1.ListSentinelsRequest]) (*connect.Response[v1.ListSentinelsResponse], error)
	// `Tiphereth`
	DeleteSentinel(context.Context, *connect.Request[v1.DeleteSentinelRequest]) (*connect.Response[v1.DeleteSentinelResponse], error)
	// `Binah`
	ListStorageCapacityUsage(context.Context, *connect.Request[v1.ListStorageCapacityUsageRequest]) (*connect.Response[v1.ListStorageCapacityUsageResponse], error)
	// `Binah` `upload_token`
	// Maximum 256M
	// Server must send response at least once a minute to keepalive.
	// Client should ignore in_process response and wait for success or error response.
	SimpleUploadFile(context.Context) *connect.BidiStreamForClient[v1.SimpleUploadFileRequest, v1.SimpleUploadFileResponse]
	// `Binah` `download_token`
	// Server will not check the receiving state
	SimpleDownloadFile(context.Context, *connect.Request[v1.SimpleDownloadFileRequest]) (*connect.ServerStreamForClient[v1.SimpleDownloadFileResponse], error)
	// `Binah` `upload_token`
	// Upload file through http url
	PresignedUploadFile(context.Context, *connect.Request[v1.PresignedUploadFileRequest]) (*connect.Response[v1.PresignedUploadFileResponse], error)
	// `Binah` `upload_token`
	// Report file transfer status. Mainly used to trigger server post-process immediately
	PresignedUploadFileStatus(context.Context, *connect.Request[v1.PresignedUploadFileStatusRequest]) (*connect.Response[v1.PresignedUploadFileStatusResponse], error)
	// `Binah` `download_token`
	// Download file through http url
	PresignedDownloadFile(context.Context, *connect.Request[v1.PresignedDownloadFileRequest]) (*connect.Response[v1.PresignedDownloadFileResponse], error)
	// `Gebura`
	SearchAppInfos(context.Context, *connect.Request[v1.SearchAppInfosRequest]) (*connect.Response[v1.SearchAppInfosResponse], error)
	// `Gebura`
	CreateStoreApp(context.Context, *connect.Request[v1.CreateStoreAppRequest]) (*connect.Response[v1.CreateStoreAppResponse], error)
	// `Gebura`
	UpdateStoreApp(context.Context, *connect.Request[v1.UpdateStoreAppRequest]) (*connect.Response[v1.UpdateStoreAppResponse], error)
	// `Gebura`
	ListStoreApps(context.Context, *connect.Request[v1.ListStoreAppsRequest]) (*connect.Response[v1.ListStoreAppsResponse], error)
	// `Gebura`
	ListStoreAppBinaries(context.Context, *connect.Request[v1.ListStoreAppBinariesRequest]) (*connect.Response[v1.ListStoreAppBinariesResponse], error)
	// `Gebura`
	UpdateStoreAppBinary(context.Context, *connect.Request[v1.UpdateStoreAppBinaryRequest]) (*connect.Response[v1.UpdateStoreAppBinaryResponse], error)
	// `Gebura`
	ListStoreAppBinaryFiles(context.Context, *connect.Request[v1.ListStoreAppBinaryFilesRequest]) (*connect.Response[v1.ListStoreAppBinaryFilesResponse], error)
	// `Gebura`
	CreateStoreAppSaveFile(context.Context, *connect.Request[v1.CreateStoreAppSaveFileRequest]) (*connect.Response[v1.CreateStoreAppSaveFileResponse], error)
	// `Gebura`
	UpdateStoreAppSaveFile(context.Context, *connect.Request[v1.UpdateStoreAppSaveFileRequest]) (*connect.Response[v1.UpdateStoreAppSaveFileResponse], error)
	// `Gebura`
	UploadStoreAppSaveFile(context.Context, *connect.Request[v1.UploadStoreAppSaveFileRequest]) (*connect.Response[v1.UploadStoreAppSaveFileResponse], error)
	// `Gebura`
	ListStoreAppSaveFiles(context.Context, *connect.Request[v1.ListStoreAppSaveFilesRequest]) (*connect.Response[v1.ListStoreAppSaveFilesResponse], error)
	// `Gebura`
	DeleteStoreAppSaveFile(context.Context, *connect.Request[v1.DeleteStoreAppSaveFileRequest]) (*connect.Response[v1.DeleteStoreAppSaveFileResponse], error)
}

// NewLibrarianAngelaServiceClient constructs a client for the
// librarian.sephirah.v1.angela.LibrarianAngelaService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLibrarianAngelaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LibrarianAngelaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	librarianAngelaServiceMethods := v1.File_librarian_sephirah_v1_angela_angela_service_proto.Services().ByName("LibrarianAngelaService").Methods()
	return &librarianAngelaServiceClient{
		getServerInformation: connect.NewClient[v1.GetServerInformationRequest, v1.GetServerInformationResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceGetServerInformationProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("GetServerInformation")),
			connect.WithClientOptions(opts...),
		),
		getServerConfig: connect.NewClient[v1.GetServerConfigRequest, v1.GetServerConfigResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceGetServerConfigProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("GetServerConfig")),
			connect.WithClientOptions(opts...),
		),
		updateServerConfig: connect.NewClient[v1.UpdateServerConfigRequest, v1.UpdateServerConfigResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceUpdateServerConfigProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("UpdateServerConfig")),
			connect.WithClientOptions(opts...),
		),
		getToken: connect.NewClient[v1.GetTokenRequest, v1.GetTokenResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceGetTokenProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("GetToken")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceRefreshTokenProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		createUser: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceCreateUserProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceUpdateUserProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[v1.ListUsersRequest, v1.ListUsersResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceListUsersProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
		listPorters: connect.NewClient[v1.ListPortersRequest, v1.ListPortersResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceListPortersProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("ListPorters")),
			connect.WithClientOptions(opts...),
		),
		updatePorterStatus: connect.NewClient[v1.UpdatePorterStatusRequest, v1.UpdatePorterStatusResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceUpdatePorterStatusProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("UpdatePorterStatus")),
			connect.WithClientOptions(opts...),
		),
		deletePorter: connect.NewClient[v1.DeletePorterRequest, v1.DeletePorterResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceDeletePorterProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("DeletePorter")),
			connect.WithClientOptions(opts...),
		),
		createSentinel: connect.NewClient[v1.CreateSentinelRequest, v1.CreateSentinelResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceCreateSentinelProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("CreateSentinel")),
			connect.WithClientOptions(opts...),
		),
		getSentinelToken: connect.NewClient[v1.GetSentinelTokenRequest, v1.GetSentinelTokenResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceGetSentinelTokenProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("GetSentinelToken")),
			connect.WithClientOptions(opts...),
		),
		updateSentinel: connect.NewClient[v1.UpdateSentinelRequest, v1.UpdateSentinelResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceUpdateSentinelProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("UpdateSentinel")),
			connect.WithClientOptions(opts...),
		),
		listSentinels: connect.NewClient[v1.ListSentinelsRequest, v1.ListSentinelsResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceListSentinelsProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("ListSentinels")),
			connect.WithClientOptions(opts...),
		),
		deleteSentinel: connect.NewClient[v1.DeleteSentinelRequest, v1.DeleteSentinelResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceDeleteSentinelProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("DeleteSentinel")),
			connect.WithClientOptions(opts...),
		),
		listStorageCapacityUsage: connect.NewClient[v1.ListStorageCapacityUsageRequest, v1.ListStorageCapacityUsageResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceListStorageCapacityUsageProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("ListStorageCapacityUsage")),
			connect.WithClientOptions(opts...),
		),
		simpleUploadFile: connect.NewClient[v1.SimpleUploadFileRequest, v1.SimpleUploadFileResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceSimpleUploadFileProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("SimpleUploadFile")),
			connect.WithClientOptions(opts...),
		),
		simpleDownloadFile: connect.NewClient[v1.SimpleDownloadFileRequest, v1.SimpleDownloadFileResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceSimpleDownloadFileProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("SimpleDownloadFile")),
			connect.WithClientOptions(opts...),
		),
		presignedUploadFile: connect.NewClient[v1.PresignedUploadFileRequest, v1.PresignedUploadFileResponse](
			httpClient,
			baseURL+LibrarianAngelaServicePresignedUploadFileProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("PresignedUploadFile")),
			connect.WithClientOptions(opts...),
		),
		presignedUploadFileStatus: connect.NewClient[v1.PresignedUploadFileStatusRequest, v1.PresignedUploadFileStatusResponse](
			httpClient,
			baseURL+LibrarianAngelaServicePresignedUploadFileStatusProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("PresignedUploadFileStatus")),
			connect.WithClientOptions(opts...),
		),
		presignedDownloadFile: connect.NewClient[v1.PresignedDownloadFileRequest, v1.PresignedDownloadFileResponse](
			httpClient,
			baseURL+LibrarianAngelaServicePresignedDownloadFileProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("PresignedDownloadFile")),
			connect.WithClientOptions(opts...),
		),
		searchAppInfos: connect.NewClient[v1.SearchAppInfosRequest, v1.SearchAppInfosResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceSearchAppInfosProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("SearchAppInfos")),
			connect.WithClientOptions(opts...),
		),
		createStoreApp: connect.NewClient[v1.CreateStoreAppRequest, v1.CreateStoreAppResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceCreateStoreAppProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("CreateStoreApp")),
			connect.WithClientOptions(opts...),
		),
		updateStoreApp: connect.NewClient[v1.UpdateStoreAppRequest, v1.UpdateStoreAppResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceUpdateStoreAppProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("UpdateStoreApp")),
			connect.WithClientOptions(opts...),
		),
		listStoreApps: connect.NewClient[v1.ListStoreAppsRequest, v1.ListStoreAppsResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceListStoreAppsProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("ListStoreApps")),
			connect.WithClientOptions(opts...),
		),
		listStoreAppBinaries: connect.NewClient[v1.ListStoreAppBinariesRequest, v1.ListStoreAppBinariesResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceListStoreAppBinariesProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("ListStoreAppBinaries")),
			connect.WithClientOptions(opts...),
		),
		updateStoreAppBinary: connect.NewClient[v1.UpdateStoreAppBinaryRequest, v1.UpdateStoreAppBinaryResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceUpdateStoreAppBinaryProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("UpdateStoreAppBinary")),
			connect.WithClientOptions(opts...),
		),
		listStoreAppBinaryFiles: connect.NewClient[v1.ListStoreAppBinaryFilesRequest, v1.ListStoreAppBinaryFilesResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceListStoreAppBinaryFilesProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("ListStoreAppBinaryFiles")),
			connect.WithClientOptions(opts...),
		),
		createStoreAppSaveFile: connect.NewClient[v1.CreateStoreAppSaveFileRequest, v1.CreateStoreAppSaveFileResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceCreateStoreAppSaveFileProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("CreateStoreAppSaveFile")),
			connect.WithClientOptions(opts...),
		),
		updateStoreAppSaveFile: connect.NewClient[v1.UpdateStoreAppSaveFileRequest, v1.UpdateStoreAppSaveFileResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceUpdateStoreAppSaveFileProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("UpdateStoreAppSaveFile")),
			connect.WithClientOptions(opts...),
		),
		uploadStoreAppSaveFile: connect.NewClient[v1.UploadStoreAppSaveFileRequest, v1.UploadStoreAppSaveFileResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceUploadStoreAppSaveFileProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("UploadStoreAppSaveFile")),
			connect.WithClientOptions(opts...),
		),
		listStoreAppSaveFiles: connect.NewClient[v1.ListStoreAppSaveFilesRequest, v1.ListStoreAppSaveFilesResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceListStoreAppSaveFilesProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("ListStoreAppSaveFiles")),
			connect.WithClientOptions(opts...),
		),
		deleteStoreAppSaveFile: connect.NewClient[v1.DeleteStoreAppSaveFileRequest, v1.DeleteStoreAppSaveFileResponse](
			httpClient,
			baseURL+LibrarianAngelaServiceDeleteStoreAppSaveFileProcedure,
			connect.WithSchema(librarianAngelaServiceMethods.ByName("DeleteStoreAppSaveFile")),
			connect.WithClientOptions(opts...),
		),
	}
}

// librarianAngelaServiceClient implements LibrarianAngelaServiceClient.
type librarianAngelaServiceClient struct {
	getServerInformation      *connect.Client[v1.GetServerInformationRequest, v1.GetServerInformationResponse]
	getServerConfig           *connect.Client[v1.GetServerConfigRequest, v1.GetServerConfigResponse]
	updateServerConfig        *connect.Client[v1.UpdateServerConfigRequest, v1.UpdateServerConfigResponse]
	getToken                  *connect.Client[v1.GetTokenRequest, v1.GetTokenResponse]
	refreshToken              *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
	createUser                *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	updateUser                *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	listUsers                 *connect.Client[v1.ListUsersRequest, v1.ListUsersResponse]
	listPorters               *connect.Client[v1.ListPortersRequest, v1.ListPortersResponse]
	updatePorterStatus        *connect.Client[v1.UpdatePorterStatusRequest, v1.UpdatePorterStatusResponse]
	deletePorter              *connect.Client[v1.DeletePorterRequest, v1.DeletePorterResponse]
	createSentinel            *connect.Client[v1.CreateSentinelRequest, v1.CreateSentinelResponse]
	getSentinelToken          *connect.Client[v1.GetSentinelTokenRequest, v1.GetSentinelTokenResponse]
	updateSentinel            *connect.Client[v1.UpdateSentinelRequest, v1.UpdateSentinelResponse]
	listSentinels             *connect.Client[v1.ListSentinelsRequest, v1.ListSentinelsResponse]
	deleteSentinel            *connect.Client[v1.DeleteSentinelRequest, v1.DeleteSentinelResponse]
	listStorageCapacityUsage  *connect.Client[v1.ListStorageCapacityUsageRequest, v1.ListStorageCapacityUsageResponse]
	simpleUploadFile          *connect.Client[v1.SimpleUploadFileRequest, v1.SimpleUploadFileResponse]
	simpleDownloadFile        *connect.Client[v1.SimpleDownloadFileRequest, v1.SimpleDownloadFileResponse]
	presignedUploadFile       *connect.Client[v1.PresignedUploadFileRequest, v1.PresignedUploadFileResponse]
	presignedUploadFileStatus *connect.Client[v1.PresignedUploadFileStatusRequest, v1.PresignedUploadFileStatusResponse]
	presignedDownloadFile     *connect.Client[v1.PresignedDownloadFileRequest, v1.PresignedDownloadFileResponse]
	searchAppInfos            *connect.Client[v1.SearchAppInfosRequest, v1.SearchAppInfosResponse]
	createStoreApp            *connect.Client[v1.CreateStoreAppRequest, v1.CreateStoreAppResponse]
	updateStoreApp            *connect.Client[v1.UpdateStoreAppRequest, v1.UpdateStoreAppResponse]
	listStoreApps             *connect.Client[v1.ListStoreAppsRequest, v1.ListStoreAppsResponse]
	listStoreAppBinaries      *connect.Client[v1.ListStoreAppBinariesRequest, v1.ListStoreAppBinariesResponse]
	updateStoreAppBinary      *connect.Client[v1.UpdateStoreAppBinaryRequest, v1.UpdateStoreAppBinaryResponse]
	listStoreAppBinaryFiles   *connect.Client[v1.ListStoreAppBinaryFilesRequest, v1.ListStoreAppBinaryFilesResponse]
	createStoreAppSaveFile    *connect.Client[v1.CreateStoreAppSaveFileRequest, v1.CreateStoreAppSaveFileResponse]
	updateStoreAppSaveFile    *connect.Client[v1.UpdateStoreAppSaveFileRequest, v1.UpdateStoreAppSaveFileResponse]
	uploadStoreAppSaveFile    *connect.Client[v1.UploadStoreAppSaveFileRequest, v1.UploadStoreAppSaveFileResponse]
	listStoreAppSaveFiles     *connect.Client[v1.ListStoreAppSaveFilesRequest, v1.ListStoreAppSaveFilesResponse]
	deleteStoreAppSaveFile    *connect.Client[v1.DeleteStoreAppSaveFileRequest, v1.DeleteStoreAppSaveFileResponse]
}

// GetServerInformation calls
// librarian.sephirah.v1.angela.LibrarianAngelaService.GetServerInformation.
func (c *librarianAngelaServiceClient) GetServerInformation(ctx context.Context, req *connect.Request[v1.GetServerInformationRequest]) (*connect.Response[v1.GetServerInformationResponse], error) {
	return c.getServerInformation.CallUnary(ctx, req)
}

// GetServerConfig calls librarian.sephirah.v1.angela.LibrarianAngelaService.GetServerConfig.
func (c *librarianAngelaServiceClient) GetServerConfig(ctx context.Context, req *connect.Request[v1.GetServerConfigRequest]) (*connect.Response[v1.GetServerConfigResponse], error) {
	return c.getServerConfig.CallUnary(ctx, req)
}

// UpdateServerConfig calls librarian.sephirah.v1.angela.LibrarianAngelaService.UpdateServerConfig.
func (c *librarianAngelaServiceClient) UpdateServerConfig(ctx context.Context, req *connect.Request[v1.UpdateServerConfigRequest]) (*connect.Response[v1.UpdateServerConfigResponse], error) {
	return c.updateServerConfig.CallUnary(ctx, req)
}

// GetToken calls librarian.sephirah.v1.angela.LibrarianAngelaService.GetToken.
func (c *librarianAngelaServiceClient) GetToken(ctx context.Context, req *connect.Request[v1.GetTokenRequest]) (*connect.Response[v1.GetTokenResponse], error) {
	return c.getToken.CallUnary(ctx, req)
}

// RefreshToken calls librarian.sephirah.v1.angela.LibrarianAngelaService.RefreshToken.
func (c *librarianAngelaServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// CreateUser calls librarian.sephirah.v1.angela.LibrarianAngelaService.CreateUser.
func (c *librarianAngelaServiceClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// UpdateUser calls librarian.sephirah.v1.angela.LibrarianAngelaService.UpdateUser.
func (c *librarianAngelaServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// ListUsers calls librarian.sephirah.v1.angela.LibrarianAngelaService.ListUsers.
func (c *librarianAngelaServiceClient) ListUsers(ctx context.Context, req *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// ListPorters calls librarian.sephirah.v1.angela.LibrarianAngelaService.ListPorters.
func (c *librarianAngelaServiceClient) ListPorters(ctx context.Context, req *connect.Request[v1.ListPortersRequest]) (*connect.Response[v1.ListPortersResponse], error) {
	return c.listPorters.CallUnary(ctx, req)
}

// UpdatePorterStatus calls librarian.sephirah.v1.angela.LibrarianAngelaService.UpdatePorterStatus.
func (c *librarianAngelaServiceClient) UpdatePorterStatus(ctx context.Context, req *connect.Request[v1.UpdatePorterStatusRequest]) (*connect.Response[v1.UpdatePorterStatusResponse], error) {
	return c.updatePorterStatus.CallUnary(ctx, req)
}

// DeletePorter calls librarian.sephirah.v1.angela.LibrarianAngelaService.DeletePorter.
func (c *librarianAngelaServiceClient) DeletePorter(ctx context.Context, req *connect.Request[v1.DeletePorterRequest]) (*connect.Response[v1.DeletePorterResponse], error) {
	return c.deletePorter.CallUnary(ctx, req)
}

// CreateSentinel calls librarian.sephirah.v1.angela.LibrarianAngelaService.CreateSentinel.
func (c *librarianAngelaServiceClient) CreateSentinel(ctx context.Context, req *connect.Request[v1.CreateSentinelRequest]) (*connect.Response[v1.CreateSentinelResponse], error) {
	return c.createSentinel.CallUnary(ctx, req)
}

// GetSentinelToken calls librarian.sephirah.v1.angela.LibrarianAngelaService.GetSentinelToken.
func (c *librarianAngelaServiceClient) GetSentinelToken(ctx context.Context, req *connect.Request[v1.GetSentinelTokenRequest]) (*connect.Response[v1.GetSentinelTokenResponse], error) {
	return c.getSentinelToken.CallUnary(ctx, req)
}

// UpdateSentinel calls librarian.sephirah.v1.angela.LibrarianAngelaService.UpdateSentinel.
func (c *librarianAngelaServiceClient) UpdateSentinel(ctx context.Context, req *connect.Request[v1.UpdateSentinelRequest]) (*connect.Response[v1.UpdateSentinelResponse], error) {
	return c.updateSentinel.CallUnary(ctx, req)
}

// ListSentinels calls librarian.sephirah.v1.angela.LibrarianAngelaService.ListSentinels.
func (c *librarianAngelaServiceClient) ListSentinels(ctx context.Context, req *connect.Request[v1.ListSentinelsRequest]) (*connect.Response[v1.ListSentinelsResponse], error) {
	return c.listSentinels.CallUnary(ctx, req)
}

// DeleteSentinel calls librarian.sephirah.v1.angela.LibrarianAngelaService.DeleteSentinel.
func (c *librarianAngelaServiceClient) DeleteSentinel(ctx context.Context, req *connect.Request[v1.DeleteSentinelRequest]) (*connect.Response[v1.DeleteSentinelResponse], error) {
	return c.deleteSentinel.CallUnary(ctx, req)
}

// ListStorageCapacityUsage calls
// librarian.sephirah.v1.angela.LibrarianAngelaService.ListStorageCapacityUsage.
func (c *librarianAngelaServiceClient) ListStorageCapacityUsage(ctx context.Context, req *connect.Request[v1.ListStorageCapacityUsageRequest]) (*connect.Response[v1.ListStorageCapacityUsageResponse], error) {
	return c.listStorageCapacityUsage.CallUnary(ctx, req)
}

// SimpleUploadFile calls librarian.sephirah.v1.angela.LibrarianAngelaService.SimpleUploadFile.
func (c *librarianAngelaServiceClient) SimpleUploadFile(ctx context.Context) *connect.BidiStreamForClient[v1.SimpleUploadFileRequest, v1.SimpleUploadFileResponse] {
	return c.simpleUploadFile.CallBidiStream(ctx)
}

// SimpleDownloadFile calls librarian.sephirah.v1.angela.LibrarianAngelaService.SimpleDownloadFile.
func (c *librarianAngelaServiceClient) SimpleDownloadFile(ctx context.Context, req *connect.Request[v1.SimpleDownloadFileRequest]) (*connect.ServerStreamForClient[v1.SimpleDownloadFileResponse], error) {
	return c.simpleDownloadFile.CallServerStream(ctx, req)
}

// PresignedUploadFile calls
// librarian.sephirah.v1.angela.LibrarianAngelaService.PresignedUploadFile.
func (c *librarianAngelaServiceClient) PresignedUploadFile(ctx context.Context, req *connect.Request[v1.PresignedUploadFileRequest]) (*connect.Response[v1.PresignedUploadFileResponse], error) {
	return c.presignedUploadFile.CallUnary(ctx, req)
}

// PresignedUploadFileStatus calls
// librarian.sephirah.v1.angela.LibrarianAngelaService.PresignedUploadFileStatus.
func (c *librarianAngelaServiceClient) PresignedUploadFileStatus(ctx context.Context, req *connect.Request[v1.PresignedUploadFileStatusRequest]) (*connect.Response[v1.PresignedUploadFileStatusResponse], error) {
	return c.presignedUploadFileStatus.CallUnary(ctx, req)
}

// PresignedDownloadFile calls
// librarian.sephirah.v1.angela.LibrarianAngelaService.PresignedDownloadFile.
func (c *librarianAngelaServiceClient) PresignedDownloadFile(ctx context.Context, req *connect.Request[v1.PresignedDownloadFileRequest]) (*connect.Response[v1.PresignedDownloadFileResponse], error) {
	return c.presignedDownloadFile.CallUnary(ctx, req)
}

// SearchAppInfos calls librarian.sephirah.v1.angela.LibrarianAngelaService.SearchAppInfos.
func (c *librarianAngelaServiceClient) SearchAppInfos(ctx context.Context, req *connect.Request[v1.SearchAppInfosRequest]) (*connect.Response[v1.SearchAppInfosResponse], error) {
	return c.searchAppInfos.CallUnary(ctx, req)
}

// CreateStoreApp calls librarian.sephirah.v1.angela.LibrarianAngelaService.CreateStoreApp.
func (c *librarianAngelaServiceClient) CreateStoreApp(ctx context.Context, req *connect.Request[v1.CreateStoreAppRequest]) (*connect.Response[v1.CreateStoreAppResponse], error) {
	return c.createStoreApp.CallUnary(ctx, req)
}

// UpdateStoreApp calls librarian.sephirah.v1.angela.LibrarianAngelaService.UpdateStoreApp.
func (c *librarianAngelaServiceClient) UpdateStoreApp(ctx context.Context, req *connect.Request[v1.UpdateStoreAppRequest]) (*connect.Response[v1.UpdateStoreAppResponse], error) {
	return c.updateStoreApp.CallUnary(ctx, req)
}

// ListStoreApps calls librarian.sephirah.v1.angela.LibrarianAngelaService.ListStoreApps.
func (c *librarianAngelaServiceClient) ListStoreApps(ctx context.Context, req *connect.Request[v1.ListStoreAppsRequest]) (*connect.Response[v1.ListStoreAppsResponse], error) {
	return c.listStoreApps.CallUnary(ctx, req)
}

// ListStoreAppBinaries calls
// librarian.sephirah.v1.angela.LibrarianAngelaService.ListStoreAppBinaries.
func (c *librarianAngelaServiceClient) ListStoreAppBinaries(ctx context.Context, req *connect.Request[v1.ListStoreAppBinariesRequest]) (*connect.Response[v1.ListStoreAppBinariesResponse], error) {
	return c.listStoreAppBinaries.CallUnary(ctx, req)
}

// UpdateStoreAppBinary calls
// librarian.sephirah.v1.angela.LibrarianAngelaService.UpdateStoreAppBinary.
func (c *librarianAngelaServiceClient) UpdateStoreAppBinary(ctx context.Context, req *connect.Request[v1.UpdateStoreAppBinaryRequest]) (*connect.Response[v1.UpdateStoreAppBinaryResponse], error) {
	return c.updateStoreAppBinary.CallUnary(ctx, req)
}

// ListStoreAppBinaryFiles calls
// librarian.sephirah.v1.angela.LibrarianAngelaService.ListStoreAppBinaryFiles.
func (c *librarianAngelaServiceClient) ListStoreAppBinaryFiles(ctx context.Context, req *connect.Request[v1.ListStoreAppBinaryFilesRequest]) (*connect.Response[v1.ListStoreAppBinaryFilesResponse], error) {
	return c.listStoreAppBinaryFiles.CallUnary(ctx, req)
}

// CreateStoreAppSaveFile calls
// librarian.sephirah.v1.angela.LibrarianAngelaService.CreateStoreAppSaveFile.
func (c *librarianAngelaServiceClient) CreateStoreAppSaveFile(ctx context.Context, req *connect.Request[v1.CreateStoreAppSaveFileRequest]) (*connect.Response[v1.CreateStoreAppSaveFileResponse], error) {
	return c.createStoreAppSaveFile.CallUnary(ctx, req)
}

// UpdateStoreAppSaveFile calls
// librarian.sephirah.v1.angela.LibrarianAngelaService.UpdateStoreAppSaveFile.
func (c *librarianAngelaServiceClient) UpdateStoreAppSaveFile(ctx context.Context, req *connect.Request[v1.UpdateStoreAppSaveFileRequest]) (*connect.Response[v1.UpdateStoreAppSaveFileResponse], error) {
	return c.updateStoreAppSaveFile.CallUnary(ctx, req)
}

// UploadStoreAppSaveFile calls
// librarian.sephirah.v1.angela.LibrarianAngelaService.UploadStoreAppSaveFile.
func (c *librarianAngelaServiceClient) UploadStoreAppSaveFile(ctx context.Context, req *connect.Request[v1.UploadStoreAppSaveFileRequest]) (*connect.Response[v1.UploadStoreAppSaveFileResponse], error) {
	return c.uploadStoreAppSaveFile.CallUnary(ctx, req)
}

// ListStoreAppSaveFiles calls
// librarian.sephirah.v1.angela.LibrarianAngelaService.ListStoreAppSaveFiles.
func (c *librarianAngelaServiceClient) ListStoreAppSaveFiles(ctx context.Context, req *connect.Request[v1.ListStoreAppSaveFilesRequest]) (*connect.Response[v1.ListStoreAppSaveFilesResponse], error) {
	return c.listStoreAppSaveFiles.CallUnary(ctx, req)
}

// DeleteStoreAppSaveFile calls
// librarian.sephirah.v1.angela.LibrarianAngelaService.DeleteStoreAppSaveFile.
func (c *librarianAngelaServiceClient) DeleteStoreAppSaveFile(ctx context.Context, req *connect.Request[v1.DeleteStoreAppSaveFileRequest]) (*connect.Response[v1.DeleteStoreAppSaveFileResponse], error) {
	return c.deleteStoreAppSaveFile.CallUnary(ctx, req)
}

// LibrarianAngelaServiceHandler is an implementation of the
// librarian.sephirah.v1.angela.LibrarianAngelaService service.
type LibrarianAngelaServiceHandler interface {
	// Allow anonymous call, use accessToken to get complete information
	GetServerInformation(context.Context, *connect.Request[v1.GetServerInformationRequest]) (*connect.Response[v1.GetServerInformationResponse], error)
	GetServerConfig(context.Context, *connect.Request[v1.GetServerConfigRequest]) (*connect.Response[v1.GetServerConfigResponse], error)
	UpdateServerConfig(context.Context, *connect.Request[v1.UpdateServerConfigRequest]) (*connect.Response[v1.UpdateServerConfigResponse], error)
	// `Tiphereth` Login via password and get two token
	GetToken(context.Context, *connect.Request[v1.GetTokenRequest]) (*connect.Response[v1.GetTokenResponse], error)
	// `Tiphereth` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	// `Tiphereth`
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	// `Tiphereth`
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// `Tiphereth`
	ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error)
	// `Tiphereth`
	ListPorters(context.Context, *connect.Request[v1.ListPortersRequest]) (*connect.Response[v1.ListPortersResponse], error)
	// `Tiphereth`
	UpdatePorterStatus(context.Context, *connect.Request[v1.UpdatePorterStatusRequest]) (*connect.Response[v1.UpdatePorterStatusResponse], error)
	// `Tiphereth` Delete porter, only when porter is disabled
	DeletePorter(context.Context, *connect.Request[v1.DeletePorterRequest]) (*connect.Response[v1.DeletePorterResponse], error)
	// `Tiphereth`
	CreateSentinel(context.Context, *connect.Request[v1.CreateSentinelRequest]) (*connect.Response[v1.CreateSentinelResponse], error)
	// `Tiphereth`
	GetSentinelToken(context.Context, *connect.Request[v1.GetSentinelTokenRequest]) (*connect.Response[v1.GetSentinelTokenResponse], error)
	// `Tiphereth`
	UpdateSentinel(context.Context, *connect.Request[v1.UpdateSentinelRequest]) (*connect.Response[v1.UpdateSentinelResponse], error)
	// `Tiphereth`
	ListSentinels(context.Context, *connect.Request[v1.ListSentinelsRequest]) (*connect.Response[v1.ListSentinelsResponse], error)
	// `Tiphereth`
	DeleteSentinel(context.Context, *connect.Request[v1.DeleteSentinelRequest]) (*connect.Response[v1.DeleteSentinelResponse], error)
	// `Binah`
	ListStorageCapacityUsage(context.Context, *connect.Request[v1.ListStorageCapacityUsageRequest]) (*connect.Response[v1.ListStorageCapacityUsageResponse], error)
	// `Binah` `upload_token`
	// Maximum 256M
	// Server must send response at least once a minute to keepalive.
	// Client should ignore in_process response and wait for success or error response.
	SimpleUploadFile(context.Context, *connect.BidiStream[v1.SimpleUploadFileRequest, v1.SimpleUploadFileResponse]) error
	// `Binah` `download_token`
	// Server will not check the receiving state
	SimpleDownloadFile(context.Context, *connect.Request[v1.SimpleDownloadFileRequest], *connect.ServerStream[v1.SimpleDownloadFileResponse]) error
	// `Binah` `upload_token`
	// Upload file through http url
	PresignedUploadFile(context.Context, *connect.Request[v1.PresignedUploadFileRequest]) (*connect.Response[v1.PresignedUploadFileResponse], error)
	// `Binah` `upload_token`
	// Report file transfer status. Mainly used to trigger server post-process immediately
	PresignedUploadFileStatus(context.Context, *connect.Request[v1.PresignedUploadFileStatusRequest]) (*connect.Response[v1.PresignedUploadFileStatusResponse], error)
	// `Binah` `download_token`
	// Download file through http url
	PresignedDownloadFile(context.Context, *connect.Request[v1.PresignedDownloadFileRequest]) (*connect.Response[v1.PresignedDownloadFileResponse], error)
	// `Gebura`
	SearchAppInfos(context.Context, *connect.Request[v1.SearchAppInfosRequest]) (*connect.Response[v1.SearchAppInfosResponse], error)
	// `Gebura`
	CreateStoreApp(context.Context, *connect.Request[v1.CreateStoreAppRequest]) (*connect.Response[v1.CreateStoreAppResponse], error)
	// `Gebura`
	UpdateStoreApp(context.Context, *connect.Request[v1.UpdateStoreAppRequest]) (*connect.Response[v1.UpdateStoreAppResponse], error)
	// `Gebura`
	ListStoreApps(context.Context, *connect.Request[v1.ListStoreAppsRequest]) (*connect.Response[v1.ListStoreAppsResponse], error)
	// `Gebura`
	ListStoreAppBinaries(context.Context, *connect.Request[v1.ListStoreAppBinariesRequest]) (*connect.Response[v1.ListStoreAppBinariesResponse], error)
	// `Gebura`
	UpdateStoreAppBinary(context.Context, *connect.Request[v1.UpdateStoreAppBinaryRequest]) (*connect.Response[v1.UpdateStoreAppBinaryResponse], error)
	// `Gebura`
	ListStoreAppBinaryFiles(context.Context, *connect.Request[v1.ListStoreAppBinaryFilesRequest]) (*connect.Response[v1.ListStoreAppBinaryFilesResponse], error)
	// `Gebura`
	CreateStoreAppSaveFile(context.Context, *connect.Request[v1.CreateStoreAppSaveFileRequest]) (*connect.Response[v1.CreateStoreAppSaveFileResponse], error)
	// `Gebura`
	UpdateStoreAppSaveFile(context.Context, *connect.Request[v1.UpdateStoreAppSaveFileRequest]) (*connect.Response[v1.UpdateStoreAppSaveFileResponse], error)
	// `Gebura`
	UploadStoreAppSaveFile(context.Context, *connect.Request[v1.UploadStoreAppSaveFileRequest]) (*connect.Response[v1.UploadStoreAppSaveFileResponse], error)
	// `Gebura`
	ListStoreAppSaveFiles(context.Context, *connect.Request[v1.ListStoreAppSaveFilesRequest]) (*connect.Response[v1.ListStoreAppSaveFilesResponse], error)
	// `Gebura`
	DeleteStoreAppSaveFile(context.Context, *connect.Request[v1.DeleteStoreAppSaveFileRequest]) (*connect.Response[v1.DeleteStoreAppSaveFileResponse], error)
}

// NewLibrarianAngelaServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLibrarianAngelaServiceHandler(svc LibrarianAngelaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	librarianAngelaServiceMethods := v1.File_librarian_sephirah_v1_angela_angela_service_proto.Services().ByName("LibrarianAngelaService").Methods()
	librarianAngelaServiceGetServerInformationHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceGetServerInformationProcedure,
		svc.GetServerInformation,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("GetServerInformation")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceGetServerConfigHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceGetServerConfigProcedure,
		svc.GetServerConfig,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("GetServerConfig")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceUpdateServerConfigHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceUpdateServerConfigProcedure,
		svc.UpdateServerConfig,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("UpdateServerConfig")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceGetTokenHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceGetTokenProcedure,
		svc.GetToken,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("GetToken")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceRefreshTokenHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceCreateUserHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceUpdateUserHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceListUsersHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceListPortersHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceListPortersProcedure,
		svc.ListPorters,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("ListPorters")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceUpdatePorterStatusHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceUpdatePorterStatusProcedure,
		svc.UpdatePorterStatus,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("UpdatePorterStatus")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceDeletePorterHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceDeletePorterProcedure,
		svc.DeletePorter,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("DeletePorter")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceCreateSentinelHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceCreateSentinelProcedure,
		svc.CreateSentinel,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("CreateSentinel")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceGetSentinelTokenHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceGetSentinelTokenProcedure,
		svc.GetSentinelToken,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("GetSentinelToken")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceUpdateSentinelHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceUpdateSentinelProcedure,
		svc.UpdateSentinel,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("UpdateSentinel")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceListSentinelsHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceListSentinelsProcedure,
		svc.ListSentinels,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("ListSentinels")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceDeleteSentinelHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceDeleteSentinelProcedure,
		svc.DeleteSentinel,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("DeleteSentinel")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceListStorageCapacityUsageHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceListStorageCapacityUsageProcedure,
		svc.ListStorageCapacityUsage,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("ListStorageCapacityUsage")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceSimpleUploadFileHandler := connect.NewBidiStreamHandler(
		LibrarianAngelaServiceSimpleUploadFileProcedure,
		svc.SimpleUploadFile,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("SimpleUploadFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceSimpleDownloadFileHandler := connect.NewServerStreamHandler(
		LibrarianAngelaServiceSimpleDownloadFileProcedure,
		svc.SimpleDownloadFile,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("SimpleDownloadFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServicePresignedUploadFileHandler := connect.NewUnaryHandler(
		LibrarianAngelaServicePresignedUploadFileProcedure,
		svc.PresignedUploadFile,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("PresignedUploadFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServicePresignedUploadFileStatusHandler := connect.NewUnaryHandler(
		LibrarianAngelaServicePresignedUploadFileStatusProcedure,
		svc.PresignedUploadFileStatus,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("PresignedUploadFileStatus")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServicePresignedDownloadFileHandler := connect.NewUnaryHandler(
		LibrarianAngelaServicePresignedDownloadFileProcedure,
		svc.PresignedDownloadFile,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("PresignedDownloadFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceSearchAppInfosHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceSearchAppInfosProcedure,
		svc.SearchAppInfos,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("SearchAppInfos")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceCreateStoreAppHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceCreateStoreAppProcedure,
		svc.CreateStoreApp,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("CreateStoreApp")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceUpdateStoreAppHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceUpdateStoreAppProcedure,
		svc.UpdateStoreApp,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("UpdateStoreApp")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceListStoreAppsHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceListStoreAppsProcedure,
		svc.ListStoreApps,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("ListStoreApps")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceListStoreAppBinariesHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceListStoreAppBinariesProcedure,
		svc.ListStoreAppBinaries,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("ListStoreAppBinaries")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceUpdateStoreAppBinaryHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceUpdateStoreAppBinaryProcedure,
		svc.UpdateStoreAppBinary,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("UpdateStoreAppBinary")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceListStoreAppBinaryFilesHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceListStoreAppBinaryFilesProcedure,
		svc.ListStoreAppBinaryFiles,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("ListStoreAppBinaryFiles")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceCreateStoreAppSaveFileHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceCreateStoreAppSaveFileProcedure,
		svc.CreateStoreAppSaveFile,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("CreateStoreAppSaveFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceUpdateStoreAppSaveFileHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceUpdateStoreAppSaveFileProcedure,
		svc.UpdateStoreAppSaveFile,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("UpdateStoreAppSaveFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceUploadStoreAppSaveFileHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceUploadStoreAppSaveFileProcedure,
		svc.UploadStoreAppSaveFile,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("UploadStoreAppSaveFile")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceListStoreAppSaveFilesHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceListStoreAppSaveFilesProcedure,
		svc.ListStoreAppSaveFiles,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("ListStoreAppSaveFiles")),
		connect.WithHandlerOptions(opts...),
	)
	librarianAngelaServiceDeleteStoreAppSaveFileHandler := connect.NewUnaryHandler(
		LibrarianAngelaServiceDeleteStoreAppSaveFileProcedure,
		svc.DeleteStoreAppSaveFile,
		connect.WithSchema(librarianAngelaServiceMethods.ByName("DeleteStoreAppSaveFile")),
		connect.WithHandlerOptions(opts...),
	)
	return "/librarian.sephirah.v1.angela.LibrarianAngelaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LibrarianAngelaServiceGetServerInformationProcedure:
			librarianAngelaServiceGetServerInformationHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceGetServerConfigProcedure:
			librarianAngelaServiceGetServerConfigHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceUpdateServerConfigProcedure:
			librarianAngelaServiceUpdateServerConfigHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceGetTokenProcedure:
			librarianAngelaServiceGetTokenHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceRefreshTokenProcedure:
			librarianAngelaServiceRefreshTokenHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceCreateUserProcedure:
			librarianAngelaServiceCreateUserHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceUpdateUserProcedure:
			librarianAngelaServiceUpdateUserHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceListUsersProcedure:
			librarianAngelaServiceListUsersHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceListPortersProcedure:
			librarianAngelaServiceListPortersHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceUpdatePorterStatusProcedure:
			librarianAngelaServiceUpdatePorterStatusHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceDeletePorterProcedure:
			librarianAngelaServiceDeletePorterHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceCreateSentinelProcedure:
			librarianAngelaServiceCreateSentinelHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceGetSentinelTokenProcedure:
			librarianAngelaServiceGetSentinelTokenHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceUpdateSentinelProcedure:
			librarianAngelaServiceUpdateSentinelHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceListSentinelsProcedure:
			librarianAngelaServiceListSentinelsHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceDeleteSentinelProcedure:
			librarianAngelaServiceDeleteSentinelHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceListStorageCapacityUsageProcedure:
			librarianAngelaServiceListStorageCapacityUsageHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceSimpleUploadFileProcedure:
			librarianAngelaServiceSimpleUploadFileHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceSimpleDownloadFileProcedure:
			librarianAngelaServiceSimpleDownloadFileHandler.ServeHTTP(w, r)
		case LibrarianAngelaServicePresignedUploadFileProcedure:
			librarianAngelaServicePresignedUploadFileHandler.ServeHTTP(w, r)
		case LibrarianAngelaServicePresignedUploadFileStatusProcedure:
			librarianAngelaServicePresignedUploadFileStatusHandler.ServeHTTP(w, r)
		case LibrarianAngelaServicePresignedDownloadFileProcedure:
			librarianAngelaServicePresignedDownloadFileHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceSearchAppInfosProcedure:
			librarianAngelaServiceSearchAppInfosHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceCreateStoreAppProcedure:
			librarianAngelaServiceCreateStoreAppHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceUpdateStoreAppProcedure:
			librarianAngelaServiceUpdateStoreAppHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceListStoreAppsProcedure:
			librarianAngelaServiceListStoreAppsHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceListStoreAppBinariesProcedure:
			librarianAngelaServiceListStoreAppBinariesHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceUpdateStoreAppBinaryProcedure:
			librarianAngelaServiceUpdateStoreAppBinaryHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceListStoreAppBinaryFilesProcedure:
			librarianAngelaServiceListStoreAppBinaryFilesHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceCreateStoreAppSaveFileProcedure:
			librarianAngelaServiceCreateStoreAppSaveFileHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceUpdateStoreAppSaveFileProcedure:
			librarianAngelaServiceUpdateStoreAppSaveFileHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceUploadStoreAppSaveFileProcedure:
			librarianAngelaServiceUploadStoreAppSaveFileHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceListStoreAppSaveFilesProcedure:
			librarianAngelaServiceListStoreAppSaveFilesHandler.ServeHTTP(w, r)
		case LibrarianAngelaServiceDeleteStoreAppSaveFileProcedure:
			librarianAngelaServiceDeleteStoreAppSaveFileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLibrarianAngelaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLibrarianAngelaServiceHandler struct{}

func (UnimplementedLibrarianAngelaServiceHandler) GetServerInformation(context.Context, *connect.Request[v1.GetServerInformationRequest]) (*connect.Response[v1.GetServerInformationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.GetServerInformation is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) GetServerConfig(context.Context, *connect.Request[v1.GetServerConfigRequest]) (*connect.Response[v1.GetServerConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.GetServerConfig is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) UpdateServerConfig(context.Context, *connect.Request[v1.UpdateServerConfigRequest]) (*connect.Response[v1.UpdateServerConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.UpdateServerConfig is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) GetToken(context.Context, *connect.Request[v1.GetTokenRequest]) (*connect.Response[v1.GetTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.GetToken is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.RefreshToken is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.CreateUser is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.UpdateUser is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) ListUsers(context.Context, *connect.Request[v1.ListUsersRequest]) (*connect.Response[v1.ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.ListUsers is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) ListPorters(context.Context, *connect.Request[v1.ListPortersRequest]) (*connect.Response[v1.ListPortersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.ListPorters is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) UpdatePorterStatus(context.Context, *connect.Request[v1.UpdatePorterStatusRequest]) (*connect.Response[v1.UpdatePorterStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.UpdatePorterStatus is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) DeletePorter(context.Context, *connect.Request[v1.DeletePorterRequest]) (*connect.Response[v1.DeletePorterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.DeletePorter is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) CreateSentinel(context.Context, *connect.Request[v1.CreateSentinelRequest]) (*connect.Response[v1.CreateSentinelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.CreateSentinel is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) GetSentinelToken(context.Context, *connect.Request[v1.GetSentinelTokenRequest]) (*connect.Response[v1.GetSentinelTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.GetSentinelToken is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) UpdateSentinel(context.Context, *connect.Request[v1.UpdateSentinelRequest]) (*connect.Response[v1.UpdateSentinelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.UpdateSentinel is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) ListSentinels(context.Context, *connect.Request[v1.ListSentinelsRequest]) (*connect.Response[v1.ListSentinelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.ListSentinels is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) DeleteSentinel(context.Context, *connect.Request[v1.DeleteSentinelRequest]) (*connect.Response[v1.DeleteSentinelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.DeleteSentinel is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) ListStorageCapacityUsage(context.Context, *connect.Request[v1.ListStorageCapacityUsageRequest]) (*connect.Response[v1.ListStorageCapacityUsageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.ListStorageCapacityUsage is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) SimpleUploadFile(context.Context, *connect.BidiStream[v1.SimpleUploadFileRequest, v1.SimpleUploadFileResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.SimpleUploadFile is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) SimpleDownloadFile(context.Context, *connect.Request[v1.SimpleDownloadFileRequest], *connect.ServerStream[v1.SimpleDownloadFileResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.SimpleDownloadFile is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) PresignedUploadFile(context.Context, *connect.Request[v1.PresignedUploadFileRequest]) (*connect.Response[v1.PresignedUploadFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.PresignedUploadFile is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) PresignedUploadFileStatus(context.Context, *connect.Request[v1.PresignedUploadFileStatusRequest]) (*connect.Response[v1.PresignedUploadFileStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.PresignedUploadFileStatus is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) PresignedDownloadFile(context.Context, *connect.Request[v1.PresignedDownloadFileRequest]) (*connect.Response[v1.PresignedDownloadFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.PresignedDownloadFile is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) SearchAppInfos(context.Context, *connect.Request[v1.SearchAppInfosRequest]) (*connect.Response[v1.SearchAppInfosResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.SearchAppInfos is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) CreateStoreApp(context.Context, *connect.Request[v1.CreateStoreAppRequest]) (*connect.Response[v1.CreateStoreAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.CreateStoreApp is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) UpdateStoreApp(context.Context, *connect.Request[v1.UpdateStoreAppRequest]) (*connect.Response[v1.UpdateStoreAppResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.UpdateStoreApp is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) ListStoreApps(context.Context, *connect.Request[v1.ListStoreAppsRequest]) (*connect.Response[v1.ListStoreAppsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.ListStoreApps is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) ListStoreAppBinaries(context.Context, *connect.Request[v1.ListStoreAppBinariesRequest]) (*connect.Response[v1.ListStoreAppBinariesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.ListStoreAppBinaries is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) UpdateStoreAppBinary(context.Context, *connect.Request[v1.UpdateStoreAppBinaryRequest]) (*connect.Response[v1.UpdateStoreAppBinaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.UpdateStoreAppBinary is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) ListStoreAppBinaryFiles(context.Context, *connect.Request[v1.ListStoreAppBinaryFilesRequest]) (*connect.Response[v1.ListStoreAppBinaryFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.ListStoreAppBinaryFiles is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) CreateStoreAppSaveFile(context.Context, *connect.Request[v1.CreateStoreAppSaveFileRequest]) (*connect.Response[v1.CreateStoreAppSaveFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.CreateStoreAppSaveFile is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) UpdateStoreAppSaveFile(context.Context, *connect.Request[v1.UpdateStoreAppSaveFileRequest]) (*connect.Response[v1.UpdateStoreAppSaveFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.UpdateStoreAppSaveFile is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) UploadStoreAppSaveFile(context.Context, *connect.Request[v1.UploadStoreAppSaveFileRequest]) (*connect.Response[v1.UploadStoreAppSaveFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.UploadStoreAppSaveFile is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) ListStoreAppSaveFiles(context.Context, *connect.Request[v1.ListStoreAppSaveFilesRequest]) (*connect.Response[v1.ListStoreAppSaveFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.ListStoreAppSaveFiles is not implemented"))
}

func (UnimplementedLibrarianAngelaServiceHandler) DeleteStoreAppSaveFile(context.Context, *connect.Request[v1.DeleteStoreAppSaveFileRequest]) (*connect.Response[v1.DeleteStoreAppSaveFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sephirah.v1.angela.LibrarianAngelaService.DeleteStoreAppSaveFile is not implemented"))
}
