// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: librarian/searcher/v1/searcher.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LibrarianSearcherServiceClient is the client API for LibrarianSearcherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibrarianSearcherServiceClient interface {
	NewID(ctx context.Context, in *NewIDRequest, opts ...grpc.CallOption) (*NewIDResponse, error)
	DescribeID(ctx context.Context, in *DescribeIDRequest, opts ...grpc.CallOption) (*DescribeIDResponse, error)
	SearchID(ctx context.Context, in *SearchIDRequest, opts ...grpc.CallOption) (*SearchIDResponse, error)
}

type librarianSearcherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibrarianSearcherServiceClient(cc grpc.ClientConnInterface) LibrarianSearcherServiceClient {
	return &librarianSearcherServiceClient{cc}
}

func (c *librarianSearcherServiceClient) NewID(ctx context.Context, in *NewIDRequest, opts ...grpc.CallOption) (*NewIDResponse, error) {
	out := new(NewIDResponse)
	err := c.cc.Invoke(ctx, "/librarian.searcher.v1.LibrarianSearcherService/NewID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSearcherServiceClient) DescribeID(ctx context.Context, in *DescribeIDRequest, opts ...grpc.CallOption) (*DescribeIDResponse, error) {
	out := new(DescribeIDResponse)
	err := c.cc.Invoke(ctx, "/librarian.searcher.v1.LibrarianSearcherService/DescribeID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianSearcherServiceClient) SearchID(ctx context.Context, in *SearchIDRequest, opts ...grpc.CallOption) (*SearchIDResponse, error) {
	out := new(SearchIDResponse)
	err := c.cc.Invoke(ctx, "/librarian.searcher.v1.LibrarianSearcherService/SearchID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibrarianSearcherServiceServer is the server API for LibrarianSearcherService service.
// All implementations must embed UnimplementedLibrarianSearcherServiceServer
// for forward compatibility
type LibrarianSearcherServiceServer interface {
	NewID(context.Context, *NewIDRequest) (*NewIDResponse, error)
	DescribeID(context.Context, *DescribeIDRequest) (*DescribeIDResponse, error)
	SearchID(context.Context, *SearchIDRequest) (*SearchIDResponse, error)
	mustEmbedUnimplementedLibrarianSearcherServiceServer()
}

// UnimplementedLibrarianSearcherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLibrarianSearcherServiceServer struct {
}

func (UnimplementedLibrarianSearcherServiceServer) NewID(context.Context, *NewIDRequest) (*NewIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewID not implemented")
}
func (UnimplementedLibrarianSearcherServiceServer) DescribeID(context.Context, *DescribeIDRequest) (*DescribeIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeID not implemented")
}
func (UnimplementedLibrarianSearcherServiceServer) SearchID(context.Context, *SearchIDRequest) (*SearchIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchID not implemented")
}
func (UnimplementedLibrarianSearcherServiceServer) mustEmbedUnimplementedLibrarianSearcherServiceServer() {
}

// UnsafeLibrarianSearcherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibrarianSearcherServiceServer will
// result in compilation errors.
type UnsafeLibrarianSearcherServiceServer interface {
	mustEmbedUnimplementedLibrarianSearcherServiceServer()
}

func RegisterLibrarianSearcherServiceServer(s grpc.ServiceRegistrar, srv LibrarianSearcherServiceServer) {
	s.RegisterService(&LibrarianSearcherService_ServiceDesc, srv)
}

func _LibrarianSearcherService_NewID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSearcherServiceServer).NewID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.searcher.v1.LibrarianSearcherService/NewID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSearcherServiceServer).NewID(ctx, req.(*NewIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSearcherService_DescribeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSearcherServiceServer).DescribeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.searcher.v1.LibrarianSearcherService/DescribeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSearcherServiceServer).DescribeID(ctx, req.(*DescribeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianSearcherService_SearchID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianSearcherServiceServer).SearchID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.searcher.v1.LibrarianSearcherService/SearchID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianSearcherServiceServer).SearchID(ctx, req.(*SearchIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibrarianSearcherService_ServiceDesc is the grpc.ServiceDesc for LibrarianSearcherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibrarianSearcherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "librarian.searcher.v1.LibrarianSearcherService",
	HandlerType: (*LibrarianSearcherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewID",
			Handler:    _LibrarianSearcherService_NewID_Handler,
		},
		{
			MethodName: "DescribeID",
			Handler:    _LibrarianSearcherService_DescribeID_Handler,
		},
		{
			MethodName: "SearchID",
			Handler:    _LibrarianSearcherService_SearchID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "librarian/searcher/v1/searcher.proto",
}
