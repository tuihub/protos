// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: librarian/v1/wellknown.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WellKnownAccountPlatform int32

const (
	WellKnownAccountPlatform_WELL_KNOWN_ACCOUNT_PLATFORM_UNSPECIFIED WellKnownAccountPlatform = 0
	WellKnownAccountPlatform_WELL_KNOWN_ACCOUNT_PLATFORM_STEAM       WellKnownAccountPlatform = 1
)

// Enum value maps for WellKnownAccountPlatform.
var (
	WellKnownAccountPlatform_name = map[int32]string{
		0: "WELL_KNOWN_ACCOUNT_PLATFORM_UNSPECIFIED",
		1: "WELL_KNOWN_ACCOUNT_PLATFORM_STEAM",
	}
	WellKnownAccountPlatform_value = map[string]int32{
		"WELL_KNOWN_ACCOUNT_PLATFORM_UNSPECIFIED": 0,
		"WELL_KNOWN_ACCOUNT_PLATFORM_STEAM":       1,
	}
)

func (x WellKnownAccountPlatform) Enum() *WellKnownAccountPlatform {
	p := new(WellKnownAccountPlatform)
	*p = x
	return p
}

func (x WellKnownAccountPlatform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WellKnownAccountPlatform) Descriptor() protoreflect.EnumDescriptor {
	return file_librarian_v1_wellknown_proto_enumTypes[0].Descriptor()
}

func (WellKnownAccountPlatform) Type() protoreflect.EnumType {
	return &file_librarian_v1_wellknown_proto_enumTypes[0]
}

func (x WellKnownAccountPlatform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WellKnownAccountPlatform.Descriptor instead.
func (WellKnownAccountPlatform) EnumDescriptor() ([]byte, []int) {
	return file_librarian_v1_wellknown_proto_rawDescGZIP(), []int{0}
}

type WellKnownAppInfoSource int32

const (
	WellKnownAppInfoSource_WELL_KNOWN_APP_INFO_SOURCE_UNSPECIFIED WellKnownAppInfoSource = 0
	WellKnownAppInfoSource_WELL_KNOWN_APP_INFO_SOURCE_STEAM       WellKnownAppInfoSource = 2
	WellKnownAppInfoSource_WELL_KNOWN_APP_INFO_SOURCE_VNDB        WellKnownAppInfoSource = 3
	WellKnownAppInfoSource_WELL_KNOWN_APP_INFO_SOURCE_BANGUMI     WellKnownAppInfoSource = 4
)

// Enum value maps for WellKnownAppInfoSource.
var (
	WellKnownAppInfoSource_name = map[int32]string{
		0: "WELL_KNOWN_APP_INFO_SOURCE_UNSPECIFIED",
		2: "WELL_KNOWN_APP_INFO_SOURCE_STEAM",
		3: "WELL_KNOWN_APP_INFO_SOURCE_VNDB",
		4: "WELL_KNOWN_APP_INFO_SOURCE_BANGUMI",
	}
	WellKnownAppInfoSource_value = map[string]int32{
		"WELL_KNOWN_APP_INFO_SOURCE_UNSPECIFIED": 0,
		"WELL_KNOWN_APP_INFO_SOURCE_STEAM":       2,
		"WELL_KNOWN_APP_INFO_SOURCE_VNDB":        3,
		"WELL_KNOWN_APP_INFO_SOURCE_BANGUMI":     4,
	}
)

func (x WellKnownAppInfoSource) Enum() *WellKnownAppInfoSource {
	p := new(WellKnownAppInfoSource)
	*p = x
	return p
}

func (x WellKnownAppInfoSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WellKnownAppInfoSource) Descriptor() protoreflect.EnumDescriptor {
	return file_librarian_v1_wellknown_proto_enumTypes[1].Descriptor()
}

func (WellKnownAppInfoSource) Type() protoreflect.EnumType {
	return &file_librarian_v1_wellknown_proto_enumTypes[1]
}

func (x WellKnownAppInfoSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WellKnownAppInfoSource.Descriptor instead.
func (WellKnownAppInfoSource) EnumDescriptor() ([]byte, []int) {
	return file_librarian_v1_wellknown_proto_rawDescGZIP(), []int{1}
}

type WellKnownFeedSource int32

const (
	WellKnownFeedSource_WELL_KNOWN_FEED_SOURCE_UNSPECIFIED WellKnownFeedSource = 0
	WellKnownFeedSource_WELL_KNOWN_FEED_SOURCE_RSS         WellKnownFeedSource = 1
)

// Enum value maps for WellKnownFeedSource.
var (
	WellKnownFeedSource_name = map[int32]string{
		0: "WELL_KNOWN_FEED_SOURCE_UNSPECIFIED",
		1: "WELL_KNOWN_FEED_SOURCE_RSS",
	}
	WellKnownFeedSource_value = map[string]int32{
		"WELL_KNOWN_FEED_SOURCE_UNSPECIFIED": 0,
		"WELL_KNOWN_FEED_SOURCE_RSS":         1,
	}
)

func (x WellKnownFeedSource) Enum() *WellKnownFeedSource {
	p := new(WellKnownFeedSource)
	*p = x
	return p
}

func (x WellKnownFeedSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WellKnownFeedSource) Descriptor() protoreflect.EnumDescriptor {
	return file_librarian_v1_wellknown_proto_enumTypes[2].Descriptor()
}

func (WellKnownFeedSource) Type() protoreflect.EnumType {
	return &file_librarian_v1_wellknown_proto_enumTypes[2]
}

func (x WellKnownFeedSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WellKnownFeedSource.Descriptor instead.
func (WellKnownFeedSource) EnumDescriptor() ([]byte, []int) {
	return file_librarian_v1_wellknown_proto_rawDescGZIP(), []int{2}
}

type WellKnownNotifyDestination int32

const (
	WellKnownNotifyDestination_WELL_KNOWN_NOTIFY_DESTINATION_UNSPECIFIED WellKnownNotifyDestination = 0
	WellKnownNotifyDestination_WELL_KNOWN_NOTIFY_DESTINATION_TELEGRAM    WellKnownNotifyDestination = 1
)

// Enum value maps for WellKnownNotifyDestination.
var (
	WellKnownNotifyDestination_name = map[int32]string{
		0: "WELL_KNOWN_NOTIFY_DESTINATION_UNSPECIFIED",
		1: "WELL_KNOWN_NOTIFY_DESTINATION_TELEGRAM",
	}
	WellKnownNotifyDestination_value = map[string]int32{
		"WELL_KNOWN_NOTIFY_DESTINATION_UNSPECIFIED": 0,
		"WELL_KNOWN_NOTIFY_DESTINATION_TELEGRAM":    1,
	}
)

func (x WellKnownNotifyDestination) Enum() *WellKnownNotifyDestination {
	p := new(WellKnownNotifyDestination)
	*p = x
	return p
}

func (x WellKnownNotifyDestination) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WellKnownNotifyDestination) Descriptor() protoreflect.EnumDescriptor {
	return file_librarian_v1_wellknown_proto_enumTypes[3].Descriptor()
}

func (WellKnownNotifyDestination) Type() protoreflect.EnumType {
	return &file_librarian_v1_wellknown_proto_enumTypes[3]
}

func (x WellKnownNotifyDestination) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WellKnownNotifyDestination.Descriptor instead.
func (WellKnownNotifyDestination) EnumDescriptor() ([]byte, []int) {
	return file_librarian_v1_wellknown_proto_rawDescGZIP(), []int{3}
}

type WellKnownFeedItemAction int32

const (
	WellKnownFeedItemAction_WELL_KNOWN_FEED_ITEM_ACTION_UNSPECIFIED WellKnownFeedItemAction = 0
	// filter item by keywords
	WellKnownFeedItemAction_WELL_KNOWN_FEED_ITEM_ACTION_KEYWORD_FILTER WellKnownFeedItemAction = 1
	// generate description form content
	WellKnownFeedItemAction_WELL_KNOWN_FEED_ITEM_ACTION_DESCRIPTION_GENERATOR WellKnownFeedItemAction = 2
)

// Enum value maps for WellKnownFeedItemAction.
var (
	WellKnownFeedItemAction_name = map[int32]string{
		0: "WELL_KNOWN_FEED_ITEM_ACTION_UNSPECIFIED",
		1: "WELL_KNOWN_FEED_ITEM_ACTION_KEYWORD_FILTER",
		2: "WELL_KNOWN_FEED_ITEM_ACTION_DESCRIPTION_GENERATOR",
	}
	WellKnownFeedItemAction_value = map[string]int32{
		"WELL_KNOWN_FEED_ITEM_ACTION_UNSPECIFIED":           0,
		"WELL_KNOWN_FEED_ITEM_ACTION_KEYWORD_FILTER":        1,
		"WELL_KNOWN_FEED_ITEM_ACTION_DESCRIPTION_GENERATOR": 2,
	}
)

func (x WellKnownFeedItemAction) Enum() *WellKnownFeedItemAction {
	p := new(WellKnownFeedItemAction)
	*p = x
	return p
}

func (x WellKnownFeedItemAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WellKnownFeedItemAction) Descriptor() protoreflect.EnumDescriptor {
	return file_librarian_v1_wellknown_proto_enumTypes[4].Descriptor()
}

func (WellKnownFeedItemAction) Type() protoreflect.EnumType {
	return &file_librarian_v1_wellknown_proto_enumTypes[4]
}

func (x WellKnownFeedItemAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WellKnownFeedItemAction.Descriptor instead.
func (WellKnownFeedItemAction) EnumDescriptor() ([]byte, []int) {
	return file_librarian_v1_wellknown_proto_rawDescGZIP(), []int{4}
}

// FeatureFlag is used to identify features.
// It will also be sent to clients for UI display.
type FeatureFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Global identifier to each feature.
	// It is recommended to use ASCII characters only.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Human-readable name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Human-readable description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Customized JSON schema for feature
	ConfigJsonSchema string `protobuf:"bytes,4,opt,name=config_json_schema,json=configJsonSchema,proto3" json:"config_json_schema,omitempty"`
	// Require context to use this feature
	RequireContext bool `protobuf:"varint,5,opt,name=require_context,json=requireContext,proto3" json:"require_context,omitempty"`
	// Extra information
	Extra map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FeatureFlag) Reset() {
	*x = FeatureFlag{}
	mi := &file_librarian_v1_wellknown_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureFlag) ProtoMessage() {}

func (x *FeatureFlag) ProtoReflect() protoreflect.Message {
	mi := &file_librarian_v1_wellknown_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureFlag.ProtoReflect.Descriptor instead.
func (*FeatureFlag) Descriptor() ([]byte, []int) {
	return file_librarian_v1_wellknown_proto_rawDescGZIP(), []int{0}
}

func (x *FeatureFlag) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeatureFlag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureFlag) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FeatureFlag) GetConfigJsonSchema() string {
	if x != nil {
		return x.ConfigJsonSchema
	}
	return ""
}

func (x *FeatureFlag) GetRequireContext() bool {
	if x != nil {
		return x.RequireContext
	}
	return false
}

func (x *FeatureFlag) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

// FeatureRequest is used to deliver feature-related request parameters.
type FeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// See `FeatureFlag.id`
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// See `FeatureFlag.region`
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// Configuration JSON, must be validated by schema
	ConfigJson string `protobuf:"bytes,3,opt,name=config_json,json=configJson,proto3" json:"config_json,omitempty"`
	// Require if feature needs context
	ContextId *InternalID `protobuf:"bytes,4,opt,name=context_id,json=contextId,proto3,oneof" json:"context_id,omitempty"`
}

func (x *FeatureRequest) Reset() {
	*x = FeatureRequest{}
	mi := &file_librarian_v1_wellknown_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureRequest) ProtoMessage() {}

func (x *FeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_librarian_v1_wellknown_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureRequest.ProtoReflect.Descriptor instead.
func (*FeatureRequest) Descriptor() ([]byte, []int) {
	return file_librarian_v1_wellknown_proto_rawDescGZIP(), []int{1}
}

func (x *FeatureRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeatureRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *FeatureRequest) GetConfigJson() string {
	if x != nil {
		return x.ConfigJson
	}
	return ""
}

func (x *FeatureRequest) GetContextId() *InternalID {
	if x != nil {
		return x.ContextId
	}
	return nil
}

type FeatureSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// WellKnownAccountPlatform
	AccountPlatforms []*FeatureFlag `protobuf:"bytes,1,rep,name=account_platforms,json=accountPlatforms,proto3" json:"account_platforms,omitempty"`
	// WellKnownAppInfoSource
	AppInfoSources []*FeatureFlag `protobuf:"bytes,2,rep,name=app_info_sources,json=appInfoSources,proto3" json:"app_info_sources,omitempty"`
	// WellKnownFeedSource
	FeedSources []*FeatureFlag `protobuf:"bytes,3,rep,name=feed_sources,json=feedSources,proto3" json:"feed_sources,omitempty"`
	// WellKnownNotifyDestination
	NotifyDestinations []*FeatureFlag `protobuf:"bytes,4,rep,name=notify_destinations,json=notifyDestinations,proto3" json:"notify_destinations,omitempty"`
	// WellKnownFeedItemAction
	FeedItemActions []*FeatureFlag `protobuf:"bytes,5,rep,name=feed_item_actions,json=feedItemActions,proto3" json:"feed_item_actions,omitempty"`
	FeedSetters     []*FeatureFlag `protobuf:"bytes,6,rep,name=feed_setters,json=feedSetters,proto3" json:"feed_setters,omitempty"`
	FeedGetters     []*FeatureFlag `protobuf:"bytes,7,rep,name=feed_getters,json=feedGetters,proto3" json:"feed_getters,omitempty"`
}

func (x *FeatureSummary) Reset() {
	*x = FeatureSummary{}
	mi := &file_librarian_v1_wellknown_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureSummary) ProtoMessage() {}

func (x *FeatureSummary) ProtoReflect() protoreflect.Message {
	mi := &file_librarian_v1_wellknown_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureSummary.ProtoReflect.Descriptor instead.
func (*FeatureSummary) Descriptor() ([]byte, []int) {
	return file_librarian_v1_wellknown_proto_rawDescGZIP(), []int{2}
}

func (x *FeatureSummary) GetAccountPlatforms() []*FeatureFlag {
	if x != nil {
		return x.AccountPlatforms
	}
	return nil
}

func (x *FeatureSummary) GetAppInfoSources() []*FeatureFlag {
	if x != nil {
		return x.AppInfoSources
	}
	return nil
}

func (x *FeatureSummary) GetFeedSources() []*FeatureFlag {
	if x != nil {
		return x.FeedSources
	}
	return nil
}

func (x *FeatureSummary) GetNotifyDestinations() []*FeatureFlag {
	if x != nil {
		return x.NotifyDestinations
	}
	return nil
}

func (x *FeatureSummary) GetFeedItemActions() []*FeatureFlag {
	if x != nil {
		return x.FeedItemActions
	}
	return nil
}

func (x *FeatureSummary) GetFeedSetters() []*FeatureFlag {
	if x != nil {
		return x.FeedSetters
	}
	return nil
}

func (x *FeatureSummary) GetFeedGetters() []*FeatureFlag {
	if x != nil {
		return x.FeedGetters
	}
	return nil
}

var file_librarian_v1_wellknown_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         1000,
		Name:          "librarian.v1.to_string",
		Tag:           "bytes,1000,opt,name=to_string",
		Filename:      "librarian/v1/wellknown.proto",
	},
}

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// optional string to_string = 1000;
	E_ToString = &file_librarian_v1_wellknown_proto_extTypes[0]
)

var File_librarian_v1_wellknown_proto protoreflect.FileDescriptor

var file_librarian_v1_wellknown_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x77,
	0x65, 0x6c, 0x6c, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x02, 0x0a, 0x0b, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa6, 0x01, 0x0a,
	0x0e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xea, 0x03, 0x0a, 0x0e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x10,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x12, 0x43, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x12, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x45, 0x0a, 0x11, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x64, 0x47, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x73, 0x2a, 0x7d, 0x0a, 0x18, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x30,
	0x0a, 0x27, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x03, 0xc2, 0x3e, 0x00,
	0x12, 0x2f, 0x0a, 0x21, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f,
	0x53, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x01, 0x1a, 0x08, 0xc2, 0x3e, 0x05, 0x73, 0x74, 0x65, 0x61,
	0x6d, 0x2a, 0xdb, 0x01, 0x0a, 0x16, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x26,
	0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x03, 0xc2, 0x3e, 0x00, 0x12, 0x2e, 0x0a,
	0x20, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x45, 0x41,
	0x4d, 0x10, 0x02, 0x1a, 0x08, 0xc2, 0x3e, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x12, 0x2c, 0x0a,
	0x1f, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x56, 0x4e, 0x44, 0x42,
	0x10, 0x03, 0x1a, 0x07, 0xc2, 0x3e, 0x04, 0x76, 0x6e, 0x64, 0x62, 0x12, 0x32, 0x0a, 0x22, 0x57,
	0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x47, 0x55, 0x4d,
	0x49, 0x10, 0x04, 0x1a, 0x0a, 0xc2, 0x3e, 0x07, 0x62, 0x61, 0x6e, 0x67, 0x75, 0x6d, 0x69, 0x2a,
	0x6a, 0x0a, 0x13, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x46, 0x65, 0x65, 0x64,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x22, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x03,
	0xc2, 0x3e, 0x00, 0x12, 0x26, 0x0a, 0x1a, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x53,
	0x53, 0x10, 0x01, 0x1a, 0x06, 0xc2, 0x3e, 0x03, 0x72, 0x73, 0x73, 0x2a, 0x89, 0x01, 0x0a, 0x1a,
	0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x29, 0x57, 0x45,
	0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f,
	0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x03, 0xc2, 0x3e, 0x00, 0x12, 0x37,
	0x0a, 0x26, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4e, 0x4f, 0x54,
	0x49, 0x46, 0x59, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x45, 0x4c, 0x45, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x01, 0x1a, 0x0b, 0xc2, 0x3e, 0x08, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x2a, 0xdf, 0x01, 0x0a, 0x17, 0x57, 0x65, 0x6c, 0x6c,
	0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x27, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x1a, 0x03, 0xc2, 0x3e, 0x00, 0x12, 0x41, 0x0a, 0x2a, 0x57, 0x45, 0x4c, 0x4c, 0x5f, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x10, 0x01, 0x1a, 0x11, 0xc2, 0x3e, 0x0e, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x31, 0x57, 0x45, 0x4c, 0x4c,
	0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x1a,
	0x18, 0xc2, 0x3e, 0x15, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0x3f, 0x0a, 0x09, 0x74, 0x6f, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x4b, 0x5a, 0x2c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x75, 0x69, 0x68, 0x75, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0xaa, 0x02, 0x1a, 0x54, 0x75, 0x69,
	0x48, 0x75, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_librarian_v1_wellknown_proto_rawDescOnce sync.Once
	file_librarian_v1_wellknown_proto_rawDescData = file_librarian_v1_wellknown_proto_rawDesc
)

func file_librarian_v1_wellknown_proto_rawDescGZIP() []byte {
	file_librarian_v1_wellknown_proto_rawDescOnce.Do(func() {
		file_librarian_v1_wellknown_proto_rawDescData = protoimpl.X.CompressGZIP(file_librarian_v1_wellknown_proto_rawDescData)
	})
	return file_librarian_v1_wellknown_proto_rawDescData
}

var file_librarian_v1_wellknown_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_librarian_v1_wellknown_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_librarian_v1_wellknown_proto_goTypes = []any{
	(WellKnownAccountPlatform)(0),         // 0: librarian.v1.WellKnownAccountPlatform
	(WellKnownAppInfoSource)(0),           // 1: librarian.v1.WellKnownAppInfoSource
	(WellKnownFeedSource)(0),              // 2: librarian.v1.WellKnownFeedSource
	(WellKnownNotifyDestination)(0),       // 3: librarian.v1.WellKnownNotifyDestination
	(WellKnownFeedItemAction)(0),          // 4: librarian.v1.WellKnownFeedItemAction
	(*FeatureFlag)(nil),                   // 5: librarian.v1.FeatureFlag
	(*FeatureRequest)(nil),                // 6: librarian.v1.FeatureRequest
	(*FeatureSummary)(nil),                // 7: librarian.v1.FeatureSummary
	nil,                                   // 8: librarian.v1.FeatureFlag.ExtraEntry
	(*InternalID)(nil),                    // 9: librarian.v1.InternalID
	(*descriptorpb.EnumValueOptions)(nil), // 10: google.protobuf.EnumValueOptions
}
var file_librarian_v1_wellknown_proto_depIdxs = []int32{
	8,  // 0: librarian.v1.FeatureFlag.extra:type_name -> librarian.v1.FeatureFlag.ExtraEntry
	9,  // 1: librarian.v1.FeatureRequest.context_id:type_name -> librarian.v1.InternalID
	5,  // 2: librarian.v1.FeatureSummary.account_platforms:type_name -> librarian.v1.FeatureFlag
	5,  // 3: librarian.v1.FeatureSummary.app_info_sources:type_name -> librarian.v1.FeatureFlag
	5,  // 4: librarian.v1.FeatureSummary.feed_sources:type_name -> librarian.v1.FeatureFlag
	5,  // 5: librarian.v1.FeatureSummary.notify_destinations:type_name -> librarian.v1.FeatureFlag
	5,  // 6: librarian.v1.FeatureSummary.feed_item_actions:type_name -> librarian.v1.FeatureFlag
	5,  // 7: librarian.v1.FeatureSummary.feed_setters:type_name -> librarian.v1.FeatureFlag
	5,  // 8: librarian.v1.FeatureSummary.feed_getters:type_name -> librarian.v1.FeatureFlag
	10, // 9: librarian.v1.to_string:extendee -> google.protobuf.EnumValueOptions
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	9,  // [9:10] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_librarian_v1_wellknown_proto_init() }
func file_librarian_v1_wellknown_proto_init() {
	if File_librarian_v1_wellknown_proto != nil {
		return
	}
	file_librarian_v1_common_proto_init()
	file_librarian_v1_wellknown_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_librarian_v1_wellknown_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   4,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_librarian_v1_wellknown_proto_goTypes,
		DependencyIndexes: file_librarian_v1_wellknown_proto_depIdxs,
		EnumInfos:         file_librarian_v1_wellknown_proto_enumTypes,
		MessageInfos:      file_librarian_v1_wellknown_proto_msgTypes,
		ExtensionInfos:    file_librarian_v1_wellknown_proto_extTypes,
	}.Build()
	File_librarian_v1_wellknown_proto = out.File
	file_librarian_v1_wellknown_proto_rawDesc = nil
	file_librarian_v1_wellknown_proto_goTypes = nil
	file_librarian_v1_wellknown_proto_depIdxs = nil
}
