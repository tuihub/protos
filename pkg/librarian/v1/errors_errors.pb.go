// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsErrorReasonUnspecified(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_UNSPECIFIED.String() && e.Code == 500
}

func ErrorErrorReasonUnspecified(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ERROR_REASON_UNSPECIFIED.String(), fmt.Sprintf(format, args...))
}

func IsErrorReasonBadRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_BAD_REQUEST.String() && e.Code == 400
}

func ErrorErrorReasonBadRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ERROR_REASON_BAD_REQUEST.String(), fmt.Sprintf(format, args...))
}

func IsErrorReasonUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_UNAUTHORIZED.String() && e.Code == 401
}

func ErrorErrorReasonUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_ERROR_REASON_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}

func IsErrorReasonForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_FORBIDDEN.String() && e.Code == 403
}

func ErrorErrorReasonForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_ERROR_REASON_FORBIDDEN.String(), fmt.Sprintf(format, args...))
}

func IsErrorReasonNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_NOT_FOUND.String() && e.Code == 404
}

func ErrorErrorReasonNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_ERROR_REASON_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsErrorReasonMethodNotAllowed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_METHOD_NOT_ALLOWED.String() && e.Code == 405
}

func ErrorErrorReasonMethodNotAllowed(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ErrorReason_ERROR_REASON_METHOD_NOT_ALLOWED.String(), fmt.Sprintf(format, args...))
}

func IsErrorReasonNotImplemented(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_NOT_IMPLEMENTED.String() && e.Code == 501
}

func ErrorErrorReasonNotImplemented(format string, args ...interface{}) *errors.Error {
	return errors.New(501, ErrorReason_ERROR_REASON_NOT_IMPLEMENTED.String(), fmt.Sprintf(format, args...))
}

func IsErrorReasonBadGateway(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ERROR_REASON_BAD_GATEWAY.String() && e.Code == 502
}

func ErrorErrorReasonBadGateway(format string, args ...interface{}) *errors.Error {
	return errors.New(502, ErrorReason_ERROR_REASON_BAD_GATEWAY.String(), fmt.Sprintf(format, args...))
}
