// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: librarian/mapper/v1/mapper.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LibrarianMapperServiceClient is the client API for LibrarianMapperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibrarianMapperServiceClient interface {
	InsertVertex(ctx context.Context, in *InsertVertexRequest, opts ...grpc.CallOption) (*InsertVertexResponse, error)
	DeleteVertex(ctx context.Context, in *DeleteVertexRequest, opts ...grpc.CallOption) (*DeleteVertexResponse, error)
	UpdateVertex(ctx context.Context, in *UpdateVertexRequest, opts ...grpc.CallOption) (*UpdateVertexResponse, error)
	InsertEdge(ctx context.Context, in *InsertEdgeRequest, opts ...grpc.CallOption) (*InsertEdgeResponse, error)
	DeleteEdge(ctx context.Context, in *DeleteEdgeRequest, opts ...grpc.CallOption) (*DeleteEdgeResponse, error)
	UpdateEdge(ctx context.Context, in *UpdateEdgeRequest, opts ...grpc.CallOption) (*UpdateEdgeResponse, error)
	// Search vertexs from a given start vertex
	GoFromVertex(ctx context.Context, in *GoFromVertexRequest, opts ...grpc.CallOption) (*GoFromVertexResponse, error)
	// Get vertexs in the connected subgraph of the `Equal` type edge where the given vertex is located
	FetchEqualVertex(ctx context.Context, in *FetchEqualVertexRequest, opts ...grpc.CallOption) (*FetchEqualVertexResponse, error)
	// Get vertexs connected to the connected subgraph of the `Equal` type edge where the given vertex is located
	FetchEqualVertexNeighbor(ctx context.Context, in *FetchEqualVertexNeighborRequest, opts ...grpc.CallOption) (*FetchEqualVertexNeighborResponse, error)
	// Find path between two given vertexs
	FindPath(ctx context.Context, in *FindPathRequest, opts ...grpc.CallOption) (*FindPathResponse, error)
}

type librarianMapperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibrarianMapperServiceClient(cc grpc.ClientConnInterface) LibrarianMapperServiceClient {
	return &librarianMapperServiceClient{cc}
}

func (c *librarianMapperServiceClient) InsertVertex(ctx context.Context, in *InsertVertexRequest, opts ...grpc.CallOption) (*InsertVertexResponse, error) {
	out := new(InsertVertexResponse)
	err := c.cc.Invoke(ctx, "/librarian.mapper.v1.LibrarianMapperService/InsertVertex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianMapperServiceClient) DeleteVertex(ctx context.Context, in *DeleteVertexRequest, opts ...grpc.CallOption) (*DeleteVertexResponse, error) {
	out := new(DeleteVertexResponse)
	err := c.cc.Invoke(ctx, "/librarian.mapper.v1.LibrarianMapperService/DeleteVertex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianMapperServiceClient) UpdateVertex(ctx context.Context, in *UpdateVertexRequest, opts ...grpc.CallOption) (*UpdateVertexResponse, error) {
	out := new(UpdateVertexResponse)
	err := c.cc.Invoke(ctx, "/librarian.mapper.v1.LibrarianMapperService/UpdateVertex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianMapperServiceClient) InsertEdge(ctx context.Context, in *InsertEdgeRequest, opts ...grpc.CallOption) (*InsertEdgeResponse, error) {
	out := new(InsertEdgeResponse)
	err := c.cc.Invoke(ctx, "/librarian.mapper.v1.LibrarianMapperService/InsertEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianMapperServiceClient) DeleteEdge(ctx context.Context, in *DeleteEdgeRequest, opts ...grpc.CallOption) (*DeleteEdgeResponse, error) {
	out := new(DeleteEdgeResponse)
	err := c.cc.Invoke(ctx, "/librarian.mapper.v1.LibrarianMapperService/DeleteEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianMapperServiceClient) UpdateEdge(ctx context.Context, in *UpdateEdgeRequest, opts ...grpc.CallOption) (*UpdateEdgeResponse, error) {
	out := new(UpdateEdgeResponse)
	err := c.cc.Invoke(ctx, "/librarian.mapper.v1.LibrarianMapperService/UpdateEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianMapperServiceClient) GoFromVertex(ctx context.Context, in *GoFromVertexRequest, opts ...grpc.CallOption) (*GoFromVertexResponse, error) {
	out := new(GoFromVertexResponse)
	err := c.cc.Invoke(ctx, "/librarian.mapper.v1.LibrarianMapperService/GoFromVertex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianMapperServiceClient) FetchEqualVertex(ctx context.Context, in *FetchEqualVertexRequest, opts ...grpc.CallOption) (*FetchEqualVertexResponse, error) {
	out := new(FetchEqualVertexResponse)
	err := c.cc.Invoke(ctx, "/librarian.mapper.v1.LibrarianMapperService/FetchEqualVertex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianMapperServiceClient) FetchEqualVertexNeighbor(ctx context.Context, in *FetchEqualVertexNeighborRequest, opts ...grpc.CallOption) (*FetchEqualVertexNeighborResponse, error) {
	out := new(FetchEqualVertexNeighborResponse)
	err := c.cc.Invoke(ctx, "/librarian.mapper.v1.LibrarianMapperService/FetchEqualVertexNeighbor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianMapperServiceClient) FindPath(ctx context.Context, in *FindPathRequest, opts ...grpc.CallOption) (*FindPathResponse, error) {
	out := new(FindPathResponse)
	err := c.cc.Invoke(ctx, "/librarian.mapper.v1.LibrarianMapperService/FindPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibrarianMapperServiceServer is the server API for LibrarianMapperService service.
// All implementations should embed UnimplementedLibrarianMapperServiceServer
// for forward compatibility
type LibrarianMapperServiceServer interface {
	InsertVertex(context.Context, *InsertVertexRequest) (*InsertVertexResponse, error)
	DeleteVertex(context.Context, *DeleteVertexRequest) (*DeleteVertexResponse, error)
	UpdateVertex(context.Context, *UpdateVertexRequest) (*UpdateVertexResponse, error)
	InsertEdge(context.Context, *InsertEdgeRequest) (*InsertEdgeResponse, error)
	DeleteEdge(context.Context, *DeleteEdgeRequest) (*DeleteEdgeResponse, error)
	UpdateEdge(context.Context, *UpdateEdgeRequest) (*UpdateEdgeResponse, error)
	// Search vertexs from a given start vertex
	GoFromVertex(context.Context, *GoFromVertexRequest) (*GoFromVertexResponse, error)
	// Get vertexs in the connected subgraph of the `Equal` type edge where the given vertex is located
	FetchEqualVertex(context.Context, *FetchEqualVertexRequest) (*FetchEqualVertexResponse, error)
	// Get vertexs connected to the connected subgraph of the `Equal` type edge where the given vertex is located
	FetchEqualVertexNeighbor(context.Context, *FetchEqualVertexNeighborRequest) (*FetchEqualVertexNeighborResponse, error)
	// Find path between two given vertexs
	FindPath(context.Context, *FindPathRequest) (*FindPathResponse, error)
}

// UnimplementedLibrarianMapperServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLibrarianMapperServiceServer struct {
}

func (UnimplementedLibrarianMapperServiceServer) InsertVertex(context.Context, *InsertVertexRequest) (*InsertVertexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertVertex not implemented")
}
func (UnimplementedLibrarianMapperServiceServer) DeleteVertex(context.Context, *DeleteVertexRequest) (*DeleteVertexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVertex not implemented")
}
func (UnimplementedLibrarianMapperServiceServer) UpdateVertex(context.Context, *UpdateVertexRequest) (*UpdateVertexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVertex not implemented")
}
func (UnimplementedLibrarianMapperServiceServer) InsertEdge(context.Context, *InsertEdgeRequest) (*InsertEdgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertEdge not implemented")
}
func (UnimplementedLibrarianMapperServiceServer) DeleteEdge(context.Context, *DeleteEdgeRequest) (*DeleteEdgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEdge not implemented")
}
func (UnimplementedLibrarianMapperServiceServer) UpdateEdge(context.Context, *UpdateEdgeRequest) (*UpdateEdgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEdge not implemented")
}
func (UnimplementedLibrarianMapperServiceServer) GoFromVertex(context.Context, *GoFromVertexRequest) (*GoFromVertexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoFromVertex not implemented")
}
func (UnimplementedLibrarianMapperServiceServer) FetchEqualVertex(context.Context, *FetchEqualVertexRequest) (*FetchEqualVertexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchEqualVertex not implemented")
}
func (UnimplementedLibrarianMapperServiceServer) FetchEqualVertexNeighbor(context.Context, *FetchEqualVertexNeighborRequest) (*FetchEqualVertexNeighborResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchEqualVertexNeighbor not implemented")
}
func (UnimplementedLibrarianMapperServiceServer) FindPath(context.Context, *FindPathRequest) (*FindPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPath not implemented")
}

// UnsafeLibrarianMapperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibrarianMapperServiceServer will
// result in compilation errors.
type UnsafeLibrarianMapperServiceServer interface {
	mustEmbedUnimplementedLibrarianMapperServiceServer()
}

func RegisterLibrarianMapperServiceServer(s grpc.ServiceRegistrar, srv LibrarianMapperServiceServer) {
	s.RegisterService(&LibrarianMapperService_ServiceDesc, srv)
}

func _LibrarianMapperService_InsertVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertVertexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianMapperServiceServer).InsertVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.mapper.v1.LibrarianMapperService/InsertVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianMapperServiceServer).InsertVertex(ctx, req.(*InsertVertexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianMapperService_DeleteVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVertexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianMapperServiceServer).DeleteVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.mapper.v1.LibrarianMapperService/DeleteVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianMapperServiceServer).DeleteVertex(ctx, req.(*DeleteVertexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianMapperService_UpdateVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVertexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianMapperServiceServer).UpdateVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.mapper.v1.LibrarianMapperService/UpdateVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianMapperServiceServer).UpdateVertex(ctx, req.(*UpdateVertexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianMapperService_InsertEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertEdgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianMapperServiceServer).InsertEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.mapper.v1.LibrarianMapperService/InsertEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianMapperServiceServer).InsertEdge(ctx, req.(*InsertEdgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianMapperService_DeleteEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEdgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianMapperServiceServer).DeleteEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.mapper.v1.LibrarianMapperService/DeleteEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianMapperServiceServer).DeleteEdge(ctx, req.(*DeleteEdgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianMapperService_UpdateEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEdgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianMapperServiceServer).UpdateEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.mapper.v1.LibrarianMapperService/UpdateEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianMapperServiceServer).UpdateEdge(ctx, req.(*UpdateEdgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianMapperService_GoFromVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoFromVertexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianMapperServiceServer).GoFromVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.mapper.v1.LibrarianMapperService/GoFromVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianMapperServiceServer).GoFromVertex(ctx, req.(*GoFromVertexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianMapperService_FetchEqualVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchEqualVertexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianMapperServiceServer).FetchEqualVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.mapper.v1.LibrarianMapperService/FetchEqualVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianMapperServiceServer).FetchEqualVertex(ctx, req.(*FetchEqualVertexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianMapperService_FetchEqualVertexNeighbor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchEqualVertexNeighborRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianMapperServiceServer).FetchEqualVertexNeighbor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.mapper.v1.LibrarianMapperService/FetchEqualVertexNeighbor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianMapperServiceServer).FetchEqualVertexNeighbor(ctx, req.(*FetchEqualVertexNeighborRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianMapperService_FindPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianMapperServiceServer).FindPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.mapper.v1.LibrarianMapperService/FindPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianMapperServiceServer).FindPath(ctx, req.(*FindPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibrarianMapperService_ServiceDesc is the grpc.ServiceDesc for LibrarianMapperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibrarianMapperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "librarian.mapper.v1.LibrarianMapperService",
	HandlerType: (*LibrarianMapperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertVertex",
			Handler:    _LibrarianMapperService_InsertVertex_Handler,
		},
		{
			MethodName: "DeleteVertex",
			Handler:    _LibrarianMapperService_DeleteVertex_Handler,
		},
		{
			MethodName: "UpdateVertex",
			Handler:    _LibrarianMapperService_UpdateVertex_Handler,
		},
		{
			MethodName: "InsertEdge",
			Handler:    _LibrarianMapperService_InsertEdge_Handler,
		},
		{
			MethodName: "DeleteEdge",
			Handler:    _LibrarianMapperService_DeleteEdge_Handler,
		},
		{
			MethodName: "UpdateEdge",
			Handler:    _LibrarianMapperService_UpdateEdge_Handler,
		},
		{
			MethodName: "GoFromVertex",
			Handler:    _LibrarianMapperService_GoFromVertex_Handler,
		},
		{
			MethodName: "FetchEqualVertex",
			Handler:    _LibrarianMapperService_FetchEqualVertex_Handler,
		},
		{
			MethodName: "FetchEqualVertexNeighbor",
			Handler:    _LibrarianMapperService_FetchEqualVertexNeighbor_Handler,
		},
		{
			MethodName: "FindPath",
			Handler:    _LibrarianMapperService_FindPath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "librarian/mapper/v1/mapper.proto",
}
