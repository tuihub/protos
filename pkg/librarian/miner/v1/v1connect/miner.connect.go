// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: librarian/miner/v1/miner.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tuihub/protos/pkg/librarian/miner/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LibrarianMinerServiceName is the fully-qualified name of the LibrarianMinerService service.
	LibrarianMinerServiceName = "librarian.miner.v1.LibrarianMinerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LibrarianMinerServiceRecognizeImageBinaryProcedure is the fully-qualified name of the
	// LibrarianMinerService's RecognizeImageBinary RPC.
	LibrarianMinerServiceRecognizeImageBinaryProcedure = "/librarian.miner.v1.LibrarianMinerService/RecognizeImageBinary"
	// LibrarianMinerServiceRecognizeImageURLProcedure is the fully-qualified name of the
	// LibrarianMinerService's RecognizeImageURL RPC.
	LibrarianMinerServiceRecognizeImageURLProcedure = "/librarian.miner.v1.LibrarianMinerService/RecognizeImageURL"
)

// LibrarianMinerServiceClient is a client for the librarian.miner.v1.LibrarianMinerService service.
type LibrarianMinerServiceClient interface {
	RecognizeImageBinary(context.Context) *connect.ClientStreamForClient[v1.RecognizeImageBinaryRequest, v1.RecognizeImageBinaryResponse]
	RecognizeImageURL(context.Context, *connect.Request[v1.RecognizeImageURLRequest]) (*connect.Response[v1.RecognizeImageURLResponse], error)
}

// NewLibrarianMinerServiceClient constructs a client for the
// librarian.miner.v1.LibrarianMinerService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLibrarianMinerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LibrarianMinerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	librarianMinerServiceMethods := v1.File_librarian_miner_v1_miner_proto.Services().ByName("LibrarianMinerService").Methods()
	return &librarianMinerServiceClient{
		recognizeImageBinary: connect.NewClient[v1.RecognizeImageBinaryRequest, v1.RecognizeImageBinaryResponse](
			httpClient,
			baseURL+LibrarianMinerServiceRecognizeImageBinaryProcedure,
			connect.WithSchema(librarianMinerServiceMethods.ByName("RecognizeImageBinary")),
			connect.WithClientOptions(opts...),
		),
		recognizeImageURL: connect.NewClient[v1.RecognizeImageURLRequest, v1.RecognizeImageURLResponse](
			httpClient,
			baseURL+LibrarianMinerServiceRecognizeImageURLProcedure,
			connect.WithSchema(librarianMinerServiceMethods.ByName("RecognizeImageURL")),
			connect.WithClientOptions(opts...),
		),
	}
}

// librarianMinerServiceClient implements LibrarianMinerServiceClient.
type librarianMinerServiceClient struct {
	recognizeImageBinary *connect.Client[v1.RecognizeImageBinaryRequest, v1.RecognizeImageBinaryResponse]
	recognizeImageURL    *connect.Client[v1.RecognizeImageURLRequest, v1.RecognizeImageURLResponse]
}

// RecognizeImageBinary calls librarian.miner.v1.LibrarianMinerService.RecognizeImageBinary.
func (c *librarianMinerServiceClient) RecognizeImageBinary(ctx context.Context) *connect.ClientStreamForClient[v1.RecognizeImageBinaryRequest, v1.RecognizeImageBinaryResponse] {
	return c.recognizeImageBinary.CallClientStream(ctx)
}

// RecognizeImageURL calls librarian.miner.v1.LibrarianMinerService.RecognizeImageURL.
func (c *librarianMinerServiceClient) RecognizeImageURL(ctx context.Context, req *connect.Request[v1.RecognizeImageURLRequest]) (*connect.Response[v1.RecognizeImageURLResponse], error) {
	return c.recognizeImageURL.CallUnary(ctx, req)
}

// LibrarianMinerServiceHandler is an implementation of the librarian.miner.v1.LibrarianMinerService
// service.
type LibrarianMinerServiceHandler interface {
	RecognizeImageBinary(context.Context, *connect.ClientStream[v1.RecognizeImageBinaryRequest]) (*connect.Response[v1.RecognizeImageBinaryResponse], error)
	RecognizeImageURL(context.Context, *connect.Request[v1.RecognizeImageURLRequest]) (*connect.Response[v1.RecognizeImageURLResponse], error)
}

// NewLibrarianMinerServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLibrarianMinerServiceHandler(svc LibrarianMinerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	librarianMinerServiceMethods := v1.File_librarian_miner_v1_miner_proto.Services().ByName("LibrarianMinerService").Methods()
	librarianMinerServiceRecognizeImageBinaryHandler := connect.NewClientStreamHandler(
		LibrarianMinerServiceRecognizeImageBinaryProcedure,
		svc.RecognizeImageBinary,
		connect.WithSchema(librarianMinerServiceMethods.ByName("RecognizeImageBinary")),
		connect.WithHandlerOptions(opts...),
	)
	librarianMinerServiceRecognizeImageURLHandler := connect.NewUnaryHandler(
		LibrarianMinerServiceRecognizeImageURLProcedure,
		svc.RecognizeImageURL,
		connect.WithSchema(librarianMinerServiceMethods.ByName("RecognizeImageURL")),
		connect.WithHandlerOptions(opts...),
	)
	return "/librarian.miner.v1.LibrarianMinerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LibrarianMinerServiceRecognizeImageBinaryProcedure:
			librarianMinerServiceRecognizeImageBinaryHandler.ServeHTTP(w, r)
		case LibrarianMinerServiceRecognizeImageURLProcedure:
			librarianMinerServiceRecognizeImageURLHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLibrarianMinerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLibrarianMinerServiceHandler struct{}

func (UnimplementedLibrarianMinerServiceHandler) RecognizeImageBinary(context.Context, *connect.ClientStream[v1.RecognizeImageBinaryRequest]) (*connect.Response[v1.RecognizeImageBinaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.miner.v1.LibrarianMinerService.RecognizeImageBinary is not implemented"))
}

func (UnimplementedLibrarianMinerServiceHandler) RecognizeImageURL(context.Context, *connect.Request[v1.RecognizeImageURLRequest]) (*connect.Response[v1.RecognizeImageURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.miner.v1.LibrarianMinerService.RecognizeImageURL is not implemented"))
}
