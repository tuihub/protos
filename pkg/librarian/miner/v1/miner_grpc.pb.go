// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: librarian/miner/v1/miner.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LibrarianMinerService_RecognizeImageBinary_FullMethodName = "/librarian.miner.v1.LibrarianMinerService/RecognizeImageBinary"
	LibrarianMinerService_RecognizeImageURL_FullMethodName    = "/librarian.miner.v1.LibrarianMinerService/RecognizeImageURL"
)

// LibrarianMinerServiceClient is the client API for LibrarianMinerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The main role of Miner is to encapsulate compute-intensive tasks
type LibrarianMinerServiceClient interface {
	RecognizeImageBinary(ctx context.Context, opts ...grpc.CallOption) (LibrarianMinerService_RecognizeImageBinaryClient, error)
	RecognizeImageURL(ctx context.Context, in *RecognizeImageURLRequest, opts ...grpc.CallOption) (*RecognizeImageURLResponse, error)
}

type librarianMinerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibrarianMinerServiceClient(cc grpc.ClientConnInterface) LibrarianMinerServiceClient {
	return &librarianMinerServiceClient{cc}
}

func (c *librarianMinerServiceClient) RecognizeImageBinary(ctx context.Context, opts ...grpc.CallOption) (LibrarianMinerService_RecognizeImageBinaryClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LibrarianMinerService_ServiceDesc.Streams[0], LibrarianMinerService_RecognizeImageBinary_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &librarianMinerServiceRecognizeImageBinaryClient{ClientStream: stream}
	return x, nil
}

type LibrarianMinerService_RecognizeImageBinaryClient interface {
	Send(*RecognizeImageBinaryRequest) error
	CloseAndRecv() (*RecognizeImageBinaryResponse, error)
	grpc.ClientStream
}

type librarianMinerServiceRecognizeImageBinaryClient struct {
	grpc.ClientStream
}

func (x *librarianMinerServiceRecognizeImageBinaryClient) Send(m *RecognizeImageBinaryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianMinerServiceRecognizeImageBinaryClient) CloseAndRecv() (*RecognizeImageBinaryResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RecognizeImageBinaryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianMinerServiceClient) RecognizeImageURL(ctx context.Context, in *RecognizeImageURLRequest, opts ...grpc.CallOption) (*RecognizeImageURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecognizeImageURLResponse)
	err := c.cc.Invoke(ctx, LibrarianMinerService_RecognizeImageURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibrarianMinerServiceServer is the server API for LibrarianMinerService service.
// All implementations must embed UnimplementedLibrarianMinerServiceServer
// for forward compatibility
//
// The main role of Miner is to encapsulate compute-intensive tasks
type LibrarianMinerServiceServer interface {
	RecognizeImageBinary(LibrarianMinerService_RecognizeImageBinaryServer) error
	RecognizeImageURL(context.Context, *RecognizeImageURLRequest) (*RecognizeImageURLResponse, error)
	mustEmbedUnimplementedLibrarianMinerServiceServer()
}

// UnimplementedLibrarianMinerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLibrarianMinerServiceServer struct {
}

func (UnimplementedLibrarianMinerServiceServer) RecognizeImageBinary(LibrarianMinerService_RecognizeImageBinaryServer) error {
	return status.Errorf(codes.Unimplemented, "method RecognizeImageBinary not implemented")
}
func (UnimplementedLibrarianMinerServiceServer) RecognizeImageURL(context.Context, *RecognizeImageURLRequest) (*RecognizeImageURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecognizeImageURL not implemented")
}
func (UnimplementedLibrarianMinerServiceServer) mustEmbedUnimplementedLibrarianMinerServiceServer() {}

// UnsafeLibrarianMinerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibrarianMinerServiceServer will
// result in compilation errors.
type UnsafeLibrarianMinerServiceServer interface {
	mustEmbedUnimplementedLibrarianMinerServiceServer()
}

func RegisterLibrarianMinerServiceServer(s grpc.ServiceRegistrar, srv LibrarianMinerServiceServer) {
	s.RegisterService(&LibrarianMinerService_ServiceDesc, srv)
}

func _LibrarianMinerService_RecognizeImageBinary_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianMinerServiceServer).RecognizeImageBinary(&librarianMinerServiceRecognizeImageBinaryServer{ServerStream: stream})
}

type LibrarianMinerService_RecognizeImageBinaryServer interface {
	SendAndClose(*RecognizeImageBinaryResponse) error
	Recv() (*RecognizeImageBinaryRequest, error)
	grpc.ServerStream
}

type librarianMinerServiceRecognizeImageBinaryServer struct {
	grpc.ServerStream
}

func (x *librarianMinerServiceRecognizeImageBinaryServer) SendAndClose(m *RecognizeImageBinaryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianMinerServiceRecognizeImageBinaryServer) Recv() (*RecognizeImageBinaryRequest, error) {
	m := new(RecognizeImageBinaryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianMinerService_RecognizeImageURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizeImageURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianMinerServiceServer).RecognizeImageURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianMinerService_RecognizeImageURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianMinerServiceServer).RecognizeImageURL(ctx, req.(*RecognizeImageURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibrarianMinerService_ServiceDesc is the grpc.ServiceDesc for LibrarianMinerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibrarianMinerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "librarian.miner.v1.LibrarianMinerService",
	HandlerType: (*LibrarianMinerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecognizeImageURL",
			Handler:    _LibrarianMinerService_RecognizeImageURL_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecognizeImageBinary",
			Handler:       _LibrarianMinerService_RecognizeImageBinary_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "librarian/miner/v1/miner.proto",
}
