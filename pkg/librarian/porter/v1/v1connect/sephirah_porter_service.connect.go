// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: librarian/porter/v1/sephirah_porter_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tuihub/protos/pkg/librarian/porter/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LibrarianSephirahPorterServiceName is the fully-qualified name of the
	// LibrarianSephirahPorterService service.
	LibrarianSephirahPorterServiceName = "librarian.porter.v1.LibrarianSephirahPorterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LibrarianSephirahPorterServiceRefreshTokenProcedure is the fully-qualified name of the
	// LibrarianSephirahPorterService's RefreshToken RPC.
	LibrarianSephirahPorterServiceRefreshTokenProcedure = "/librarian.porter.v1.LibrarianSephirahPorterService/RefreshToken"
	// LibrarianSephirahPorterServiceAcquireUserTokenProcedure is the fully-qualified name of the
	// LibrarianSephirahPorterService's AcquireUserToken RPC.
	LibrarianSephirahPorterServiceAcquireUserTokenProcedure = "/librarian.porter.v1.LibrarianSephirahPorterService/AcquireUserToken"
	// LibrarianSephirahPorterServiceGetNotifyTargetItemsProcedure is the fully-qualified name of the
	// LibrarianSephirahPorterService's GetNotifyTargetItems RPC.
	LibrarianSephirahPorterServiceGetNotifyTargetItemsProcedure = "/librarian.porter.v1.LibrarianSephirahPorterService/GetNotifyTargetItems"
	// LibrarianSephirahPorterServiceUpsertFeedProcedure is the fully-qualified name of the
	// LibrarianSephirahPorterService's UpsertFeed RPC.
	LibrarianSephirahPorterServiceUpsertFeedProcedure = "/librarian.porter.v1.LibrarianSephirahPorterService/UpsertFeed"
	// LibrarianSephirahPorterServiceGetFeedProcedure is the fully-qualified name of the
	// LibrarianSephirahPorterService's GetFeed RPC.
	LibrarianSephirahPorterServiceGetFeedProcedure = "/librarian.porter.v1.LibrarianSephirahPorterService/GetFeed"
)

// LibrarianSephirahPorterServiceClient is a client for the
// librarian.porter.v1.LibrarianSephirahPorterService service.
type LibrarianSephirahPorterServiceClient interface {
	// `Tiphereth` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(context.Context, *v1.RefreshTokenRequest) (*v1.RefreshTokenResponse, error)
	// `Tiphereth` `Porter` Obtain access_token of a specific user after user authorization.
	// This token can be used to perform actions on behalf of the user.
	AcquireUserToken(context.Context, *v1.AcquireUserTokenRequest) (*v1.AcquireUserTokenResponse, error)
	// `Netzach` `Porter`
	GetNotifyTargetItems(context.Context, *v1.GetNotifyTargetItemsRequest) (*v1.GetNotifyTargetItemsResponse, error)
	// `Yesod` `Porter`
	UpsertFeed(context.Context, *v1.UpsertFeedRequest) (*v1.UpsertFeedResponse, error)
	// `Yesod` `Porter`
	GetFeed(context.Context, *v1.GetFeedRequest) (*v1.GetFeedResponse, error)
}

// NewLibrarianSephirahPorterServiceClient constructs a client for the
// librarian.porter.v1.LibrarianSephirahPorterService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLibrarianSephirahPorterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LibrarianSephirahPorterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	librarianSephirahPorterServiceMethods := v1.File_librarian_porter_v1_sephirah_porter_service_proto.Services().ByName("LibrarianSephirahPorterService").Methods()
	return &librarianSephirahPorterServiceClient{
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+LibrarianSephirahPorterServiceRefreshTokenProcedure,
			connect.WithSchema(librarianSephirahPorterServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		acquireUserToken: connect.NewClient[v1.AcquireUserTokenRequest, v1.AcquireUserTokenResponse](
			httpClient,
			baseURL+LibrarianSephirahPorterServiceAcquireUserTokenProcedure,
			connect.WithSchema(librarianSephirahPorterServiceMethods.ByName("AcquireUserToken")),
			connect.WithClientOptions(opts...),
		),
		getNotifyTargetItems: connect.NewClient[v1.GetNotifyTargetItemsRequest, v1.GetNotifyTargetItemsResponse](
			httpClient,
			baseURL+LibrarianSephirahPorterServiceGetNotifyTargetItemsProcedure,
			connect.WithSchema(librarianSephirahPorterServiceMethods.ByName("GetNotifyTargetItems")),
			connect.WithClientOptions(opts...),
		),
		upsertFeed: connect.NewClient[v1.UpsertFeedRequest, v1.UpsertFeedResponse](
			httpClient,
			baseURL+LibrarianSephirahPorterServiceUpsertFeedProcedure,
			connect.WithSchema(librarianSephirahPorterServiceMethods.ByName("UpsertFeed")),
			connect.WithClientOptions(opts...),
		),
		getFeed: connect.NewClient[v1.GetFeedRequest, v1.GetFeedResponse](
			httpClient,
			baseURL+LibrarianSephirahPorterServiceGetFeedProcedure,
			connect.WithSchema(librarianSephirahPorterServiceMethods.ByName("GetFeed")),
			connect.WithClientOptions(opts...),
		),
	}
}

// librarianSephirahPorterServiceClient implements LibrarianSephirahPorterServiceClient.
type librarianSephirahPorterServiceClient struct {
	refreshToken         *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
	acquireUserToken     *connect.Client[v1.AcquireUserTokenRequest, v1.AcquireUserTokenResponse]
	getNotifyTargetItems *connect.Client[v1.GetNotifyTargetItemsRequest, v1.GetNotifyTargetItemsResponse]
	upsertFeed           *connect.Client[v1.UpsertFeedRequest, v1.UpsertFeedResponse]
	getFeed              *connect.Client[v1.GetFeedRequest, v1.GetFeedResponse]
}

// RefreshToken calls librarian.porter.v1.LibrarianSephirahPorterService.RefreshToken.
func (c *librarianSephirahPorterServiceClient) RefreshToken(ctx context.Context, req *v1.RefreshTokenRequest) (*v1.RefreshTokenResponse, error) {
	response, err := c.refreshToken.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// AcquireUserToken calls librarian.porter.v1.LibrarianSephirahPorterService.AcquireUserToken.
func (c *librarianSephirahPorterServiceClient) AcquireUserToken(ctx context.Context, req *v1.AcquireUserTokenRequest) (*v1.AcquireUserTokenResponse, error) {
	response, err := c.acquireUserToken.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetNotifyTargetItems calls
// librarian.porter.v1.LibrarianSephirahPorterService.GetNotifyTargetItems.
func (c *librarianSephirahPorterServiceClient) GetNotifyTargetItems(ctx context.Context, req *v1.GetNotifyTargetItemsRequest) (*v1.GetNotifyTargetItemsResponse, error) {
	response, err := c.getNotifyTargetItems.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// UpsertFeed calls librarian.porter.v1.LibrarianSephirahPorterService.UpsertFeed.
func (c *librarianSephirahPorterServiceClient) UpsertFeed(ctx context.Context, req *v1.UpsertFeedRequest) (*v1.UpsertFeedResponse, error) {
	response, err := c.upsertFeed.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// GetFeed calls librarian.porter.v1.LibrarianSephirahPorterService.GetFeed.
func (c *librarianSephirahPorterServiceClient) GetFeed(ctx context.Context, req *v1.GetFeedRequest) (*v1.GetFeedResponse, error) {
	response, err := c.getFeed.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// LibrarianSephirahPorterServiceHandler is an implementation of the
// librarian.porter.v1.LibrarianSephirahPorterService service.
type LibrarianSephirahPorterServiceHandler interface {
	// `Tiphereth` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(context.Context, *v1.RefreshTokenRequest) (*v1.RefreshTokenResponse, error)
	// `Tiphereth` `Porter` Obtain access_token of a specific user after user authorization.
	// This token can be used to perform actions on behalf of the user.
	AcquireUserToken(context.Context, *v1.AcquireUserTokenRequest) (*v1.AcquireUserTokenResponse, error)
	// `Netzach` `Porter`
	GetNotifyTargetItems(context.Context, *v1.GetNotifyTargetItemsRequest) (*v1.GetNotifyTargetItemsResponse, error)
	// `Yesod` `Porter`
	UpsertFeed(context.Context, *v1.UpsertFeedRequest) (*v1.UpsertFeedResponse, error)
	// `Yesod` `Porter`
	GetFeed(context.Context, *v1.GetFeedRequest) (*v1.GetFeedResponse, error)
}

// NewLibrarianSephirahPorterServiceHandler builds an HTTP handler from the service implementation.
// It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLibrarianSephirahPorterServiceHandler(svc LibrarianSephirahPorterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	librarianSephirahPorterServiceMethods := v1.File_librarian_porter_v1_sephirah_porter_service_proto.Services().ByName("LibrarianSephirahPorterService").Methods()
	librarianSephirahPorterServiceRefreshTokenHandler := connect.NewUnaryHandlerSimple(
		LibrarianSephirahPorterServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(librarianSephirahPorterServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahPorterServiceAcquireUserTokenHandler := connect.NewUnaryHandlerSimple(
		LibrarianSephirahPorterServiceAcquireUserTokenProcedure,
		svc.AcquireUserToken,
		connect.WithSchema(librarianSephirahPorterServiceMethods.ByName("AcquireUserToken")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahPorterServiceGetNotifyTargetItemsHandler := connect.NewUnaryHandlerSimple(
		LibrarianSephirahPorterServiceGetNotifyTargetItemsProcedure,
		svc.GetNotifyTargetItems,
		connect.WithSchema(librarianSephirahPorterServiceMethods.ByName("GetNotifyTargetItems")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahPorterServiceUpsertFeedHandler := connect.NewUnaryHandlerSimple(
		LibrarianSephirahPorterServiceUpsertFeedProcedure,
		svc.UpsertFeed,
		connect.WithSchema(librarianSephirahPorterServiceMethods.ByName("UpsertFeed")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahPorterServiceGetFeedHandler := connect.NewUnaryHandlerSimple(
		LibrarianSephirahPorterServiceGetFeedProcedure,
		svc.GetFeed,
		connect.WithSchema(librarianSephirahPorterServiceMethods.ByName("GetFeed")),
		connect.WithHandlerOptions(opts...),
	)
	return "/librarian.porter.v1.LibrarianSephirahPorterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LibrarianSephirahPorterServiceRefreshTokenProcedure:
			librarianSephirahPorterServiceRefreshTokenHandler.ServeHTTP(w, r)
		case LibrarianSephirahPorterServiceAcquireUserTokenProcedure:
			librarianSephirahPorterServiceAcquireUserTokenHandler.ServeHTTP(w, r)
		case LibrarianSephirahPorterServiceGetNotifyTargetItemsProcedure:
			librarianSephirahPorterServiceGetNotifyTargetItemsHandler.ServeHTTP(w, r)
		case LibrarianSephirahPorterServiceUpsertFeedProcedure:
			librarianSephirahPorterServiceUpsertFeedHandler.ServeHTTP(w, r)
		case LibrarianSephirahPorterServiceGetFeedProcedure:
			librarianSephirahPorterServiceGetFeedHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLibrarianSephirahPorterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLibrarianSephirahPorterServiceHandler struct{}

func (UnimplementedLibrarianSephirahPorterServiceHandler) RefreshToken(context.Context, *v1.RefreshTokenRequest) (*v1.RefreshTokenResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianSephirahPorterService.RefreshToken is not implemented"))
}

func (UnimplementedLibrarianSephirahPorterServiceHandler) AcquireUserToken(context.Context, *v1.AcquireUserTokenRequest) (*v1.AcquireUserTokenResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianSephirahPorterService.AcquireUserToken is not implemented"))
}

func (UnimplementedLibrarianSephirahPorterServiceHandler) GetNotifyTargetItems(context.Context, *v1.GetNotifyTargetItemsRequest) (*v1.GetNotifyTargetItemsResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianSephirahPorterService.GetNotifyTargetItems is not implemented"))
}

func (UnimplementedLibrarianSephirahPorterServiceHandler) UpsertFeed(context.Context, *v1.UpsertFeedRequest) (*v1.UpsertFeedResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianSephirahPorterService.UpsertFeed is not implemented"))
}

func (UnimplementedLibrarianSephirahPorterServiceHandler) GetFeed(context.Context, *v1.GetFeedRequest) (*v1.GetFeedResponse, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianSephirahPorterService.GetFeed is not implemented"))
}
