// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: librarian/porter/v1/porter_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tuihub/protos/pkg/librarian/porter/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LibrarianPorterServiceName is the fully-qualified name of the LibrarianPorterService service.
	LibrarianPorterServiceName = "librarian.porter.v1.LibrarianPorterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LibrarianPorterServiceGetPorterInformationProcedure is the fully-qualified name of the
	// LibrarianPorterService's GetPorterInformation RPC.
	LibrarianPorterServiceGetPorterInformationProcedure = "/librarian.porter.v1.LibrarianPorterService/GetPorterInformation"
	// LibrarianPorterServiceEnablePorterProcedure is the fully-qualified name of the
	// LibrarianPorterService's EnablePorter RPC.
	LibrarianPorterServiceEnablePorterProcedure = "/librarian.porter.v1.LibrarianPorterService/EnablePorter"
	// LibrarianPorterServiceEnableContextProcedure is the fully-qualified name of the
	// LibrarianPorterService's EnableContext RPC.
	LibrarianPorterServiceEnableContextProcedure = "/librarian.porter.v1.LibrarianPorterService/EnableContext"
	// LibrarianPorterServiceDisableContextProcedure is the fully-qualified name of the
	// LibrarianPorterService's DisableContext RPC.
	LibrarianPorterServiceDisableContextProcedure = "/librarian.porter.v1.LibrarianPorterService/DisableContext"
	// LibrarianPorterServiceGetAccountProcedure is the fully-qualified name of the
	// LibrarianPorterService's GetAccount RPC.
	LibrarianPorterServiceGetAccountProcedure = "/librarian.porter.v1.LibrarianPorterService/GetAccount"
	// LibrarianPorterServiceDetectAppInfoProcedure is the fully-qualified name of the
	// LibrarianPorterService's DetectAppInfo RPC.
	LibrarianPorterServiceDetectAppInfoProcedure = "/librarian.porter.v1.LibrarianPorterService/DetectAppInfo"
	// LibrarianPorterServiceSearchAppInfoProcedure is the fully-qualified name of the
	// LibrarianPorterService's SearchAppInfo RPC.
	LibrarianPorterServiceSearchAppInfoProcedure = "/librarian.porter.v1.LibrarianPorterService/SearchAppInfo"
	// LibrarianPorterServiceGetAppInfoProcedure is the fully-qualified name of the
	// LibrarianPorterService's GetAppInfo RPC.
	LibrarianPorterServiceGetAppInfoProcedure = "/librarian.porter.v1.LibrarianPorterService/GetAppInfo"
	// LibrarianPorterServiceParseRawAppInfoProcedure is the fully-qualified name of the
	// LibrarianPorterService's ParseRawAppInfo RPC.
	LibrarianPorterServiceParseRawAppInfoProcedure = "/librarian.porter.v1.LibrarianPorterService/ParseRawAppInfo"
	// LibrarianPorterServicePullFeedProcedure is the fully-qualified name of the
	// LibrarianPorterService's PullFeed RPC.
	LibrarianPorterServicePullFeedProcedure = "/librarian.porter.v1.LibrarianPorterService/PullFeed"
	// LibrarianPorterServiceExecFeedItemActionProcedure is the fully-qualified name of the
	// LibrarianPorterService's ExecFeedItemAction RPC.
	LibrarianPorterServiceExecFeedItemActionProcedure = "/librarian.porter.v1.LibrarianPorterService/ExecFeedItemAction"
	// LibrarianPorterServiceEnableFeedSetterProcedure is the fully-qualified name of the
	// LibrarianPorterService's EnableFeedSetter RPC.
	LibrarianPorterServiceEnableFeedSetterProcedure = "/librarian.porter.v1.LibrarianPorterService/EnableFeedSetter"
	// LibrarianPorterServiceDisableFeedSetterProcedure is the fully-qualified name of the
	// LibrarianPorterService's DisableFeedSetter RPC.
	LibrarianPorterServiceDisableFeedSetterProcedure = "/librarian.porter.v1.LibrarianPorterService/DisableFeedSetter"
	// LibrarianPorterServiceEnableFeedGetterProcedure is the fully-qualified name of the
	// LibrarianPorterService's EnableFeedGetter RPC.
	LibrarianPorterServiceEnableFeedGetterProcedure = "/librarian.porter.v1.LibrarianPorterService/EnableFeedGetter"
	// LibrarianPorterServiceDisableFeedGetterProcedure is the fully-qualified name of the
	// LibrarianPorterService's DisableFeedGetter RPC.
	LibrarianPorterServiceDisableFeedGetterProcedure = "/librarian.porter.v1.LibrarianPorterService/DisableFeedGetter"
	// LibrarianPorterServicePushFeedItemsProcedure is the fully-qualified name of the
	// LibrarianPorterService's PushFeedItems RPC.
	LibrarianPorterServicePushFeedItemsProcedure = "/librarian.porter.v1.LibrarianPorterService/PushFeedItems"
)

// LibrarianPorterServiceClient is a client for the librarian.porter.v1.LibrarianPorterService
// service.
type LibrarianPorterServiceClient interface {
	GetPorterInformation(context.Context, *connect.Request[v1.GetPorterInformationRequest]) (*connect.Response[v1.GetPorterInformationResponse], error)
	// Used to enable porter and heartbeat.
	EnablePorter(context.Context, *connect.Request[v1.EnablePorterRequest]) (*connect.Response[v1.EnablePorterResponse], error)
	EnableContext(context.Context, *connect.Request[v1.EnableContextRequest]) (*connect.Response[v1.EnableContextResponse], error)
	DisableContext(context.Context, *connect.Request[v1.DisableContextRequest]) (*connect.Response[v1.DisableContextResponse], error)
	// `Tiphereth`
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error)
	// `Gebura`
	DetectAppInfo(context.Context, *connect.Request[v1.DetectAppInfoRequest]) (*connect.Response[v1.DetectAppInfoResponse], error)
	// `Gebura`
	SearchAppInfo(context.Context, *connect.Request[v1.SearchAppInfoRequest]) (*connect.Response[v1.SearchAppInfoResponse], error)
	// `Gebura` Get app info from source.
	GetAppInfo(context.Context, *connect.Request[v1.GetAppInfoRequest]) (*connect.Response[v1.GetAppInfoResponse], error)
	// `Gebura` Parse app info from json.
	ParseRawAppInfo(context.Context, *connect.Request[v1.ParseRawAppInfoRequest]) (*connect.Response[v1.ParseRawAppInfoResponse], error)
	// `Yesod`
	PullFeed(context.Context, *connect.Request[v1.PullFeedRequest]) (*connect.Response[v1.PullFeedResponse], error)
	// `Yesod`
	ExecFeedItemAction(context.Context, *connect.Request[v1.ExecFeedItemActionRequest]) (*connect.Response[v1.ExecFeedItemActionResponse], error)
	// `Yesod` Enabled Setter can add items to feed through `LibrarianSephirahService.PUpsertFeed`
	// without extra permissions.
	EnableFeedSetter(context.Context, *connect.Request[v1.EnableFeedSetterRequest]) (*connect.Response[v1.EnableFeedSetterResponse], error)
	// `Yesod`
	DisableFeedSetter(context.Context, *connect.Request[v1.DisableFeedSetterRequest]) (*connect.Response[v1.DisableFeedSetterResponse], error)
	// `Yesod` Enabled Getter can get items from feed through `LibrarianSephirahService.PGetFeed`
	// without extra permissions.
	EnableFeedGetter(context.Context, *connect.Request[v1.EnableFeedGetterRequest]) (*connect.Response[v1.EnableFeedGetterResponse], error)
	// `Yesod`
	DisableFeedGetter(context.Context, *connect.Request[v1.DisableFeedGetterRequest]) (*connect.Response[v1.DisableFeedGetterResponse], error)
	// `Netzach`
	PushFeedItems(context.Context, *connect.Request[v1.PushFeedItemsRequest]) (*connect.Response[v1.PushFeedItemsResponse], error)
}

// NewLibrarianPorterServiceClient constructs a client for the
// librarian.porter.v1.LibrarianPorterService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLibrarianPorterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LibrarianPorterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	librarianPorterServiceMethods := v1.File_librarian_porter_v1_porter_service_proto.Services().ByName("LibrarianPorterService").Methods()
	return &librarianPorterServiceClient{
		getPorterInformation: connect.NewClient[v1.GetPorterInformationRequest, v1.GetPorterInformationResponse](
			httpClient,
			baseURL+LibrarianPorterServiceGetPorterInformationProcedure,
			connect.WithSchema(librarianPorterServiceMethods.ByName("GetPorterInformation")),
			connect.WithClientOptions(opts...),
		),
		enablePorter: connect.NewClient[v1.EnablePorterRequest, v1.EnablePorterResponse](
			httpClient,
			baseURL+LibrarianPorterServiceEnablePorterProcedure,
			connect.WithSchema(librarianPorterServiceMethods.ByName("EnablePorter")),
			connect.WithClientOptions(opts...),
		),
		enableContext: connect.NewClient[v1.EnableContextRequest, v1.EnableContextResponse](
			httpClient,
			baseURL+LibrarianPorterServiceEnableContextProcedure,
			connect.WithSchema(librarianPorterServiceMethods.ByName("EnableContext")),
			connect.WithClientOptions(opts...),
		),
		disableContext: connect.NewClient[v1.DisableContextRequest, v1.DisableContextResponse](
			httpClient,
			baseURL+LibrarianPorterServiceDisableContextProcedure,
			connect.WithSchema(librarianPorterServiceMethods.ByName("DisableContext")),
			connect.WithClientOptions(opts...),
		),
		getAccount: connect.NewClient[v1.GetAccountRequest, v1.GetAccountResponse](
			httpClient,
			baseURL+LibrarianPorterServiceGetAccountProcedure,
			connect.WithSchema(librarianPorterServiceMethods.ByName("GetAccount")),
			connect.WithClientOptions(opts...),
		),
		detectAppInfo: connect.NewClient[v1.DetectAppInfoRequest, v1.DetectAppInfoResponse](
			httpClient,
			baseURL+LibrarianPorterServiceDetectAppInfoProcedure,
			connect.WithSchema(librarianPorterServiceMethods.ByName("DetectAppInfo")),
			connect.WithClientOptions(opts...),
		),
		searchAppInfo: connect.NewClient[v1.SearchAppInfoRequest, v1.SearchAppInfoResponse](
			httpClient,
			baseURL+LibrarianPorterServiceSearchAppInfoProcedure,
			connect.WithSchema(librarianPorterServiceMethods.ByName("SearchAppInfo")),
			connect.WithClientOptions(opts...),
		),
		getAppInfo: connect.NewClient[v1.GetAppInfoRequest, v1.GetAppInfoResponse](
			httpClient,
			baseURL+LibrarianPorterServiceGetAppInfoProcedure,
			connect.WithSchema(librarianPorterServiceMethods.ByName("GetAppInfo")),
			connect.WithClientOptions(opts...),
		),
		parseRawAppInfo: connect.NewClient[v1.ParseRawAppInfoRequest, v1.ParseRawAppInfoResponse](
			httpClient,
			baseURL+LibrarianPorterServiceParseRawAppInfoProcedure,
			connect.WithSchema(librarianPorterServiceMethods.ByName("ParseRawAppInfo")),
			connect.WithClientOptions(opts...),
		),
		pullFeed: connect.NewClient[v1.PullFeedRequest, v1.PullFeedResponse](
			httpClient,
			baseURL+LibrarianPorterServicePullFeedProcedure,
			connect.WithSchema(librarianPorterServiceMethods.ByName("PullFeed")),
			connect.WithClientOptions(opts...),
		),
		execFeedItemAction: connect.NewClient[v1.ExecFeedItemActionRequest, v1.ExecFeedItemActionResponse](
			httpClient,
			baseURL+LibrarianPorterServiceExecFeedItemActionProcedure,
			connect.WithSchema(librarianPorterServiceMethods.ByName("ExecFeedItemAction")),
			connect.WithClientOptions(opts...),
		),
		enableFeedSetter: connect.NewClient[v1.EnableFeedSetterRequest, v1.EnableFeedSetterResponse](
			httpClient,
			baseURL+LibrarianPorterServiceEnableFeedSetterProcedure,
			connect.WithSchema(librarianPorterServiceMethods.ByName("EnableFeedSetter")),
			connect.WithClientOptions(opts...),
		),
		disableFeedSetter: connect.NewClient[v1.DisableFeedSetterRequest, v1.DisableFeedSetterResponse](
			httpClient,
			baseURL+LibrarianPorterServiceDisableFeedSetterProcedure,
			connect.WithSchema(librarianPorterServiceMethods.ByName("DisableFeedSetter")),
			connect.WithClientOptions(opts...),
		),
		enableFeedGetter: connect.NewClient[v1.EnableFeedGetterRequest, v1.EnableFeedGetterResponse](
			httpClient,
			baseURL+LibrarianPorterServiceEnableFeedGetterProcedure,
			connect.WithSchema(librarianPorterServiceMethods.ByName("EnableFeedGetter")),
			connect.WithClientOptions(opts...),
		),
		disableFeedGetter: connect.NewClient[v1.DisableFeedGetterRequest, v1.DisableFeedGetterResponse](
			httpClient,
			baseURL+LibrarianPorterServiceDisableFeedGetterProcedure,
			connect.WithSchema(librarianPorterServiceMethods.ByName("DisableFeedGetter")),
			connect.WithClientOptions(opts...),
		),
		pushFeedItems: connect.NewClient[v1.PushFeedItemsRequest, v1.PushFeedItemsResponse](
			httpClient,
			baseURL+LibrarianPorterServicePushFeedItemsProcedure,
			connect.WithSchema(librarianPorterServiceMethods.ByName("PushFeedItems")),
			connect.WithClientOptions(opts...),
		),
	}
}

// librarianPorterServiceClient implements LibrarianPorterServiceClient.
type librarianPorterServiceClient struct {
	getPorterInformation *connect.Client[v1.GetPorterInformationRequest, v1.GetPorterInformationResponse]
	enablePorter         *connect.Client[v1.EnablePorterRequest, v1.EnablePorterResponse]
	enableContext        *connect.Client[v1.EnableContextRequest, v1.EnableContextResponse]
	disableContext       *connect.Client[v1.DisableContextRequest, v1.DisableContextResponse]
	getAccount           *connect.Client[v1.GetAccountRequest, v1.GetAccountResponse]
	detectAppInfo        *connect.Client[v1.DetectAppInfoRequest, v1.DetectAppInfoResponse]
	searchAppInfo        *connect.Client[v1.SearchAppInfoRequest, v1.SearchAppInfoResponse]
	getAppInfo           *connect.Client[v1.GetAppInfoRequest, v1.GetAppInfoResponse]
	parseRawAppInfo      *connect.Client[v1.ParseRawAppInfoRequest, v1.ParseRawAppInfoResponse]
	pullFeed             *connect.Client[v1.PullFeedRequest, v1.PullFeedResponse]
	execFeedItemAction   *connect.Client[v1.ExecFeedItemActionRequest, v1.ExecFeedItemActionResponse]
	enableFeedSetter     *connect.Client[v1.EnableFeedSetterRequest, v1.EnableFeedSetterResponse]
	disableFeedSetter    *connect.Client[v1.DisableFeedSetterRequest, v1.DisableFeedSetterResponse]
	enableFeedGetter     *connect.Client[v1.EnableFeedGetterRequest, v1.EnableFeedGetterResponse]
	disableFeedGetter    *connect.Client[v1.DisableFeedGetterRequest, v1.DisableFeedGetterResponse]
	pushFeedItems        *connect.Client[v1.PushFeedItemsRequest, v1.PushFeedItemsResponse]
}

// GetPorterInformation calls librarian.porter.v1.LibrarianPorterService.GetPorterInformation.
func (c *librarianPorterServiceClient) GetPorterInformation(ctx context.Context, req *connect.Request[v1.GetPorterInformationRequest]) (*connect.Response[v1.GetPorterInformationResponse], error) {
	return c.getPorterInformation.CallUnary(ctx, req)
}

// EnablePorter calls librarian.porter.v1.LibrarianPorterService.EnablePorter.
func (c *librarianPorterServiceClient) EnablePorter(ctx context.Context, req *connect.Request[v1.EnablePorterRequest]) (*connect.Response[v1.EnablePorterResponse], error) {
	return c.enablePorter.CallUnary(ctx, req)
}

// EnableContext calls librarian.porter.v1.LibrarianPorterService.EnableContext.
func (c *librarianPorterServiceClient) EnableContext(ctx context.Context, req *connect.Request[v1.EnableContextRequest]) (*connect.Response[v1.EnableContextResponse], error) {
	return c.enableContext.CallUnary(ctx, req)
}

// DisableContext calls librarian.porter.v1.LibrarianPorterService.DisableContext.
func (c *librarianPorterServiceClient) DisableContext(ctx context.Context, req *connect.Request[v1.DisableContextRequest]) (*connect.Response[v1.DisableContextResponse], error) {
	return c.disableContext.CallUnary(ctx, req)
}

// GetAccount calls librarian.porter.v1.LibrarianPorterService.GetAccount.
func (c *librarianPorterServiceClient) GetAccount(ctx context.Context, req *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error) {
	return c.getAccount.CallUnary(ctx, req)
}

// DetectAppInfo calls librarian.porter.v1.LibrarianPorterService.DetectAppInfo.
func (c *librarianPorterServiceClient) DetectAppInfo(ctx context.Context, req *connect.Request[v1.DetectAppInfoRequest]) (*connect.Response[v1.DetectAppInfoResponse], error) {
	return c.detectAppInfo.CallUnary(ctx, req)
}

// SearchAppInfo calls librarian.porter.v1.LibrarianPorterService.SearchAppInfo.
func (c *librarianPorterServiceClient) SearchAppInfo(ctx context.Context, req *connect.Request[v1.SearchAppInfoRequest]) (*connect.Response[v1.SearchAppInfoResponse], error) {
	return c.searchAppInfo.CallUnary(ctx, req)
}

// GetAppInfo calls librarian.porter.v1.LibrarianPorterService.GetAppInfo.
func (c *librarianPorterServiceClient) GetAppInfo(ctx context.Context, req *connect.Request[v1.GetAppInfoRequest]) (*connect.Response[v1.GetAppInfoResponse], error) {
	return c.getAppInfo.CallUnary(ctx, req)
}

// ParseRawAppInfo calls librarian.porter.v1.LibrarianPorterService.ParseRawAppInfo.
func (c *librarianPorterServiceClient) ParseRawAppInfo(ctx context.Context, req *connect.Request[v1.ParseRawAppInfoRequest]) (*connect.Response[v1.ParseRawAppInfoResponse], error) {
	return c.parseRawAppInfo.CallUnary(ctx, req)
}

// PullFeed calls librarian.porter.v1.LibrarianPorterService.PullFeed.
func (c *librarianPorterServiceClient) PullFeed(ctx context.Context, req *connect.Request[v1.PullFeedRequest]) (*connect.Response[v1.PullFeedResponse], error) {
	return c.pullFeed.CallUnary(ctx, req)
}

// ExecFeedItemAction calls librarian.porter.v1.LibrarianPorterService.ExecFeedItemAction.
func (c *librarianPorterServiceClient) ExecFeedItemAction(ctx context.Context, req *connect.Request[v1.ExecFeedItemActionRequest]) (*connect.Response[v1.ExecFeedItemActionResponse], error) {
	return c.execFeedItemAction.CallUnary(ctx, req)
}

// EnableFeedSetter calls librarian.porter.v1.LibrarianPorterService.EnableFeedSetter.
func (c *librarianPorterServiceClient) EnableFeedSetter(ctx context.Context, req *connect.Request[v1.EnableFeedSetterRequest]) (*connect.Response[v1.EnableFeedSetterResponse], error) {
	return c.enableFeedSetter.CallUnary(ctx, req)
}

// DisableFeedSetter calls librarian.porter.v1.LibrarianPorterService.DisableFeedSetter.
func (c *librarianPorterServiceClient) DisableFeedSetter(ctx context.Context, req *connect.Request[v1.DisableFeedSetterRequest]) (*connect.Response[v1.DisableFeedSetterResponse], error) {
	return c.disableFeedSetter.CallUnary(ctx, req)
}

// EnableFeedGetter calls librarian.porter.v1.LibrarianPorterService.EnableFeedGetter.
func (c *librarianPorterServiceClient) EnableFeedGetter(ctx context.Context, req *connect.Request[v1.EnableFeedGetterRequest]) (*connect.Response[v1.EnableFeedGetterResponse], error) {
	return c.enableFeedGetter.CallUnary(ctx, req)
}

// DisableFeedGetter calls librarian.porter.v1.LibrarianPorterService.DisableFeedGetter.
func (c *librarianPorterServiceClient) DisableFeedGetter(ctx context.Context, req *connect.Request[v1.DisableFeedGetterRequest]) (*connect.Response[v1.DisableFeedGetterResponse], error) {
	return c.disableFeedGetter.CallUnary(ctx, req)
}

// PushFeedItems calls librarian.porter.v1.LibrarianPorterService.PushFeedItems.
func (c *librarianPorterServiceClient) PushFeedItems(ctx context.Context, req *connect.Request[v1.PushFeedItemsRequest]) (*connect.Response[v1.PushFeedItemsResponse], error) {
	return c.pushFeedItems.CallUnary(ctx, req)
}

// LibrarianPorterServiceHandler is an implementation of the
// librarian.porter.v1.LibrarianPorterService service.
type LibrarianPorterServiceHandler interface {
	GetPorterInformation(context.Context, *connect.Request[v1.GetPorterInformationRequest]) (*connect.Response[v1.GetPorterInformationResponse], error)
	// Used to enable porter and heartbeat.
	EnablePorter(context.Context, *connect.Request[v1.EnablePorterRequest]) (*connect.Response[v1.EnablePorterResponse], error)
	EnableContext(context.Context, *connect.Request[v1.EnableContextRequest]) (*connect.Response[v1.EnableContextResponse], error)
	DisableContext(context.Context, *connect.Request[v1.DisableContextRequest]) (*connect.Response[v1.DisableContextResponse], error)
	// `Tiphereth`
	GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error)
	// `Gebura`
	DetectAppInfo(context.Context, *connect.Request[v1.DetectAppInfoRequest]) (*connect.Response[v1.DetectAppInfoResponse], error)
	// `Gebura`
	SearchAppInfo(context.Context, *connect.Request[v1.SearchAppInfoRequest]) (*connect.Response[v1.SearchAppInfoResponse], error)
	// `Gebura` Get app info from source.
	GetAppInfo(context.Context, *connect.Request[v1.GetAppInfoRequest]) (*connect.Response[v1.GetAppInfoResponse], error)
	// `Gebura` Parse app info from json.
	ParseRawAppInfo(context.Context, *connect.Request[v1.ParseRawAppInfoRequest]) (*connect.Response[v1.ParseRawAppInfoResponse], error)
	// `Yesod`
	PullFeed(context.Context, *connect.Request[v1.PullFeedRequest]) (*connect.Response[v1.PullFeedResponse], error)
	// `Yesod`
	ExecFeedItemAction(context.Context, *connect.Request[v1.ExecFeedItemActionRequest]) (*connect.Response[v1.ExecFeedItemActionResponse], error)
	// `Yesod` Enabled Setter can add items to feed through `LibrarianSephirahService.PUpsertFeed`
	// without extra permissions.
	EnableFeedSetter(context.Context, *connect.Request[v1.EnableFeedSetterRequest]) (*connect.Response[v1.EnableFeedSetterResponse], error)
	// `Yesod`
	DisableFeedSetter(context.Context, *connect.Request[v1.DisableFeedSetterRequest]) (*connect.Response[v1.DisableFeedSetterResponse], error)
	// `Yesod` Enabled Getter can get items from feed through `LibrarianSephirahService.PGetFeed`
	// without extra permissions.
	EnableFeedGetter(context.Context, *connect.Request[v1.EnableFeedGetterRequest]) (*connect.Response[v1.EnableFeedGetterResponse], error)
	// `Yesod`
	DisableFeedGetter(context.Context, *connect.Request[v1.DisableFeedGetterRequest]) (*connect.Response[v1.DisableFeedGetterResponse], error)
	// `Netzach`
	PushFeedItems(context.Context, *connect.Request[v1.PushFeedItemsRequest]) (*connect.Response[v1.PushFeedItemsResponse], error)
}

// NewLibrarianPorterServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLibrarianPorterServiceHandler(svc LibrarianPorterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	librarianPorterServiceMethods := v1.File_librarian_porter_v1_porter_service_proto.Services().ByName("LibrarianPorterService").Methods()
	librarianPorterServiceGetPorterInformationHandler := connect.NewUnaryHandler(
		LibrarianPorterServiceGetPorterInformationProcedure,
		svc.GetPorterInformation,
		connect.WithSchema(librarianPorterServiceMethods.ByName("GetPorterInformation")),
		connect.WithHandlerOptions(opts...),
	)
	librarianPorterServiceEnablePorterHandler := connect.NewUnaryHandler(
		LibrarianPorterServiceEnablePorterProcedure,
		svc.EnablePorter,
		connect.WithSchema(librarianPorterServiceMethods.ByName("EnablePorter")),
		connect.WithHandlerOptions(opts...),
	)
	librarianPorterServiceEnableContextHandler := connect.NewUnaryHandler(
		LibrarianPorterServiceEnableContextProcedure,
		svc.EnableContext,
		connect.WithSchema(librarianPorterServiceMethods.ByName("EnableContext")),
		connect.WithHandlerOptions(opts...),
	)
	librarianPorterServiceDisableContextHandler := connect.NewUnaryHandler(
		LibrarianPorterServiceDisableContextProcedure,
		svc.DisableContext,
		connect.WithSchema(librarianPorterServiceMethods.ByName("DisableContext")),
		connect.WithHandlerOptions(opts...),
	)
	librarianPorterServiceGetAccountHandler := connect.NewUnaryHandler(
		LibrarianPorterServiceGetAccountProcedure,
		svc.GetAccount,
		connect.WithSchema(librarianPorterServiceMethods.ByName("GetAccount")),
		connect.WithHandlerOptions(opts...),
	)
	librarianPorterServiceDetectAppInfoHandler := connect.NewUnaryHandler(
		LibrarianPorterServiceDetectAppInfoProcedure,
		svc.DetectAppInfo,
		connect.WithSchema(librarianPorterServiceMethods.ByName("DetectAppInfo")),
		connect.WithHandlerOptions(opts...),
	)
	librarianPorterServiceSearchAppInfoHandler := connect.NewUnaryHandler(
		LibrarianPorterServiceSearchAppInfoProcedure,
		svc.SearchAppInfo,
		connect.WithSchema(librarianPorterServiceMethods.ByName("SearchAppInfo")),
		connect.WithHandlerOptions(opts...),
	)
	librarianPorterServiceGetAppInfoHandler := connect.NewUnaryHandler(
		LibrarianPorterServiceGetAppInfoProcedure,
		svc.GetAppInfo,
		connect.WithSchema(librarianPorterServiceMethods.ByName("GetAppInfo")),
		connect.WithHandlerOptions(opts...),
	)
	librarianPorterServiceParseRawAppInfoHandler := connect.NewUnaryHandler(
		LibrarianPorterServiceParseRawAppInfoProcedure,
		svc.ParseRawAppInfo,
		connect.WithSchema(librarianPorterServiceMethods.ByName("ParseRawAppInfo")),
		connect.WithHandlerOptions(opts...),
	)
	librarianPorterServicePullFeedHandler := connect.NewUnaryHandler(
		LibrarianPorterServicePullFeedProcedure,
		svc.PullFeed,
		connect.WithSchema(librarianPorterServiceMethods.ByName("PullFeed")),
		connect.WithHandlerOptions(opts...),
	)
	librarianPorterServiceExecFeedItemActionHandler := connect.NewUnaryHandler(
		LibrarianPorterServiceExecFeedItemActionProcedure,
		svc.ExecFeedItemAction,
		connect.WithSchema(librarianPorterServiceMethods.ByName("ExecFeedItemAction")),
		connect.WithHandlerOptions(opts...),
	)
	librarianPorterServiceEnableFeedSetterHandler := connect.NewUnaryHandler(
		LibrarianPorterServiceEnableFeedSetterProcedure,
		svc.EnableFeedSetter,
		connect.WithSchema(librarianPorterServiceMethods.ByName("EnableFeedSetter")),
		connect.WithHandlerOptions(opts...),
	)
	librarianPorterServiceDisableFeedSetterHandler := connect.NewUnaryHandler(
		LibrarianPorterServiceDisableFeedSetterProcedure,
		svc.DisableFeedSetter,
		connect.WithSchema(librarianPorterServiceMethods.ByName("DisableFeedSetter")),
		connect.WithHandlerOptions(opts...),
	)
	librarianPorterServiceEnableFeedGetterHandler := connect.NewUnaryHandler(
		LibrarianPorterServiceEnableFeedGetterProcedure,
		svc.EnableFeedGetter,
		connect.WithSchema(librarianPorterServiceMethods.ByName("EnableFeedGetter")),
		connect.WithHandlerOptions(opts...),
	)
	librarianPorterServiceDisableFeedGetterHandler := connect.NewUnaryHandler(
		LibrarianPorterServiceDisableFeedGetterProcedure,
		svc.DisableFeedGetter,
		connect.WithSchema(librarianPorterServiceMethods.ByName("DisableFeedGetter")),
		connect.WithHandlerOptions(opts...),
	)
	librarianPorterServicePushFeedItemsHandler := connect.NewUnaryHandler(
		LibrarianPorterServicePushFeedItemsProcedure,
		svc.PushFeedItems,
		connect.WithSchema(librarianPorterServiceMethods.ByName("PushFeedItems")),
		connect.WithHandlerOptions(opts...),
	)
	return "/librarian.porter.v1.LibrarianPorterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LibrarianPorterServiceGetPorterInformationProcedure:
			librarianPorterServiceGetPorterInformationHandler.ServeHTTP(w, r)
		case LibrarianPorterServiceEnablePorterProcedure:
			librarianPorterServiceEnablePorterHandler.ServeHTTP(w, r)
		case LibrarianPorterServiceEnableContextProcedure:
			librarianPorterServiceEnableContextHandler.ServeHTTP(w, r)
		case LibrarianPorterServiceDisableContextProcedure:
			librarianPorterServiceDisableContextHandler.ServeHTTP(w, r)
		case LibrarianPorterServiceGetAccountProcedure:
			librarianPorterServiceGetAccountHandler.ServeHTTP(w, r)
		case LibrarianPorterServiceDetectAppInfoProcedure:
			librarianPorterServiceDetectAppInfoHandler.ServeHTTP(w, r)
		case LibrarianPorterServiceSearchAppInfoProcedure:
			librarianPorterServiceSearchAppInfoHandler.ServeHTTP(w, r)
		case LibrarianPorterServiceGetAppInfoProcedure:
			librarianPorterServiceGetAppInfoHandler.ServeHTTP(w, r)
		case LibrarianPorterServiceParseRawAppInfoProcedure:
			librarianPorterServiceParseRawAppInfoHandler.ServeHTTP(w, r)
		case LibrarianPorterServicePullFeedProcedure:
			librarianPorterServicePullFeedHandler.ServeHTTP(w, r)
		case LibrarianPorterServiceExecFeedItemActionProcedure:
			librarianPorterServiceExecFeedItemActionHandler.ServeHTTP(w, r)
		case LibrarianPorterServiceEnableFeedSetterProcedure:
			librarianPorterServiceEnableFeedSetterHandler.ServeHTTP(w, r)
		case LibrarianPorterServiceDisableFeedSetterProcedure:
			librarianPorterServiceDisableFeedSetterHandler.ServeHTTP(w, r)
		case LibrarianPorterServiceEnableFeedGetterProcedure:
			librarianPorterServiceEnableFeedGetterHandler.ServeHTTP(w, r)
		case LibrarianPorterServiceDisableFeedGetterProcedure:
			librarianPorterServiceDisableFeedGetterHandler.ServeHTTP(w, r)
		case LibrarianPorterServicePushFeedItemsProcedure:
			librarianPorterServicePushFeedItemsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLibrarianPorterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLibrarianPorterServiceHandler struct{}

func (UnimplementedLibrarianPorterServiceHandler) GetPorterInformation(context.Context, *connect.Request[v1.GetPorterInformationRequest]) (*connect.Response[v1.GetPorterInformationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianPorterService.GetPorterInformation is not implemented"))
}

func (UnimplementedLibrarianPorterServiceHandler) EnablePorter(context.Context, *connect.Request[v1.EnablePorterRequest]) (*connect.Response[v1.EnablePorterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianPorterService.EnablePorter is not implemented"))
}

func (UnimplementedLibrarianPorterServiceHandler) EnableContext(context.Context, *connect.Request[v1.EnableContextRequest]) (*connect.Response[v1.EnableContextResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianPorterService.EnableContext is not implemented"))
}

func (UnimplementedLibrarianPorterServiceHandler) DisableContext(context.Context, *connect.Request[v1.DisableContextRequest]) (*connect.Response[v1.DisableContextResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianPorterService.DisableContext is not implemented"))
}

func (UnimplementedLibrarianPorterServiceHandler) GetAccount(context.Context, *connect.Request[v1.GetAccountRequest]) (*connect.Response[v1.GetAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianPorterService.GetAccount is not implemented"))
}

func (UnimplementedLibrarianPorterServiceHandler) DetectAppInfo(context.Context, *connect.Request[v1.DetectAppInfoRequest]) (*connect.Response[v1.DetectAppInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianPorterService.DetectAppInfo is not implemented"))
}

func (UnimplementedLibrarianPorterServiceHandler) SearchAppInfo(context.Context, *connect.Request[v1.SearchAppInfoRequest]) (*connect.Response[v1.SearchAppInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianPorterService.SearchAppInfo is not implemented"))
}

func (UnimplementedLibrarianPorterServiceHandler) GetAppInfo(context.Context, *connect.Request[v1.GetAppInfoRequest]) (*connect.Response[v1.GetAppInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianPorterService.GetAppInfo is not implemented"))
}

func (UnimplementedLibrarianPorterServiceHandler) ParseRawAppInfo(context.Context, *connect.Request[v1.ParseRawAppInfoRequest]) (*connect.Response[v1.ParseRawAppInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianPorterService.ParseRawAppInfo is not implemented"))
}

func (UnimplementedLibrarianPorterServiceHandler) PullFeed(context.Context, *connect.Request[v1.PullFeedRequest]) (*connect.Response[v1.PullFeedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianPorterService.PullFeed is not implemented"))
}

func (UnimplementedLibrarianPorterServiceHandler) ExecFeedItemAction(context.Context, *connect.Request[v1.ExecFeedItemActionRequest]) (*connect.Response[v1.ExecFeedItemActionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianPorterService.ExecFeedItemAction is not implemented"))
}

func (UnimplementedLibrarianPorterServiceHandler) EnableFeedSetter(context.Context, *connect.Request[v1.EnableFeedSetterRequest]) (*connect.Response[v1.EnableFeedSetterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianPorterService.EnableFeedSetter is not implemented"))
}

func (UnimplementedLibrarianPorterServiceHandler) DisableFeedSetter(context.Context, *connect.Request[v1.DisableFeedSetterRequest]) (*connect.Response[v1.DisableFeedSetterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianPorterService.DisableFeedSetter is not implemented"))
}

func (UnimplementedLibrarianPorterServiceHandler) EnableFeedGetter(context.Context, *connect.Request[v1.EnableFeedGetterRequest]) (*connect.Response[v1.EnableFeedGetterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianPorterService.EnableFeedGetter is not implemented"))
}

func (UnimplementedLibrarianPorterServiceHandler) DisableFeedGetter(context.Context, *connect.Request[v1.DisableFeedGetterRequest]) (*connect.Response[v1.DisableFeedGetterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianPorterService.DisableFeedGetter is not implemented"))
}

func (UnimplementedLibrarianPorterServiceHandler) PushFeedItems(context.Context, *connect.Request[v1.PushFeedItemsRequest]) (*connect.Response[v1.PushFeedItemsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.porter.v1.LibrarianPorterService.PushFeedItems is not implemented"))
}
