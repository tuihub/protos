// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: librarian/porter/v1/porter.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FeedSource int32

const (
	FeedSource_FEED_SOURCE_UNSPECIFIED FeedSource = 0
)

var FeedSource_name = map[int32]string{
	0: "FEED_SOURCE_UNSPECIFIED",
}

var FeedSource_value = map[string]int32{
	"FEED_SOURCE_UNSPECIFIED": 0,
}

func (x FeedSource) String() string {
	return proto.EnumName(FeedSource_name, int32(x))
}

func (FeedSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ae1be1fc373121a9, []int{0}
}

type DBSource int32

const (
	DBSource_DB_SOURCE_UNSPECIFIED DBSource = 0
)

var DBSource_name = map[int32]string{
	0: "DB_SOURCE_UNSPECIFIED",
}

var DBSource_value = map[string]int32{
	"DB_SOURCE_UNSPECIFIED": 0,
}

func (x DBSource) String() string {
	return proto.EnumName(DBSource_name, int32(x))
}

func (DBSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ae1be1fc373121a9, []int{1}
}

type WikiSource int32

const (
	WikiSource_WIKI_SOURCE_UNSPECIFIED WikiSource = 0
)

var WikiSource_name = map[int32]string{
	0: "WIKI_SOURCE_UNSPECIFIED",
}

var WikiSource_value = map[string]int32{
	"WIKI_SOURCE_UNSPECIFIED": 0,
}

func (x WikiSource) String() string {
	return proto.EnumName(WikiSource_name, int32(x))
}

func (WikiSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ae1be1fc373121a9, []int{2}
}

type DataSource int32

const (
	DataSource_DATA_SOURCE_UNSPECIFIED DataSource = 0
)

var DataSource_name = map[int32]string{
	0: "DATA_SOURCE_UNSPECIFIED",
}

var DataSource_value = map[string]int32{
	"DATA_SOURCE_UNSPECIFIED": 0,
}

func (x DataSource) String() string {
	return proto.EnumName(DataSource_name, int32(x))
}

func (DataSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ae1be1fc373121a9, []int{3}
}

type PullFeedRequest struct {
	Source               FeedSource `protobuf:"varint,1,opt,name=source,proto3,enum=librarian.porter.v1.FeedSource" json:"source,omitempty"`
	ContentId            string     `protobuf:"bytes,2,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PullFeedRequest) Reset()         { *m = PullFeedRequest{} }
func (m *PullFeedRequest) String() string { return proto.CompactTextString(m) }
func (*PullFeedRequest) ProtoMessage()    {}
func (*PullFeedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae1be1fc373121a9, []int{0}
}
func (m *PullFeedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullFeedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullFeedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullFeedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullFeedRequest.Merge(m, src)
}
func (m *PullFeedRequest) XXX_Size() int {
	return m.Size()
}
func (m *PullFeedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullFeedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullFeedRequest proto.InternalMessageInfo

func (m *PullFeedRequest) GetSource() FeedSource {
	if m != nil {
		return m.Source
	}
	return FeedSource_FEED_SOURCE_UNSPECIFIED
}

func (m *PullFeedRequest) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

type PullFeedResponse struct {
	// Types that are valid to be assigned to XData:
	//
	//	*PullFeedResponse_Data
	XData                isPullFeedResponse_XData `protobuf_oneof:"_data"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *PullFeedResponse) Reset()         { *m = PullFeedResponse{} }
func (m *PullFeedResponse) String() string { return proto.CompactTextString(m) }
func (*PullFeedResponse) ProtoMessage()    {}
func (*PullFeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae1be1fc373121a9, []int{1}
}
func (m *PullFeedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullFeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullFeedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullFeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullFeedResponse.Merge(m, src)
}
func (m *PullFeedResponse) XXX_Size() int {
	return m.Size()
}
func (m *PullFeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullFeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullFeedResponse proto.InternalMessageInfo

type isPullFeedResponse_XData interface {
	isPullFeedResponse_XData()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PullFeedResponse_Data struct {
	Data *Feed `protobuf:"bytes,1,opt,name=data,proto3,oneof" json:"data,omitempty"`
}

func (*PullFeedResponse_Data) isPullFeedResponse_XData() {}

func (m *PullFeedResponse) GetXData() isPullFeedResponse_XData {
	if m != nil {
		return m.XData
	}
	return nil
}

func (m *PullFeedResponse) GetData() *Feed {
	if x, ok := m.GetXData().(*PullFeedResponse_Data); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PullFeedResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PullFeedResponse_Data)(nil),
	}
}

type PullDBRequest struct {
	Source               DBSource `protobuf:"varint,1,opt,name=source,proto3,enum=librarian.porter.v1.DBSource" json:"source,omitempty"`
	ContentId            string   `protobuf:"bytes,2,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullDBRequest) Reset()         { *m = PullDBRequest{} }
func (m *PullDBRequest) String() string { return proto.CompactTextString(m) }
func (*PullDBRequest) ProtoMessage()    {}
func (*PullDBRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae1be1fc373121a9, []int{2}
}
func (m *PullDBRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullDBRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullDBRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullDBRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullDBRequest.Merge(m, src)
}
func (m *PullDBRequest) XXX_Size() int {
	return m.Size()
}
func (m *PullDBRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullDBRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullDBRequest proto.InternalMessageInfo

func (m *PullDBRequest) GetSource() DBSource {
	if m != nil {
		return m.Source
	}
	return DBSource_DB_SOURCE_UNSPECIFIED
}

func (m *PullDBRequest) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

type PullDBResponse struct {
	Data                 map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PullDBResponse) Reset()         { *m = PullDBResponse{} }
func (m *PullDBResponse) String() string { return proto.CompactTextString(m) }
func (*PullDBResponse) ProtoMessage()    {}
func (*PullDBResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae1be1fc373121a9, []int{3}
}
func (m *PullDBResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullDBResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullDBResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullDBResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullDBResponse.Merge(m, src)
}
func (m *PullDBResponse) XXX_Size() int {
	return m.Size()
}
func (m *PullDBResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullDBResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullDBResponse proto.InternalMessageInfo

func (m *PullDBResponse) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type PullWikiRequest struct {
	Source               DBSource `protobuf:"varint,1,opt,name=source,proto3,enum=librarian.porter.v1.DBSource" json:"source,omitempty"`
	ContentId            string   `protobuf:"bytes,2,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullWikiRequest) Reset()         { *m = PullWikiRequest{} }
func (m *PullWikiRequest) String() string { return proto.CompactTextString(m) }
func (*PullWikiRequest) ProtoMessage()    {}
func (*PullWikiRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae1be1fc373121a9, []int{4}
}
func (m *PullWikiRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullWikiRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullWikiRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullWikiRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullWikiRequest.Merge(m, src)
}
func (m *PullWikiRequest) XXX_Size() int {
	return m.Size()
}
func (m *PullWikiRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullWikiRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullWikiRequest proto.InternalMessageInfo

func (m *PullWikiRequest) GetSource() DBSource {
	if m != nil {
		return m.Source
	}
	return DBSource_DB_SOURCE_UNSPECIFIED
}

func (m *PullWikiRequest) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

type PullWikiResponse struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullWikiResponse) Reset()         { *m = PullWikiResponse{} }
func (m *PullWikiResponse) String() string { return proto.CompactTextString(m) }
func (*PullWikiResponse) ProtoMessage()    {}
func (*PullWikiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae1be1fc373121a9, []int{5}
}
func (m *PullWikiResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullWikiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullWikiResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullWikiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullWikiResponse.Merge(m, src)
}
func (m *PullWikiResponse) XXX_Size() int {
	return m.Size()
}
func (m *PullWikiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullWikiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullWikiResponse proto.InternalMessageInfo

func (m *PullWikiResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type PullDataRequest struct {
	Source               DataSource `protobuf:"varint,1,opt,name=source,proto3,enum=librarian.porter.v1.DataSource" json:"source,omitempty"`
	ContentId            string     `protobuf:"bytes,2,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PullDataRequest) Reset()         { *m = PullDataRequest{} }
func (m *PullDataRequest) String() string { return proto.CompactTextString(m) }
func (*PullDataRequest) ProtoMessage()    {}
func (*PullDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae1be1fc373121a9, []int{6}
}
func (m *PullDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullDataRequest.Merge(m, src)
}
func (m *PullDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *PullDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullDataRequest proto.InternalMessageInfo

func (m *PullDataRequest) GetSource() DataSource {
	if m != nil {
		return m.Source
	}
	return DataSource_DATA_SOURCE_UNSPECIFIED
}

func (m *PullDataRequest) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

type PullDataResponse struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullDataResponse) Reset()         { *m = PullDataResponse{} }
func (m *PullDataResponse) String() string { return proto.CompactTextString(m) }
func (*PullDataResponse) ProtoMessage()    {}
func (*PullDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae1be1fc373121a9, []int{7}
}
func (m *PullDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullDataResponse.Merge(m, src)
}
func (m *PullDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *PullDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullDataResponse proto.InternalMessageInfo

func (m *PullDataResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PushDataRequest struct {
	Source               DataSource `protobuf:"varint,1,opt,name=source,proto3,enum=librarian.porter.v1.DataSource" json:"source,omitempty"`
	ContentId            string     `protobuf:"bytes,2,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
	Data                 []byte     `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PushDataRequest) Reset()         { *m = PushDataRequest{} }
func (m *PushDataRequest) String() string { return proto.CompactTextString(m) }
func (*PushDataRequest) ProtoMessage()    {}
func (*PushDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae1be1fc373121a9, []int{8}
}
func (m *PushDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushDataRequest.Merge(m, src)
}
func (m *PushDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *PushDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushDataRequest proto.InternalMessageInfo

func (m *PushDataRequest) GetSource() DataSource {
	if m != nil {
		return m.Source
	}
	return DataSource_DATA_SOURCE_UNSPECIFIED
}

func (m *PushDataRequest) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

func (m *PushDataRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PushDataResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushDataResponse) Reset()         { *m = PushDataResponse{} }
func (m *PushDataResponse) String() string { return proto.CompactTextString(m) }
func (*PushDataResponse) ProtoMessage()    {}
func (*PushDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae1be1fc373121a9, []int{9}
}
func (m *PushDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushDataResponse.Merge(m, src)
}
func (m *PushDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *PushDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PushDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PushDataResponse proto.InternalMessageInfo

type Feed struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Link        string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Types that are valid to be assigned to XLanguage:
	//
	//	*Feed_Language
	XLanguage isFeed_XLanguage `protobuf_oneof:"_language"`
	Item      []*Feed_FeedItem `protobuf:"bytes,5,rep,name=item,proto3" json:"item,omitempty"`
	// Types that are valid to be assigned to XImage:
	//
	//	*Feed_Image
	XImage isFeed_XImage `protobuf_oneof:"_image"`
	// Types that are valid to be assigned to XItunesAuthor:
	//
	//	*Feed_ItunesAuthor
	XItunesAuthor isFeed_XItunesAuthor `protobuf_oneof:"_itunes_author"`
	// Types that are valid to be assigned to XItunesCategory:
	//
	//	*Feed_ItunesCategory
	XItunesCategory      isFeed_XItunesCategory `protobuf_oneof:"_itunes_category"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Feed) Reset()         { *m = Feed{} }
func (m *Feed) String() string { return proto.CompactTextString(m) }
func (*Feed) ProtoMessage()    {}
func (*Feed) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae1be1fc373121a9, []int{10}
}
func (m *Feed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Feed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Feed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Feed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feed.Merge(m, src)
}
func (m *Feed) XXX_Size() int {
	return m.Size()
}
func (m *Feed) XXX_DiscardUnknown() {
	xxx_messageInfo_Feed.DiscardUnknown(m)
}

var xxx_messageInfo_Feed proto.InternalMessageInfo

type isFeed_XLanguage interface {
	isFeed_XLanguage()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isFeed_XImage interface {
	isFeed_XImage()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isFeed_XItunesAuthor interface {
	isFeed_XItunesAuthor()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isFeed_XItunesCategory interface {
	isFeed_XItunesCategory()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Feed_Language struct {
	Language string `protobuf:"bytes,4,opt,name=language,proto3,oneof" json:"language,omitempty"`
}
type Feed_Image struct {
	Image string `protobuf:"bytes,6,opt,name=image,proto3,oneof" json:"image,omitempty"`
}
type Feed_ItunesAuthor struct {
	ItunesAuthor string `protobuf:"bytes,7,opt,name=itunes_author,json=itunesAuthor,proto3,oneof" json:"itunes_author,omitempty"`
}
type Feed_ItunesCategory struct {
	ItunesCategory string `protobuf:"bytes,8,opt,name=itunes_category,json=itunesCategory,proto3,oneof" json:"itunes_category,omitempty"`
}

func (*Feed_Language) isFeed_XLanguage()             {}
func (*Feed_Image) isFeed_XImage()                   {}
func (*Feed_ItunesAuthor) isFeed_XItunesAuthor()     {}
func (*Feed_ItunesCategory) isFeed_XItunesCategory() {}

func (m *Feed) GetXLanguage() isFeed_XLanguage {
	if m != nil {
		return m.XLanguage
	}
	return nil
}
func (m *Feed) GetXImage() isFeed_XImage {
	if m != nil {
		return m.XImage
	}
	return nil
}
func (m *Feed) GetXItunesAuthor() isFeed_XItunesAuthor {
	if m != nil {
		return m.XItunesAuthor
	}
	return nil
}
func (m *Feed) GetXItunesCategory() isFeed_XItunesCategory {
	if m != nil {
		return m.XItunesCategory
	}
	return nil
}

func (m *Feed) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Feed) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Feed) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Feed) GetLanguage() string {
	if x, ok := m.GetXLanguage().(*Feed_Language); ok {
		return x.Language
	}
	return ""
}

func (m *Feed) GetItem() []*Feed_FeedItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *Feed) GetImage() string {
	if x, ok := m.GetXImage().(*Feed_Image); ok {
		return x.Image
	}
	return ""
}

func (m *Feed) GetItunesAuthor() string {
	if x, ok := m.GetXItunesAuthor().(*Feed_ItunesAuthor); ok {
		return x.ItunesAuthor
	}
	return ""
}

func (m *Feed) GetItunesCategory() string {
	if x, ok := m.GetXItunesCategory().(*Feed_ItunesCategory); ok {
		return x.ItunesCategory
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Feed) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Feed_Language)(nil),
		(*Feed_Image)(nil),
		(*Feed_ItunesAuthor)(nil),
		(*Feed_ItunesCategory)(nil),
	}
}

type Feed_FeedItem struct {
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Types that are valid to be assigned to XAuthor:
	//
	//	*Feed_FeedItem_Author
	XAuthor isFeed_FeedItem_XAuthor `protobuf_oneof:"_author"`
	// Types that are valid to be assigned to XCategory:
	//
	//	*Feed_FeedItem_Category
	XCategory   isFeed_FeedItem_XCategory `protobuf_oneof:"_category"`
	Description string                    `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Types that are valid to be assigned to XPubDate:
	//
	//	*Feed_FeedItem_PubDate
	XPubDate isFeed_FeedItem_XPubDate `protobuf_oneof:"_pub_date"`
	// Types that are valid to be assigned to XGuid:
	//
	//	*Feed_FeedItem_Guid
	XGuid isFeed_FeedItem_XGuid `protobuf_oneof:"_guid"`
	Link  string                `protobuf:"bytes,7,opt,name=link,proto3" json:"link,omitempty"`
	// Types that are valid to be assigned to XEnclosureUrl:
	//
	//	*Feed_FeedItem_EnclosureUrl
	XEnclosureUrl isFeed_FeedItem_XEnclosureUrl `protobuf_oneof:"_enclosure_url"`
	// Types that are valid to be assigned to XEnclosureLength:
	//
	//	*Feed_FeedItem_EnclosureLength
	XEnclosureLength isFeed_FeedItem_XEnclosureLength `protobuf_oneof:"_enclosure_length"`
	// Types that are valid to be assigned to XEnclosureType:
	//
	//	*Feed_FeedItem_EnclosureType
	XEnclosureType isFeed_FeedItem_XEnclosureType `protobuf_oneof:"_enclosure_type"`
	// Types that are valid to be assigned to XItunesItemImage:
	//
	//	*Feed_FeedItem_ItunesItemImage
	XItunesItemImage isFeed_FeedItem_XItunesItemImage `protobuf_oneof:"_itunes_item_image"`
	// Types that are valid to be assigned to XItunesDuration:
	//
	//	*Feed_FeedItem_ItunesDuration
	XItunesDuration isFeed_FeedItem_XItunesDuration `protobuf_oneof:"_itunes_duration"`
	// Types that are valid to be assigned to XUpvotes:
	//
	//	*Feed_FeedItem_Upvotes
	XUpvotes isFeed_FeedItem_XUpvotes `protobuf_oneof:"_upvotes"`
	// Types that are valid to be assigned to XDownvotes:
	//
	//	*Feed_FeedItem_Downvotes
	XDownvotes isFeed_FeedItem_XDownvotes `protobuf_oneof:"_downvotes"`
	// Types that are valid to be assigned to XComments:
	//
	//	*Feed_FeedItem_Comments
	XComments            isFeed_FeedItem_XComments `protobuf_oneof:"_comments"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Feed_FeedItem) Reset()         { *m = Feed_FeedItem{} }
func (m *Feed_FeedItem) String() string { return proto.CompactTextString(m) }
func (*Feed_FeedItem) ProtoMessage()    {}
func (*Feed_FeedItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae1be1fc373121a9, []int{10, 0}
}
func (m *Feed_FeedItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Feed_FeedItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Feed_FeedItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Feed_FeedItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Feed_FeedItem.Merge(m, src)
}
func (m *Feed_FeedItem) XXX_Size() int {
	return m.Size()
}
func (m *Feed_FeedItem) XXX_DiscardUnknown() {
	xxx_messageInfo_Feed_FeedItem.DiscardUnknown(m)
}

var xxx_messageInfo_Feed_FeedItem proto.InternalMessageInfo

type isFeed_FeedItem_XAuthor interface {
	isFeed_FeedItem_XAuthor()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isFeed_FeedItem_XCategory interface {
	isFeed_FeedItem_XCategory()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isFeed_FeedItem_XPubDate interface {
	isFeed_FeedItem_XPubDate()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isFeed_FeedItem_XGuid interface {
	isFeed_FeedItem_XGuid()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isFeed_FeedItem_XEnclosureUrl interface {
	isFeed_FeedItem_XEnclosureUrl()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isFeed_FeedItem_XEnclosureLength interface {
	isFeed_FeedItem_XEnclosureLength()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isFeed_FeedItem_XEnclosureType interface {
	isFeed_FeedItem_XEnclosureType()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isFeed_FeedItem_XItunesItemImage interface {
	isFeed_FeedItem_XItunesItemImage()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isFeed_FeedItem_XItunesDuration interface {
	isFeed_FeedItem_XItunesDuration()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isFeed_FeedItem_XUpvotes interface {
	isFeed_FeedItem_XUpvotes()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isFeed_FeedItem_XDownvotes interface {
	isFeed_FeedItem_XDownvotes()
	MarshalTo([]byte) (int, error)
	Size() int
}
type isFeed_FeedItem_XComments interface {
	isFeed_FeedItem_XComments()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Feed_FeedItem_Author struct {
	Author string `protobuf:"bytes,2,opt,name=author,proto3,oneof" json:"author,omitempty"`
}
type Feed_FeedItem_Category struct {
	Category string `protobuf:"bytes,3,opt,name=category,proto3,oneof" json:"category,omitempty"`
}
type Feed_FeedItem_PubDate struct {
	PubDate *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=pub_date,json=pubDate,proto3,oneof" json:"pub_date,omitempty"`
}
type Feed_FeedItem_Guid struct {
	Guid string `protobuf:"bytes,6,opt,name=guid,proto3,oneof" json:"guid,omitempty"`
}
type Feed_FeedItem_EnclosureUrl struct {
	EnclosureUrl string `protobuf:"bytes,11,opt,name=enclosure_url,json=enclosureUrl,proto3,oneof" json:"enclosure_url,omitempty"`
}
type Feed_FeedItem_EnclosureLength struct {
	EnclosureLength string `protobuf:"bytes,12,opt,name=enclosure_length,json=enclosureLength,proto3,oneof" json:"enclosure_length,omitempty"`
}
type Feed_FeedItem_EnclosureType struct {
	EnclosureType string `protobuf:"bytes,13,opt,name=enclosure_type,json=enclosureType,proto3,oneof" json:"enclosure_type,omitempty"`
}
type Feed_FeedItem_ItunesItemImage struct {
	ItunesItemImage string `protobuf:"bytes,14,opt,name=itunes_item_image,json=itunesItemImage,proto3,oneof" json:"itunes_item_image,omitempty"`
}
type Feed_FeedItem_ItunesDuration struct {
	ItunesDuration string `protobuf:"bytes,15,opt,name=itunes_duration,json=itunesDuration,proto3,oneof" json:"itunes_duration,omitempty"`
}
type Feed_FeedItem_Upvotes struct {
	Upvotes int64 `protobuf:"varint,16,opt,name=upvotes,proto3,oneof" json:"upvotes,omitempty"`
}
type Feed_FeedItem_Downvotes struct {
	Downvotes int64 `protobuf:"varint,17,opt,name=downvotes,proto3,oneof" json:"downvotes,omitempty"`
}
type Feed_FeedItem_Comments struct {
	Comments int64 `protobuf:"varint,18,opt,name=comments,proto3,oneof" json:"comments,omitempty"`
}

func (*Feed_FeedItem_Author) isFeed_FeedItem_XAuthor()                   {}
func (*Feed_FeedItem_Category) isFeed_FeedItem_XCategory()               {}
func (*Feed_FeedItem_PubDate) isFeed_FeedItem_XPubDate()                 {}
func (*Feed_FeedItem_Guid) isFeed_FeedItem_XGuid()                       {}
func (*Feed_FeedItem_EnclosureUrl) isFeed_FeedItem_XEnclosureUrl()       {}
func (*Feed_FeedItem_EnclosureLength) isFeed_FeedItem_XEnclosureLength() {}
func (*Feed_FeedItem_EnclosureType) isFeed_FeedItem_XEnclosureType()     {}
func (*Feed_FeedItem_ItunesItemImage) isFeed_FeedItem_XItunesItemImage() {}
func (*Feed_FeedItem_ItunesDuration) isFeed_FeedItem_XItunesDuration()   {}
func (*Feed_FeedItem_Upvotes) isFeed_FeedItem_XUpvotes()                 {}
func (*Feed_FeedItem_Downvotes) isFeed_FeedItem_XDownvotes()             {}
func (*Feed_FeedItem_Comments) isFeed_FeedItem_XComments()               {}

func (m *Feed_FeedItem) GetXAuthor() isFeed_FeedItem_XAuthor {
	if m != nil {
		return m.XAuthor
	}
	return nil
}
func (m *Feed_FeedItem) GetXCategory() isFeed_FeedItem_XCategory {
	if m != nil {
		return m.XCategory
	}
	return nil
}
func (m *Feed_FeedItem) GetXPubDate() isFeed_FeedItem_XPubDate {
	if m != nil {
		return m.XPubDate
	}
	return nil
}
func (m *Feed_FeedItem) GetXGuid() isFeed_FeedItem_XGuid {
	if m != nil {
		return m.XGuid
	}
	return nil
}
func (m *Feed_FeedItem) GetXEnclosureUrl() isFeed_FeedItem_XEnclosureUrl {
	if m != nil {
		return m.XEnclosureUrl
	}
	return nil
}
func (m *Feed_FeedItem) GetXEnclosureLength() isFeed_FeedItem_XEnclosureLength {
	if m != nil {
		return m.XEnclosureLength
	}
	return nil
}
func (m *Feed_FeedItem) GetXEnclosureType() isFeed_FeedItem_XEnclosureType {
	if m != nil {
		return m.XEnclosureType
	}
	return nil
}
func (m *Feed_FeedItem) GetXItunesItemImage() isFeed_FeedItem_XItunesItemImage {
	if m != nil {
		return m.XItunesItemImage
	}
	return nil
}
func (m *Feed_FeedItem) GetXItunesDuration() isFeed_FeedItem_XItunesDuration {
	if m != nil {
		return m.XItunesDuration
	}
	return nil
}
func (m *Feed_FeedItem) GetXUpvotes() isFeed_FeedItem_XUpvotes {
	if m != nil {
		return m.XUpvotes
	}
	return nil
}
func (m *Feed_FeedItem) GetXDownvotes() isFeed_FeedItem_XDownvotes {
	if m != nil {
		return m.XDownvotes
	}
	return nil
}
func (m *Feed_FeedItem) GetXComments() isFeed_FeedItem_XComments {
	if m != nil {
		return m.XComments
	}
	return nil
}

func (m *Feed_FeedItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Feed_FeedItem) GetAuthor() string {
	if x, ok := m.GetXAuthor().(*Feed_FeedItem_Author); ok {
		return x.Author
	}
	return ""
}

func (m *Feed_FeedItem) GetCategory() string {
	if x, ok := m.GetXCategory().(*Feed_FeedItem_Category); ok {
		return x.Category
	}
	return ""
}

func (m *Feed_FeedItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Feed_FeedItem) GetPubDate() *timestamppb.Timestamp {
	if x, ok := m.GetXPubDate().(*Feed_FeedItem_PubDate); ok {
		return x.PubDate
	}
	return nil
}

func (m *Feed_FeedItem) GetGuid() string {
	if x, ok := m.GetXGuid().(*Feed_FeedItem_Guid); ok {
		return x.Guid
	}
	return ""
}

func (m *Feed_FeedItem) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *Feed_FeedItem) GetEnclosureUrl() string {
	if x, ok := m.GetXEnclosureUrl().(*Feed_FeedItem_EnclosureUrl); ok {
		return x.EnclosureUrl
	}
	return ""
}

func (m *Feed_FeedItem) GetEnclosureLength() string {
	if x, ok := m.GetXEnclosureLength().(*Feed_FeedItem_EnclosureLength); ok {
		return x.EnclosureLength
	}
	return ""
}

func (m *Feed_FeedItem) GetEnclosureType() string {
	if x, ok := m.GetXEnclosureType().(*Feed_FeedItem_EnclosureType); ok {
		return x.EnclosureType
	}
	return ""
}

func (m *Feed_FeedItem) GetItunesItemImage() string {
	if x, ok := m.GetXItunesItemImage().(*Feed_FeedItem_ItunesItemImage); ok {
		return x.ItunesItemImage
	}
	return ""
}

func (m *Feed_FeedItem) GetItunesDuration() string {
	if x, ok := m.GetXItunesDuration().(*Feed_FeedItem_ItunesDuration); ok {
		return x.ItunesDuration
	}
	return ""
}

func (m *Feed_FeedItem) GetUpvotes() int64 {
	if x, ok := m.GetXUpvotes().(*Feed_FeedItem_Upvotes); ok {
		return x.Upvotes
	}
	return 0
}

func (m *Feed_FeedItem) GetDownvotes() int64 {
	if x, ok := m.GetXDownvotes().(*Feed_FeedItem_Downvotes); ok {
		return x.Downvotes
	}
	return 0
}

func (m *Feed_FeedItem) GetComments() int64 {
	if x, ok := m.GetXComments().(*Feed_FeedItem_Comments); ok {
		return x.Comments
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Feed_FeedItem) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Feed_FeedItem_Author)(nil),
		(*Feed_FeedItem_Category)(nil),
		(*Feed_FeedItem_PubDate)(nil),
		(*Feed_FeedItem_Guid)(nil),
		(*Feed_FeedItem_EnclosureUrl)(nil),
		(*Feed_FeedItem_EnclosureLength)(nil),
		(*Feed_FeedItem_EnclosureType)(nil),
		(*Feed_FeedItem_ItunesItemImage)(nil),
		(*Feed_FeedItem_ItunesDuration)(nil),
		(*Feed_FeedItem_Upvotes)(nil),
		(*Feed_FeedItem_Downvotes)(nil),
		(*Feed_FeedItem_Comments)(nil),
	}
}

func init() {
	proto.RegisterEnum("librarian.porter.v1.FeedSource", FeedSource_name, FeedSource_value)
	proto.RegisterEnum("librarian.porter.v1.DBSource", DBSource_name, DBSource_value)
	proto.RegisterEnum("librarian.porter.v1.WikiSource", WikiSource_name, WikiSource_value)
	proto.RegisterEnum("librarian.porter.v1.DataSource", DataSource_name, DataSource_value)
	proto.RegisterType((*PullFeedRequest)(nil), "librarian.porter.v1.PullFeedRequest")
	proto.RegisterType((*PullFeedResponse)(nil), "librarian.porter.v1.PullFeedResponse")
	proto.RegisterType((*PullDBRequest)(nil), "librarian.porter.v1.PullDBRequest")
	proto.RegisterType((*PullDBResponse)(nil), "librarian.porter.v1.PullDBResponse")
	proto.RegisterMapType((map[string]string)(nil), "librarian.porter.v1.PullDBResponse.DataEntry")
	proto.RegisterType((*PullWikiRequest)(nil), "librarian.porter.v1.PullWikiRequest")
	proto.RegisterType((*PullWikiResponse)(nil), "librarian.porter.v1.PullWikiResponse")
	proto.RegisterType((*PullDataRequest)(nil), "librarian.porter.v1.PullDataRequest")
	proto.RegisterType((*PullDataResponse)(nil), "librarian.porter.v1.PullDataResponse")
	proto.RegisterType((*PushDataRequest)(nil), "librarian.porter.v1.PushDataRequest")
	proto.RegisterType((*PushDataResponse)(nil), "librarian.porter.v1.PushDataResponse")
	proto.RegisterType((*Feed)(nil), "librarian.porter.v1.Feed")
	proto.RegisterType((*Feed_FeedItem)(nil), "librarian.porter.v1.Feed.FeedItem")
}

func init() { proto.RegisterFile("librarian/porter/v1/porter.proto", fileDescriptor_ae1be1fc373121a9) }

var fileDescriptor_ae1be1fc373121a9 = []byte{
	// 1073 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xae, 0xf3, 0x6b, 0x9f, 0xb4, 0x69, 0x3a, 0xbb, 0xb0, 0x6e, 0x57, 0xfd, 0xd9, 0x40, 0x51,
	0xb6, 0x02, 0x87, 0x16, 0xc1, 0xa2, 0xe5, 0xaa, 0x6e, 0x52, 0x35, 0x62, 0xc5, 0x96, 0x69, 0x4b,
	0x05, 0x5c, 0x58, 0x4e, 0x32, 0xa4, 0x56, 0x1d, 0xdb, 0xd8, 0x33, 0x41, 0xbd, 0xe0, 0xbe, 0x17,
	0x3c, 0x00, 0xcf, 0xc0, 0x93, 0xec, 0x25, 0x12, 0x2f, 0x80, 0xca, 0x1d, 0x4f, 0x81, 0xe6, 0xc7,
	0x4e, 0xd2, 0x4d, 0x02, 0x8b, 0x04, 0x37, 0xd1, 0xcc, 0x99, 0x6f, 0xce, 0xf9, 0xce, 0xf9, 0x26,
	0xe7, 0x18, 0x76, 0x7c, 0xaf, 0x1b, 0xbb, 0xb1, 0xe7, 0x06, 0xcd, 0x28, 0x8c, 0x29, 0x89, 0x9b,
	0xa3, 0x7d, 0xb5, 0xb2, 0xa2, 0x38, 0xa4, 0x21, 0x7a, 0x90, 0x21, 0x2c, 0x65, 0x1f, 0xed, 0x6f,
	0x6c, 0x0f, 0xc2, 0x70, 0xe0, 0x93, 0xa6, 0x80, 0x74, 0xd9, 0x77, 0x4d, 0xea, 0x0d, 0x49, 0x42,
	0xdd, 0x61, 0x24, 0x6f, 0xd5, 0x3d, 0x58, 0x3d, 0x65, 0xbe, 0x7f, 0x4c, 0x48, 0x1f, 0x93, 0xef,
	0x19, 0x49, 0x28, 0x7a, 0x06, 0xa5, 0x24, 0x64, 0x71, 0x8f, 0x98, 0xda, 0x8e, 0xd6, 0xa8, 0x1e,
	0x6c, 0x5b, 0x33, 0x3c, 0x5b, 0xfc, 0xc6, 0x99, 0x80, 0x61, 0x05, 0x47, 0x9b, 0x00, 0xbd, 0x30,
	0xa0, 0x24, 0xa0, 0x8e, 0xd7, 0x37, 0x73, 0x3b, 0x5a, 0xc3, 0xc0, 0x86, 0xb2, 0x74, 0xfa, 0xf5,
	0x97, 0x50, 0x1b, 0x87, 0x4a, 0xa2, 0x30, 0x48, 0x08, 0x3a, 0x80, 0x42, 0xdf, 0xa5, 0xae, 0x88,
	0x54, 0x39, 0x58, 0x9f, 0x1b, 0xe9, 0x64, 0x09, 0x0b, 0xe0, 0xad, 0xa6, 0xd9, 0x65, 0x28, 0x3a,
	0x7c, 0x5d, 0x27, 0xb0, 0xc2, 0x1d, 0xb6, 0xec, 0x94, 0xf9, 0xc7, 0xf7, 0x98, 0x6f, 0xce, 0xf4,
	0xd7, 0xb2, 0xdf, 0x8c, 0xf7, 0x4f, 0x1a, 0x54, 0xd3, 0x38, 0x8a, 0xf6, 0x61, 0x46, 0x3b, 0xdf,
	0xa8, 0x1c, 0x7c, 0x30, 0x33, 0xcc, 0xf4, 0x15, 0xab, 0xe5, 0x52, 0xb7, 0x1d, 0xd0, 0xf8, 0x46,
	0x26, 0xb2, 0xf1, 0x0c, 0x8c, 0xcc, 0x84, 0x6a, 0x90, 0xbf, 0x26, 0x37, 0x82, 0xb5, 0x81, 0xf9,
	0x12, 0x3d, 0x84, 0xe2, 0xc8, 0xf5, 0x19, 0x51, 0x74, 0xe4, 0xe6, 0x79, 0xee, 0x53, 0xad, 0x3e,
	0x90, 0x8a, 0x5d, 0x7a, 0xd7, 0xde, 0x7f, 0x9b, 0xf7, 0x7b, 0x52, 0x2f, 0x19, 0x48, 0x25, 0x8e,
	0x26, 0xf4, 0x32, 0x64, 0x26, 0xe9, 0x13, 0xe2, 0xd9, 0xbc, 0xd9, 0x13, 0xe2, 0x37, 0xfe, 0x15,
	0x25, 0x19, 0x6a, 0x06, 0xa5, 0x65, 0x45, 0xe9, 0x47, 0x4e, 0x29, 0xb9, 0xfa, 0x1f, 0x28, 0x65,
	0xe1, 0xf3, 0x13, 0xe1, 0x11, 0xa7, 0x99, 0x86, 0x97, 0x34, 0xeb, 0xaf, 0x74, 0x28, 0xf0, 0x97,
	0xcc, 0x95, 0xa5, 0x1e, 0xf5, 0x89, 0xaa, 0xa1, 0xdc, 0x70, 0x37, 0xbe, 0x17, 0x5c, 0x2b, 0xff,
	0x62, 0x8d, 0x76, 0xa0, 0xd2, 0x27, 0x49, 0x2f, 0xf6, 0x22, 0xea, 0x85, 0x81, 0x88, 0x60, 0xe0,
	0x49, 0x13, 0xda, 0x06, 0xdd, 0x77, 0x83, 0x01, 0x73, 0x07, 0xc4, 0x2c, 0xf0, 0xe3, 0x93, 0x25,
	0x9c, 0x59, 0x6e, 0x35, 0x0d, 0x7d, 0x02, 0x05, 0x8f, 0x92, 0xa1, 0x59, 0x14, 0x0f, 0xb5, 0x3e,
	0xf7, 0xff, 0x25, 0x7e, 0x3a, 0x94, 0x0c, 0xb1, 0xc0, 0xa3, 0x75, 0x28, 0x7a, 0x43, 0xee, 0xb5,
	0x24, 0xbc, 0x6a, 0x58, 0x6e, 0xb9, 0xcb, 0x06, 0xac, 0x78, 0x94, 0x05, 0x24, 0x71, 0x5c, 0x46,
	0xaf, 0xc2, 0xd8, 0x2c, 0x0b, 0x48, 0x0e, 0x2f, 0x4b, 0xf3, 0xa1, 0xb0, 0x72, 0xe4, 0xfb, 0xb0,
	0xaa, 0x90, 0x3d, 0x97, 0x92, 0x41, 0x18, 0xdf, 0x98, 0xba, 0xc0, 0xe6, 0x71, 0x55, 0x1e, 0x1c,
	0x29, 0xfb, 0xad, 0xa6, 0x6d, 0xfc, 0x59, 0x04, 0x3d, 0x65, 0x31, 0xa7, 0x48, 0x8f, 0xa1, 0xa4,
	0x62, 0xe6, 0x54, 0xb2, 0x6a, 0xcf, 0xa3, 0x6d, 0x83, 0x9e, 0x85, 0xc9, 0x2b, 0xd6, 0x99, 0x85,
	0x03, 0xee, 0x95, 0xb3, 0xf0, 0x7a, 0x39, 0x9f, 0x83, 0x1e, 0xb1, 0x2e, 0x6f, 0x2e, 0xc4, 0x2c,
	0x8a, 0x8e, 0xb4, 0x61, 0xc9, 0x06, 0x6a, 0xa5, 0x0d, 0xd4, 0x3a, 0x4f, 0x1b, 0xe8, 0x49, 0x0e,
	0x97, 0x23, 0xd6, 0x6d, 0xb9, 0x54, 0x94, 0xe5, 0x11, 0x14, 0x06, 0xcc, 0xeb, 0xab, 0x82, 0xe5,
	0xb1, 0xd8, 0xf1, 0x83, 0x54, 0xd9, 0xf2, 0x84, 0xb2, 0x0d, 0x58, 0x21, 0x41, 0xcf, 0x0f, 0x13,
	0x16, 0x13, 0x87, 0xc5, 0xbe, 0x59, 0x11, 0xb7, 0x0a, 0x78, 0x39, 0x33, 0x5f, 0xc4, 0x3e, 0xbf,
	0x6d, 0x41, 0x6d, 0x8c, 0xf4, 0x49, 0x30, 0xa0, 0x57, 0xe6, 0xb2, 0x00, 0x17, 0xf1, 0x6a, 0x76,
	0xf2, 0x42, 0x1c, 0x70, 0xfc, 0x1e, 0x54, 0xc7, 0x78, 0x7a, 0x13, 0x11, 0x73, 0x45, 0xa0, 0x4b,
	0x78, 0x1c, 0xf1, 0xfc, 0x26, 0x12, 0x94, 0x9b, 0xb0, 0xa6, 0xf4, 0xe1, 0x9a, 0x3b, 0x52, 0xf0,
	0xaa, 0x80, 0x97, 0xb1, 0x92, 0x8e, 0xab, 0xd1, 0x49, 0xa5, 0x1f, 0x0b, 0xda, 0x67, 0xb1, 0x2b,
	0xaa, 0xb8, 0x2a, 0xe0, 0x7a, 0x2a, 0x68, 0x4b, 0xd9, 0x39, 0x7a, 0x13, 0xca, 0x2c, 0x1a, 0x85,
	0x94, 0x24, 0x66, 0x6d, 0x47, 0x6b, 0xe4, 0x4f, 0x0c, 0x9c, 0x1a, 0xf8, 0xf1, 0x13, 0x30, 0xfa,
	0xe1, 0x0f, 0x81, 0x04, 0xac, 0x09, 0x00, 0xe0, 0xb1, 0x29, 0x95, 0x34, 0x1c, 0x0e, 0x49, 0x40,
	0x13, 0x13, 0x09, 0x44, 0x05, 0x67, 0x16, 0x3e, 0x0a, 0x0c, 0x28, 0xab, 0x57, 0x68, 0x57, 0xc0,
	0xc8, 0x9e, 0x99, 0xd8, 0xa4, 0x4a, 0x8a, 0x79, 0xc1, 0xc5, 0xb0, 0x6b, 0x50, 0x75, 0xa6, 0xca,
	0x6e, 0x3f, 0x80, 0x35, 0xe7, 0x7e, 0x79, 0xed, 0x35, 0x58, 0x75, 0xa6, 0x6b, 0x68, 0x3f, 0x04,
	0xe4, 0xbc, 0x56, 0x2a, 0x1b, 0x41, 0xcd, 0xb9, 0x57, 0x0f, 0x1b, 0x40, 0x77, 0x54, 0x92, 0xf6,
	0x32, 0x80, 0x93, 0xe5, 0x23, 0x09, 0x2a, 0xee, 0x62, 0x93, 0xfe, 0x4f, 0x6d, 0x1d, 0x4a, 0xca,
	0x23, 0x67, 0x38, 0xf5, 0xe7, 0x9a, 0x8c, 0x91, 0x66, 0xb7, 0xf7, 0x14, 0x60, 0x3c, 0x7d, 0xd1,
	0x63, 0x78, 0x74, 0xdc, 0x6e, 0xb7, 0x9c, 0xb3, 0x97, 0x17, 0xf8, 0xa8, 0xed, 0x5c, 0x7c, 0x71,
	0x76, 0xda, 0x3e, 0xea, 0x1c, 0x77, 0xda, 0xad, 0xda, 0xd2, 0xde, 0x2e, 0xe8, 0x69, 0xdb, 0x47,
	0xeb, 0xf0, 0x56, 0xcb, 0x9e, 0x0d, 0x7b, 0x0a, 0xc0, 0xdb, 0xfc, 0xd8, 0xe3, 0x65, 0xe7, 0xf3,
	0xce, 0x5c, 0xe8, 0xb8, 0x49, 0x72, 0x68, 0xeb, 0xf0, 0xfc, 0x70, 0x26, 0xf4, 0xe0, 0xb7, 0x3c,
	0xbc, 0xfd, 0x22, 0x6d, 0x38, 0xa7, 0xa2, 0xdf, 0x9c, 0x91, 0x78, 0xe4, 0xf5, 0x08, 0xba, 0x04,
	0x3d, 0xfd, 0x16, 0x40, 0xef, 0xce, 0x1d, 0x9f, 0x13, 0x5f, 0x25, 0x1b, 0xbb, 0x7f, 0x83, 0x52,
	0xd3, 0xe0, 0x4b, 0x28, 0xc9, 0xc1, 0x8b, 0xea, 0x0b, 0xa7, 0xb2, 0x74, 0xfa, 0xce, 0x3f, 0x98,
	0xdc, 0x29, 0x57, 0x5e, 0xa0, 0x05, 0x5c, 0x27, 0xe6, 0xf1, 0x02, 0xae, 0x53, 0xc3, 0xf4, 0x6b,
	0xe9, 0x98, 0x97, 0x73, 0x81, 0xe3, 0x89, 0x21, 0xb6, 0xc0, 0xf1, 0xe4, 0xac, 0xf9, 0x50, 0x93,
	0xae, 0xe5, 0x04, 0x9a, 0xeb, 0x7a, 0x6a, 0x3e, 0xce, 0x75, 0x3d, 0x3d, 0xc6, 0x1a, 0x9a, 0xfd,
	0xed, 0xab, 0xbb, 0x2d, 0xed, 0xd7, 0xbb, 0x2d, 0xed, 0xf7, 0xbb, 0x2d, 0xed, 0xe7, 0x3f, 0xb6,
	0x96, 0xbe, 0xd9, 0x1d, 0x78, 0xf4, 0x8a, 0x75, 0xad, 0x5e, 0x38, 0x6c, 0x52, 0xe6, 0x5d, 0xb1,
	0x6e, 0xf3, 0xfe, 0xd7, 0xea, 0x67, 0xa3, 0xfd, 0x5f, 0x72, 0x4f, 0xce, 0x99, 0x77, 0xc2, 0xba,
	0xd6, 0x29, 0xef, 0xa5, 0x89, 0x95, 0x3d, 0x0d, 0x4b, 0xbe, 0x0d, 0xeb, 0xab, 0xfd, 0x6e, 0x49,
	0xf4, 0xd9, 0x8f, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x49, 0xe9, 0xd7, 0xef, 0x0a, 0x00,
	0x00,
}

func (m *PullFeedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullFeedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullFeedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContentId) > 0 {
		i -= len(m.ContentId)
		copy(dAtA[i:], m.ContentId)
		i = encodeVarintPorter(dAtA, i, uint64(len(m.ContentId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Source != 0 {
		i = encodeVarintPorter(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PullFeedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullFeedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullFeedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.XData != nil {
		{
			size := m.XData.Size()
			i -= size
			if _, err := m.XData.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PullFeedResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullFeedResponse_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPorter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PullDBRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullDBRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullDBRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContentId) > 0 {
		i -= len(m.ContentId)
		copy(dAtA[i:], m.ContentId)
		i = encodeVarintPorter(dAtA, i, uint64(len(m.ContentId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Source != 0 {
		i = encodeVarintPorter(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PullDBResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullDBResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullDBResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintPorter(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPorter(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPorter(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PullWikiRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullWikiRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullWikiRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContentId) > 0 {
		i -= len(m.ContentId)
		copy(dAtA[i:], m.ContentId)
		i = encodeVarintPorter(dAtA, i, uint64(len(m.ContentId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Source != 0 {
		i = encodeVarintPorter(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PullWikiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullWikiResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullWikiResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPorter(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PullDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ContentId) > 0 {
		i -= len(m.ContentId)
		copy(dAtA[i:], m.ContentId)
		i = encodeVarintPorter(dAtA, i, uint64(len(m.ContentId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Source != 0 {
		i = encodeVarintPorter(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PullDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPorter(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPorter(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContentId) > 0 {
		i -= len(m.ContentId)
		copy(dAtA[i:], m.ContentId)
		i = encodeVarintPorter(dAtA, i, uint64(len(m.ContentId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Source != 0 {
		i = encodeVarintPorter(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PushDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Feed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Feed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.XItunesCategory != nil {
		{
			size := m.XItunesCategory.Size()
			i -= size
			if _, err := m.XItunesCategory.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XItunesAuthor != nil {
		{
			size := m.XItunesAuthor.Size()
			i -= size
			if _, err := m.XItunesAuthor.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XImage != nil {
		{
			size := m.XImage.Size()
			i -= size
			if _, err := m.XImage.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Item) > 0 {
		for iNdEx := len(m.Item) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Item[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPorter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.XLanguage != nil {
		{
			size := m.XLanguage.Size()
			i -= size
			if _, err := m.XLanguage.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPorter(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintPorter(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPorter(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Feed_Language) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed_Language) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Language)
	copy(dAtA[i:], m.Language)
	i = encodeVarintPorter(dAtA, i, uint64(len(m.Language)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *Feed_Image) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed_Image) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Image)
	copy(dAtA[i:], m.Image)
	i = encodeVarintPorter(dAtA, i, uint64(len(m.Image)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *Feed_ItunesAuthor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed_ItunesAuthor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ItunesAuthor)
	copy(dAtA[i:], m.ItunesAuthor)
	i = encodeVarintPorter(dAtA, i, uint64(len(m.ItunesAuthor)))
	i--
	dAtA[i] = 0x3a
	return len(dAtA) - i, nil
}
func (m *Feed_ItunesCategory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed_ItunesCategory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ItunesCategory)
	copy(dAtA[i:], m.ItunesCategory)
	i = encodeVarintPorter(dAtA, i, uint64(len(m.ItunesCategory)))
	i--
	dAtA[i] = 0x42
	return len(dAtA) - i, nil
}
func (m *Feed_FeedItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Feed_FeedItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed_FeedItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.XComments != nil {
		{
			size := m.XComments.Size()
			i -= size
			if _, err := m.XComments.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XDownvotes != nil {
		{
			size := m.XDownvotes.Size()
			i -= size
			if _, err := m.XDownvotes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XUpvotes != nil {
		{
			size := m.XUpvotes.Size()
			i -= size
			if _, err := m.XUpvotes.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XItunesDuration != nil {
		{
			size := m.XItunesDuration.Size()
			i -= size
			if _, err := m.XItunesDuration.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XItunesItemImage != nil {
		{
			size := m.XItunesItemImage.Size()
			i -= size
			if _, err := m.XItunesItemImage.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XEnclosureType != nil {
		{
			size := m.XEnclosureType.Size()
			i -= size
			if _, err := m.XEnclosureType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XEnclosureLength != nil {
		{
			size := m.XEnclosureLength.Size()
			i -= size
			if _, err := m.XEnclosureLength.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XEnclosureUrl != nil {
		{
			size := m.XEnclosureUrl.Size()
			i -= size
			if _, err := m.XEnclosureUrl.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintPorter(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x3a
	}
	if m.XGuid != nil {
		{
			size := m.XGuid.Size()
			i -= size
			if _, err := m.XGuid.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XPubDate != nil {
		{
			size := m.XPubDate.Size()
			i -= size
			if _, err := m.XPubDate.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPorter(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if m.XCategory != nil {
		{
			size := m.XCategory.Size()
			i -= size
			if _, err := m.XCategory.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.XAuthor != nil {
		{
			size := m.XAuthor.Size()
			i -= size
			if _, err := m.XAuthor.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPorter(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Feed_FeedItem_Author) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed_FeedItem_Author) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Author)
	copy(dAtA[i:], m.Author)
	i = encodeVarintPorter(dAtA, i, uint64(len(m.Author)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *Feed_FeedItem_Category) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed_FeedItem_Category) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Category)
	copy(dAtA[i:], m.Category)
	i = encodeVarintPorter(dAtA, i, uint64(len(m.Category)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *Feed_FeedItem_PubDate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed_FeedItem_PubDate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PubDate != nil {
		{
			size, err := m.PubDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPorter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *Feed_FeedItem_Guid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed_FeedItem_Guid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Guid)
	copy(dAtA[i:], m.Guid)
	i = encodeVarintPorter(dAtA, i, uint64(len(m.Guid)))
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}
func (m *Feed_FeedItem_EnclosureUrl) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed_FeedItem_EnclosureUrl) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.EnclosureUrl)
	copy(dAtA[i:], m.EnclosureUrl)
	i = encodeVarintPorter(dAtA, i, uint64(len(m.EnclosureUrl)))
	i--
	dAtA[i] = 0x5a
	return len(dAtA) - i, nil
}
func (m *Feed_FeedItem_EnclosureLength) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed_FeedItem_EnclosureLength) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.EnclosureLength)
	copy(dAtA[i:], m.EnclosureLength)
	i = encodeVarintPorter(dAtA, i, uint64(len(m.EnclosureLength)))
	i--
	dAtA[i] = 0x62
	return len(dAtA) - i, nil
}
func (m *Feed_FeedItem_EnclosureType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed_FeedItem_EnclosureType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.EnclosureType)
	copy(dAtA[i:], m.EnclosureType)
	i = encodeVarintPorter(dAtA, i, uint64(len(m.EnclosureType)))
	i--
	dAtA[i] = 0x6a
	return len(dAtA) - i, nil
}
func (m *Feed_FeedItem_ItunesItemImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed_FeedItem_ItunesItemImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ItunesItemImage)
	copy(dAtA[i:], m.ItunesItemImage)
	i = encodeVarintPorter(dAtA, i, uint64(len(m.ItunesItemImage)))
	i--
	dAtA[i] = 0x72
	return len(dAtA) - i, nil
}
func (m *Feed_FeedItem_ItunesDuration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed_FeedItem_ItunesDuration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ItunesDuration)
	copy(dAtA[i:], m.ItunesDuration)
	i = encodeVarintPorter(dAtA, i, uint64(len(m.ItunesDuration)))
	i--
	dAtA[i] = 0x7a
	return len(dAtA) - i, nil
}
func (m *Feed_FeedItem_Upvotes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed_FeedItem_Upvotes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintPorter(dAtA, i, uint64(m.Upvotes))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	return len(dAtA) - i, nil
}
func (m *Feed_FeedItem_Downvotes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed_FeedItem_Downvotes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintPorter(dAtA, i, uint64(m.Downvotes))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	return len(dAtA) - i, nil
}
func (m *Feed_FeedItem_Comments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Feed_FeedItem_Comments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintPorter(dAtA, i, uint64(m.Comments))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x90
	return len(dAtA) - i, nil
}
func encodeVarintPorter(dAtA []byte, offset int, v uint64) int {
	offset -= sovPorter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PullFeedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Source != 0 {
		n += 1 + sovPorter(uint64(m.Source))
	}
	l = len(m.ContentId)
	if l > 0 {
		n += 1 + l + sovPorter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PullFeedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XData != nil {
		n += m.XData.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PullFeedResponse_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPorter(uint64(l))
	}
	return n
}
func (m *PullDBRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Source != 0 {
		n += 1 + sovPorter(uint64(m.Source))
	}
	l = len(m.ContentId)
	if l > 0 {
		n += 1 + l + sovPorter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PullDBResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPorter(uint64(len(k))) + 1 + len(v) + sovPorter(uint64(len(v)))
			n += mapEntrySize + 1 + sovPorter(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PullWikiRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Source != 0 {
		n += 1 + sovPorter(uint64(m.Source))
	}
	l = len(m.ContentId)
	if l > 0 {
		n += 1 + l + sovPorter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PullWikiResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPorter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PullDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Source != 0 {
		n += 1 + sovPorter(uint64(m.Source))
	}
	l = len(m.ContentId)
	if l > 0 {
		n += 1 + l + sovPorter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PullDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPorter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Source != 0 {
		n += 1 + sovPorter(uint64(m.Source))
	}
	l = len(m.ContentId)
	if l > 0 {
		n += 1 + l + sovPorter(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPorter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Feed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPorter(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovPorter(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPorter(uint64(l))
	}
	if m.XLanguage != nil {
		n += m.XLanguage.Size()
	}
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovPorter(uint64(l))
		}
	}
	if m.XImage != nil {
		n += m.XImage.Size()
	}
	if m.XItunesAuthor != nil {
		n += m.XItunesAuthor.Size()
	}
	if m.XItunesCategory != nil {
		n += m.XItunesCategory.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Feed_Language) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Language)
	n += 1 + l + sovPorter(uint64(l))
	return n
}
func (m *Feed_Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Image)
	n += 1 + l + sovPorter(uint64(l))
	return n
}
func (m *Feed_ItunesAuthor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ItunesAuthor)
	n += 1 + l + sovPorter(uint64(l))
	return n
}
func (m *Feed_ItunesCategory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ItunesCategory)
	n += 1 + l + sovPorter(uint64(l))
	return n
}
func (m *Feed_FeedItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPorter(uint64(l))
	}
	if m.XAuthor != nil {
		n += m.XAuthor.Size()
	}
	if m.XCategory != nil {
		n += m.XCategory.Size()
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPorter(uint64(l))
	}
	if m.XPubDate != nil {
		n += m.XPubDate.Size()
	}
	if m.XGuid != nil {
		n += m.XGuid.Size()
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovPorter(uint64(l))
	}
	if m.XEnclosureUrl != nil {
		n += m.XEnclosureUrl.Size()
	}
	if m.XEnclosureLength != nil {
		n += m.XEnclosureLength.Size()
	}
	if m.XEnclosureType != nil {
		n += m.XEnclosureType.Size()
	}
	if m.XItunesItemImage != nil {
		n += m.XItunesItemImage.Size()
	}
	if m.XItunesDuration != nil {
		n += m.XItunesDuration.Size()
	}
	if m.XUpvotes != nil {
		n += m.XUpvotes.Size()
	}
	if m.XDownvotes != nil {
		n += m.XDownvotes.Size()
	}
	if m.XComments != nil {
		n += m.XComments.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Feed_FeedItem_Author) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Author)
	n += 1 + l + sovPorter(uint64(l))
	return n
}
func (m *Feed_FeedItem_Category) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Category)
	n += 1 + l + sovPorter(uint64(l))
	return n
}
func (m *Feed_FeedItem_PubDate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PubDate != nil {
		l = m.PubDate.Size()
		n += 1 + l + sovPorter(uint64(l))
	}
	return n
}
func (m *Feed_FeedItem_Guid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Guid)
	n += 1 + l + sovPorter(uint64(l))
	return n
}
func (m *Feed_FeedItem_EnclosureUrl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EnclosureUrl)
	n += 1 + l + sovPorter(uint64(l))
	return n
}
func (m *Feed_FeedItem_EnclosureLength) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EnclosureLength)
	n += 1 + l + sovPorter(uint64(l))
	return n
}
func (m *Feed_FeedItem_EnclosureType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EnclosureType)
	n += 1 + l + sovPorter(uint64(l))
	return n
}
func (m *Feed_FeedItem_ItunesItemImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ItunesItemImage)
	n += 1 + l + sovPorter(uint64(l))
	return n
}
func (m *Feed_FeedItem_ItunesDuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ItunesDuration)
	n += 1 + l + sovPorter(uint64(l))
	return n
}
func (m *Feed_FeedItem_Upvotes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovPorter(uint64(m.Upvotes))
	return n
}
func (m *Feed_FeedItem_Downvotes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovPorter(uint64(m.Downvotes))
	return n
}
func (m *Feed_FeedItem_Comments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovPorter(uint64(m.Comments))
	return n
}

func sovPorter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPorter(x uint64) (n int) {
	return sovPorter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PullFeedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPorter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullFeedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullFeedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= FeedSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPorter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPorter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullFeedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPorter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullFeedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullFeedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Feed{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XData = &PullFeedResponse_Data{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPorter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPorter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullDBRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPorter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullDBRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullDBRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= DBSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPorter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPorter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullDBResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPorter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullDBResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullDBResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPorter
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPorter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPorter
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPorter
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPorter
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthPorter
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthPorter
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPorter(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPorter
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPorter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPorter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullWikiRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPorter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullWikiRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullWikiRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= DBSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPorter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPorter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullWikiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPorter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullWikiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullWikiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPorter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPorter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPorter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= DataSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPorter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPorter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPorter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPorter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPorter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPorter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= DataSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPorter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPorter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPorter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPorter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPorter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Feed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPorter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Feed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Feed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XLanguage = &Feed_Language{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &Feed_FeedItem{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XImage = &Feed_Image{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItunesAuthor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XItunesAuthor = &Feed_ItunesAuthor{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItunesCategory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XItunesCategory = &Feed_ItunesCategory{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPorter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPorter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Feed_FeedItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPorter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XAuthor = &Feed_FeedItem_Author{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XCategory = &Feed_FeedItem_Category{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &timestamppb.Timestamp{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.XPubDate = &Feed_FeedItem_PubDate{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XGuid = &Feed_FeedItem_Guid{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnclosureUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XEnclosureUrl = &Feed_FeedItem_EnclosureUrl{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnclosureLength", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XEnclosureLength = &Feed_FeedItem_EnclosureLength{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnclosureType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XEnclosureType = &Feed_FeedItem_EnclosureType{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItunesItemImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XItunesItemImage = &Feed_FeedItem_ItunesItemImage{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItunesDuration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPorter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPorter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XItunesDuration = &Feed_FeedItem_ItunesDuration{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upvotes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XUpvotes = &Feed_FeedItem_Upvotes{v}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downvotes", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XDownvotes = &Feed_FeedItem_Downvotes{v}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XComments = &Feed_FeedItem_Comments{v}
		default:
			iNdEx = preIndex
			skippy, err := skipPorter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPorter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPorter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPorter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPorter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPorter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPorter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPorter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPorter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPorter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPorter = fmt.Errorf("proto: unexpected end of group")
)
