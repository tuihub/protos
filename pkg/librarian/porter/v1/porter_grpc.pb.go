// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: librarian/porter/v1/porter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LibrarianPorterService_PullFeed_FullMethodName               = "/librarian.porter.v1.LibrarianPorterService/PullFeed"
	LibrarianPorterService_PushFeedItems_FullMethodName          = "/librarian.porter.v1.LibrarianPorterService/PushFeedItems"
	LibrarianPorterService_PullDB_FullMethodName                 = "/librarian.porter.v1.LibrarianPorterService/PullDB"
	LibrarianPorterService_PullWiki_FullMethodName               = "/librarian.porter.v1.LibrarianPorterService/PullWiki"
	LibrarianPorterService_PullData_FullMethodName               = "/librarian.porter.v1.LibrarianPorterService/PullData"
	LibrarianPorterService_PushData_FullMethodName               = "/librarian.porter.v1.LibrarianPorterService/PushData"
	LibrarianPorterService_PullAccount_FullMethodName            = "/librarian.porter.v1.LibrarianPorterService/PullAccount"
	LibrarianPorterService_PullApp_FullMethodName                = "/librarian.porter.v1.LibrarianPorterService/PullApp"
	LibrarianPorterService_PullAccountAppRelation_FullMethodName = "/librarian.porter.v1.LibrarianPorterService/PullAccountAppRelation"
)

// LibrarianPorterServiceClient is the client API for LibrarianPorterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibrarianPorterServiceClient interface {
	PullFeed(ctx context.Context, in *PullFeedRequest, opts ...grpc.CallOption) (*PullFeedResponse, error)
	PushFeedItems(ctx context.Context, in *PushFeedItemsRequest, opts ...grpc.CallOption) (*PushFeedItemsResponse, error)
	PullDB(ctx context.Context, in *PullDBRequest, opts ...grpc.CallOption) (*PullDBResponse, error)
	PullWiki(ctx context.Context, in *PullWikiRequest, opts ...grpc.CallOption) (*PullWikiResponse, error)
	PullData(ctx context.Context, in *PullDataRequest, opts ...grpc.CallOption) (LibrarianPorterService_PullDataClient, error)
	PushData(ctx context.Context, opts ...grpc.CallOption) (LibrarianPorterService_PushDataClient, error)
	PullAccount(ctx context.Context, in *PullAccountRequest, opts ...grpc.CallOption) (*PullAccountResponse, error)
	PullApp(ctx context.Context, in *PullAppRequest, opts ...grpc.CallOption) (*PullAppResponse, error)
	PullAccountAppRelation(ctx context.Context, in *PullAccountAppRelationRequest, opts ...grpc.CallOption) (*PullAccountAppRelationResponse, error)
}

type librarianPorterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibrarianPorterServiceClient(cc grpc.ClientConnInterface) LibrarianPorterServiceClient {
	return &librarianPorterServiceClient{cc}
}

func (c *librarianPorterServiceClient) PullFeed(ctx context.Context, in *PullFeedRequest, opts ...grpc.CallOption) (*PullFeedResponse, error) {
	out := new(PullFeedResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_PullFeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PushFeedItems(ctx context.Context, in *PushFeedItemsRequest, opts ...grpc.CallOption) (*PushFeedItemsResponse, error) {
	out := new(PushFeedItemsResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_PushFeedItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PullDB(ctx context.Context, in *PullDBRequest, opts ...grpc.CallOption) (*PullDBResponse, error) {
	out := new(PullDBResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_PullDB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PullWiki(ctx context.Context, in *PullWikiRequest, opts ...grpc.CallOption) (*PullWikiResponse, error) {
	out := new(PullWikiResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_PullWiki_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PullData(ctx context.Context, in *PullDataRequest, opts ...grpc.CallOption) (LibrarianPorterService_PullDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianPorterService_ServiceDesc.Streams[0], LibrarianPorterService_PullData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianPorterServicePullDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LibrarianPorterService_PullDataClient interface {
	Recv() (*PullDataResponse, error)
	grpc.ClientStream
}

type librarianPorterServicePullDataClient struct {
	grpc.ClientStream
}

func (x *librarianPorterServicePullDataClient) Recv() (*PullDataResponse, error) {
	m := new(PullDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianPorterServiceClient) PushData(ctx context.Context, opts ...grpc.CallOption) (LibrarianPorterService_PushDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianPorterService_ServiceDesc.Streams[1], LibrarianPorterService_PushData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianPorterServicePushDataClient{stream}
	return x, nil
}

type LibrarianPorterService_PushDataClient interface {
	Send(*PushDataRequest) error
	CloseAndRecv() (*PushDataResponse, error)
	grpc.ClientStream
}

type librarianPorterServicePushDataClient struct {
	grpc.ClientStream
}

func (x *librarianPorterServicePushDataClient) Send(m *PushDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianPorterServicePushDataClient) CloseAndRecv() (*PushDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PushDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianPorterServiceClient) PullAccount(ctx context.Context, in *PullAccountRequest, opts ...grpc.CallOption) (*PullAccountResponse, error) {
	out := new(PullAccountResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_PullAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PullApp(ctx context.Context, in *PullAppRequest, opts ...grpc.CallOption) (*PullAppResponse, error) {
	out := new(PullAppResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_PullApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PullAccountAppRelation(ctx context.Context, in *PullAccountAppRelationRequest, opts ...grpc.CallOption) (*PullAccountAppRelationResponse, error) {
	out := new(PullAccountAppRelationResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_PullAccountAppRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibrarianPorterServiceServer is the server API for LibrarianPorterService service.
// All implementations must embed UnimplementedLibrarianPorterServiceServer
// for forward compatibility
type LibrarianPorterServiceServer interface {
	PullFeed(context.Context, *PullFeedRequest) (*PullFeedResponse, error)
	PushFeedItems(context.Context, *PushFeedItemsRequest) (*PushFeedItemsResponse, error)
	PullDB(context.Context, *PullDBRequest) (*PullDBResponse, error)
	PullWiki(context.Context, *PullWikiRequest) (*PullWikiResponse, error)
	PullData(*PullDataRequest, LibrarianPorterService_PullDataServer) error
	PushData(LibrarianPorterService_PushDataServer) error
	PullAccount(context.Context, *PullAccountRequest) (*PullAccountResponse, error)
	PullApp(context.Context, *PullAppRequest) (*PullAppResponse, error)
	PullAccountAppRelation(context.Context, *PullAccountAppRelationRequest) (*PullAccountAppRelationResponse, error)
	mustEmbedUnimplementedLibrarianPorterServiceServer()
}

// UnimplementedLibrarianPorterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLibrarianPorterServiceServer struct {
}

func (UnimplementedLibrarianPorterServiceServer) PullFeed(context.Context, *PullFeedRequest) (*PullFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullFeed not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PushFeedItems(context.Context, *PushFeedItemsRequest) (*PushFeedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushFeedItems not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PullDB(context.Context, *PullDBRequest) (*PullDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullDB not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PullWiki(context.Context, *PullWikiRequest) (*PullWikiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullWiki not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PullData(*PullDataRequest, LibrarianPorterService_PullDataServer) error {
	return status.Errorf(codes.Unimplemented, "method PullData not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PushData(LibrarianPorterService_PushDataServer) error {
	return status.Errorf(codes.Unimplemented, "method PushData not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PullAccount(context.Context, *PullAccountRequest) (*PullAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullAccount not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PullApp(context.Context, *PullAppRequest) (*PullAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullApp not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PullAccountAppRelation(context.Context, *PullAccountAppRelationRequest) (*PullAccountAppRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullAccountAppRelation not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) mustEmbedUnimplementedLibrarianPorterServiceServer() {
}

// UnsafeLibrarianPorterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibrarianPorterServiceServer will
// result in compilation errors.
type UnsafeLibrarianPorterServiceServer interface {
	mustEmbedUnimplementedLibrarianPorterServiceServer()
}

func RegisterLibrarianPorterServiceServer(s grpc.ServiceRegistrar, srv LibrarianPorterServiceServer) {
	s.RegisterService(&LibrarianPorterService_ServiceDesc, srv)
}

func _LibrarianPorterService_PullFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PullFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_PullFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PullFeed(ctx, req.(*PullFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PushFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PushFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_PushFeedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PushFeedItems(ctx, req.(*PushFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PullDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PullDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_PullDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PullDB(ctx, req.(*PullDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PullWiki_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullWikiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PullWiki(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_PullWiki_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PullWiki(ctx, req.(*PullWikiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PullData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LibrarianPorterServiceServer).PullData(m, &librarianPorterServicePullDataServer{stream})
}

type LibrarianPorterService_PullDataServer interface {
	Send(*PullDataResponse) error
	grpc.ServerStream
}

type librarianPorterServicePullDataServer struct {
	grpc.ServerStream
}

func (x *librarianPorterServicePullDataServer) Send(m *PullDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LibrarianPorterService_PushData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianPorterServiceServer).PushData(&librarianPorterServicePushDataServer{stream})
}

type LibrarianPorterService_PushDataServer interface {
	SendAndClose(*PushDataResponse) error
	Recv() (*PushDataRequest, error)
	grpc.ServerStream
}

type librarianPorterServicePushDataServer struct {
	grpc.ServerStream
}

func (x *librarianPorterServicePushDataServer) SendAndClose(m *PushDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianPorterServicePushDataServer) Recv() (*PushDataRequest, error) {
	m := new(PushDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LibrarianPorterService_PullAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PullAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_PullAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PullAccount(ctx, req.(*PullAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PullApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PullApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_PullApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PullApp(ctx, req.(*PullAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PullAccountAppRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullAccountAppRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PullAccountAppRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_PullAccountAppRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PullAccountAppRelation(ctx, req.(*PullAccountAppRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibrarianPorterService_ServiceDesc is the grpc.ServiceDesc for LibrarianPorterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibrarianPorterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "librarian.porter.v1.LibrarianPorterService",
	HandlerType: (*LibrarianPorterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullFeed",
			Handler:    _LibrarianPorterService_PullFeed_Handler,
		},
		{
			MethodName: "PushFeedItems",
			Handler:    _LibrarianPorterService_PushFeedItems_Handler,
		},
		{
			MethodName: "PullDB",
			Handler:    _LibrarianPorterService_PullDB_Handler,
		},
		{
			MethodName: "PullWiki",
			Handler:    _LibrarianPorterService_PullWiki_Handler,
		},
		{
			MethodName: "PullAccount",
			Handler:    _LibrarianPorterService_PullAccount_Handler,
		},
		{
			MethodName: "PullApp",
			Handler:    _LibrarianPorterService_PullApp_Handler,
		},
		{
			MethodName: "PullAccountAppRelation",
			Handler:    _LibrarianPorterService_PullAccountAppRelation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullData",
			Handler:       _LibrarianPorterService_PullData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushData",
			Handler:       _LibrarianPorterService_PushData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "librarian/porter/v1/porter.proto",
}
