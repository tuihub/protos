// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: librarian/porter/v1/porter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LibrarianPorterService_GetPorterInformation_FullMethodName       = "/librarian.porter.v1.LibrarianPorterService/GetPorterInformation"
	LibrarianPorterService_EnablePorter_FullMethodName               = "/librarian.porter.v1.LibrarianPorterService/EnablePorter"
	LibrarianPorterService_EnableContext_FullMethodName              = "/librarian.porter.v1.LibrarianPorterService/EnableContext"
	LibrarianPorterService_DisableContext_FullMethodName             = "/librarian.porter.v1.LibrarianPorterService/DisableContext"
	LibrarianPorterService_PullAccount_FullMethodName                = "/librarian.porter.v1.LibrarianPorterService/PullAccount"
	LibrarianPorterService_PullAppInfo_FullMethodName                = "/librarian.porter.v1.LibrarianPorterService/PullAppInfo"
	LibrarianPorterService_PullAccountAppInfoRelation_FullMethodName = "/librarian.porter.v1.LibrarianPorterService/PullAccountAppInfoRelation"
	LibrarianPorterService_SearchAppInfo_FullMethodName              = "/librarian.porter.v1.LibrarianPorterService/SearchAppInfo"
	LibrarianPorterService_PullFeed_FullMethodName                   = "/librarian.porter.v1.LibrarianPorterService/PullFeed"
	LibrarianPorterService_ExecFeedItemAction_FullMethodName         = "/librarian.porter.v1.LibrarianPorterService/ExecFeedItemAction"
	LibrarianPorterService_EnableFeedSetter_FullMethodName           = "/librarian.porter.v1.LibrarianPorterService/EnableFeedSetter"
	LibrarianPorterService_DisableFeedSetter_FullMethodName          = "/librarian.porter.v1.LibrarianPorterService/DisableFeedSetter"
	LibrarianPorterService_EnableFeedGetter_FullMethodName           = "/librarian.porter.v1.LibrarianPorterService/EnableFeedGetter"
	LibrarianPorterService_DisableFeedGetter_FullMethodName          = "/librarian.porter.v1.LibrarianPorterService/DisableFeedGetter"
	LibrarianPorterService_PushFeedItems_FullMethodName              = "/librarian.porter.v1.LibrarianPorterService/PushFeedItems"
)

// LibrarianPorterServiceClient is the client API for LibrarianPorterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibrarianPorterServiceClient interface {
	GetPorterInformation(ctx context.Context, in *GetPorterInformationRequest, opts ...grpc.CallOption) (*GetPorterInformationResponse, error)
	// Used to enable porter and heartbeat.
	EnablePorter(ctx context.Context, in *EnablePorterRequest, opts ...grpc.CallOption) (*EnablePorterResponse, error)
	EnableContext(ctx context.Context, in *EnableContextRequest, opts ...grpc.CallOption) (*EnableContextResponse, error)
	DisableContext(ctx context.Context, in *DisableContextRequest, opts ...grpc.CallOption) (*DisableContextResponse, error)
	// `Tiphereth`
	PullAccount(ctx context.Context, in *PullAccountRequest, opts ...grpc.CallOption) (*PullAccountResponse, error)
	// `Gebura`
	PullAppInfo(ctx context.Context, in *PullAppInfoRequest, opts ...grpc.CallOption) (*PullAppInfoResponse, error)
	// `Gebura`
	PullAccountAppInfoRelation(ctx context.Context, in *PullAccountAppInfoRelationRequest, opts ...grpc.CallOption) (*PullAccountAppInfoRelationResponse, error)
	// `Gebura`
	SearchAppInfo(ctx context.Context, in *SearchAppInfoRequest, opts ...grpc.CallOption) (*SearchAppInfoResponse, error)
	// `Yesod`
	PullFeed(ctx context.Context, in *PullFeedRequest, opts ...grpc.CallOption) (*PullFeedResponse, error)
	// `Yesod`
	ExecFeedItemAction(ctx context.Context, in *ExecFeedItemActionRequest, opts ...grpc.CallOption) (*ExecFeedItemActionResponse, error)
	// `Yesod` Enabled Setter can add items to feed through `LibrarianSephirahService.PUpsertFeed`
	// without extra permissions.
	EnableFeedSetter(ctx context.Context, in *EnableFeedSetterRequest, opts ...grpc.CallOption) (*EnableFeedSetterResponse, error)
	// `Yesod`
	DisableFeedSetter(ctx context.Context, in *DisableFeedSetterRequest, opts ...grpc.CallOption) (*DisableFeedSetterResponse, error)
	// `Yesod` Enabled Getter can get items from feed through `LibrarianSephirahService.PGetFeed`
	// without extra permissions.
	EnableFeedGetter(ctx context.Context, in *EnableFeedGetterRequest, opts ...grpc.CallOption) (*EnableFeedGetterResponse, error)
	// `Yesod`
	DisableFeedGetter(ctx context.Context, in *DisableFeedGetterRequest, opts ...grpc.CallOption) (*DisableFeedGetterResponse, error)
	// `Netzach`
	PushFeedItems(ctx context.Context, in *PushFeedItemsRequest, opts ...grpc.CallOption) (*PushFeedItemsResponse, error)
}

type librarianPorterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibrarianPorterServiceClient(cc grpc.ClientConnInterface) LibrarianPorterServiceClient {
	return &librarianPorterServiceClient{cc}
}

func (c *librarianPorterServiceClient) GetPorterInformation(ctx context.Context, in *GetPorterInformationRequest, opts ...grpc.CallOption) (*GetPorterInformationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPorterInformationResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_GetPorterInformation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) EnablePorter(ctx context.Context, in *EnablePorterRequest, opts ...grpc.CallOption) (*EnablePorterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnablePorterResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_EnablePorter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) EnableContext(ctx context.Context, in *EnableContextRequest, opts ...grpc.CallOption) (*EnableContextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableContextResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_EnableContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) DisableContext(ctx context.Context, in *DisableContextRequest, opts ...grpc.CallOption) (*DisableContextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableContextResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_DisableContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PullAccount(ctx context.Context, in *PullAccountRequest, opts ...grpc.CallOption) (*PullAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PullAccountResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_PullAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PullAppInfo(ctx context.Context, in *PullAppInfoRequest, opts ...grpc.CallOption) (*PullAppInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PullAppInfoResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_PullAppInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PullAccountAppInfoRelation(ctx context.Context, in *PullAccountAppInfoRelationRequest, opts ...grpc.CallOption) (*PullAccountAppInfoRelationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PullAccountAppInfoRelationResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_PullAccountAppInfoRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) SearchAppInfo(ctx context.Context, in *SearchAppInfoRequest, opts ...grpc.CallOption) (*SearchAppInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchAppInfoResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_SearchAppInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PullFeed(ctx context.Context, in *PullFeedRequest, opts ...grpc.CallOption) (*PullFeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PullFeedResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_PullFeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) ExecFeedItemAction(ctx context.Context, in *ExecFeedItemActionRequest, opts ...grpc.CallOption) (*ExecFeedItemActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecFeedItemActionResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_ExecFeedItemAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) EnableFeedSetter(ctx context.Context, in *EnableFeedSetterRequest, opts ...grpc.CallOption) (*EnableFeedSetterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableFeedSetterResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_EnableFeedSetter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) DisableFeedSetter(ctx context.Context, in *DisableFeedSetterRequest, opts ...grpc.CallOption) (*DisableFeedSetterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableFeedSetterResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_DisableFeedSetter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) EnableFeedGetter(ctx context.Context, in *EnableFeedGetterRequest, opts ...grpc.CallOption) (*EnableFeedGetterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnableFeedGetterResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_EnableFeedGetter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) DisableFeedGetter(ctx context.Context, in *DisableFeedGetterRequest, opts ...grpc.CallOption) (*DisableFeedGetterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisableFeedGetterResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_DisableFeedGetter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PushFeedItems(ctx context.Context, in *PushFeedItemsRequest, opts ...grpc.CallOption) (*PushFeedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushFeedItemsResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_PushFeedItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibrarianPorterServiceServer is the server API for LibrarianPorterService service.
// All implementations must embed UnimplementedLibrarianPorterServiceServer
// for forward compatibility.
type LibrarianPorterServiceServer interface {
	GetPorterInformation(context.Context, *GetPorterInformationRequest) (*GetPorterInformationResponse, error)
	// Used to enable porter and heartbeat.
	EnablePorter(context.Context, *EnablePorterRequest) (*EnablePorterResponse, error)
	EnableContext(context.Context, *EnableContextRequest) (*EnableContextResponse, error)
	DisableContext(context.Context, *DisableContextRequest) (*DisableContextResponse, error)
	// `Tiphereth`
	PullAccount(context.Context, *PullAccountRequest) (*PullAccountResponse, error)
	// `Gebura`
	PullAppInfo(context.Context, *PullAppInfoRequest) (*PullAppInfoResponse, error)
	// `Gebura`
	PullAccountAppInfoRelation(context.Context, *PullAccountAppInfoRelationRequest) (*PullAccountAppInfoRelationResponse, error)
	// `Gebura`
	SearchAppInfo(context.Context, *SearchAppInfoRequest) (*SearchAppInfoResponse, error)
	// `Yesod`
	PullFeed(context.Context, *PullFeedRequest) (*PullFeedResponse, error)
	// `Yesod`
	ExecFeedItemAction(context.Context, *ExecFeedItemActionRequest) (*ExecFeedItemActionResponse, error)
	// `Yesod` Enabled Setter can add items to feed through `LibrarianSephirahService.PUpsertFeed`
	// without extra permissions.
	EnableFeedSetter(context.Context, *EnableFeedSetterRequest) (*EnableFeedSetterResponse, error)
	// `Yesod`
	DisableFeedSetter(context.Context, *DisableFeedSetterRequest) (*DisableFeedSetterResponse, error)
	// `Yesod` Enabled Getter can get items from feed through `LibrarianSephirahService.PGetFeed`
	// without extra permissions.
	EnableFeedGetter(context.Context, *EnableFeedGetterRequest) (*EnableFeedGetterResponse, error)
	// `Yesod`
	DisableFeedGetter(context.Context, *DisableFeedGetterRequest) (*DisableFeedGetterResponse, error)
	// `Netzach`
	PushFeedItems(context.Context, *PushFeedItemsRequest) (*PushFeedItemsResponse, error)
	mustEmbedUnimplementedLibrarianPorterServiceServer()
}

// UnimplementedLibrarianPorterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLibrarianPorterServiceServer struct{}

func (UnimplementedLibrarianPorterServiceServer) GetPorterInformation(context.Context, *GetPorterInformationRequest) (*GetPorterInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPorterInformation not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) EnablePorter(context.Context, *EnablePorterRequest) (*EnablePorterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePorter not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) EnableContext(context.Context, *EnableContextRequest) (*EnableContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableContext not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) DisableContext(context.Context, *DisableContextRequest) (*DisableContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableContext not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PullAccount(context.Context, *PullAccountRequest) (*PullAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullAccount not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PullAppInfo(context.Context, *PullAppInfoRequest) (*PullAppInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullAppInfo not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PullAccountAppInfoRelation(context.Context, *PullAccountAppInfoRelationRequest) (*PullAccountAppInfoRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullAccountAppInfoRelation not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) SearchAppInfo(context.Context, *SearchAppInfoRequest) (*SearchAppInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAppInfo not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PullFeed(context.Context, *PullFeedRequest) (*PullFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullFeed not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) ExecFeedItemAction(context.Context, *ExecFeedItemActionRequest) (*ExecFeedItemActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecFeedItemAction not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) EnableFeedSetter(context.Context, *EnableFeedSetterRequest) (*EnableFeedSetterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableFeedSetter not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) DisableFeedSetter(context.Context, *DisableFeedSetterRequest) (*DisableFeedSetterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableFeedSetter not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) EnableFeedGetter(context.Context, *EnableFeedGetterRequest) (*EnableFeedGetterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableFeedGetter not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) DisableFeedGetter(context.Context, *DisableFeedGetterRequest) (*DisableFeedGetterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableFeedGetter not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PushFeedItems(context.Context, *PushFeedItemsRequest) (*PushFeedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushFeedItems not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) mustEmbedUnimplementedLibrarianPorterServiceServer() {
}
func (UnimplementedLibrarianPorterServiceServer) testEmbeddedByValue() {}

// UnsafeLibrarianPorterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibrarianPorterServiceServer will
// result in compilation errors.
type UnsafeLibrarianPorterServiceServer interface {
	mustEmbedUnimplementedLibrarianPorterServiceServer()
}

func RegisterLibrarianPorterServiceServer(s grpc.ServiceRegistrar, srv LibrarianPorterServiceServer) {
	// If the following call pancis, it indicates UnimplementedLibrarianPorterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LibrarianPorterService_ServiceDesc, srv)
}

func _LibrarianPorterService_GetPorterInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPorterInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).GetPorterInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_GetPorterInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).GetPorterInformation(ctx, req.(*GetPorterInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_EnablePorter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePorterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).EnablePorter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_EnablePorter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).EnablePorter(ctx, req.(*EnablePorterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_EnableContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).EnableContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_EnableContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).EnableContext(ctx, req.(*EnableContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_DisableContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).DisableContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_DisableContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).DisableContext(ctx, req.(*DisableContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PullAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PullAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_PullAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PullAccount(ctx, req.(*PullAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PullAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullAppInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PullAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_PullAppInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PullAppInfo(ctx, req.(*PullAppInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PullAccountAppInfoRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullAccountAppInfoRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PullAccountAppInfoRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_PullAccountAppInfoRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PullAccountAppInfoRelation(ctx, req.(*PullAccountAppInfoRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_SearchAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAppInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).SearchAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_SearchAppInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).SearchAppInfo(ctx, req.(*SearchAppInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PullFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PullFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_PullFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PullFeed(ctx, req.(*PullFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_ExecFeedItemAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecFeedItemActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).ExecFeedItemAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_ExecFeedItemAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).ExecFeedItemAction(ctx, req.(*ExecFeedItemActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_EnableFeedSetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableFeedSetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).EnableFeedSetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_EnableFeedSetter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).EnableFeedSetter(ctx, req.(*EnableFeedSetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_DisableFeedSetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableFeedSetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).DisableFeedSetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_DisableFeedSetter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).DisableFeedSetter(ctx, req.(*DisableFeedSetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_EnableFeedGetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableFeedGetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).EnableFeedGetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_EnableFeedGetter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).EnableFeedGetter(ctx, req.(*EnableFeedGetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_DisableFeedGetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableFeedGetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).DisableFeedGetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_DisableFeedGetter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).DisableFeedGetter(ctx, req.(*DisableFeedGetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PushFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PushFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_PushFeedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PushFeedItems(ctx, req.(*PushFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibrarianPorterService_ServiceDesc is the grpc.ServiceDesc for LibrarianPorterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibrarianPorterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "librarian.porter.v1.LibrarianPorterService",
	HandlerType: (*LibrarianPorterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPorterInformation",
			Handler:    _LibrarianPorterService_GetPorterInformation_Handler,
		},
		{
			MethodName: "EnablePorter",
			Handler:    _LibrarianPorterService_EnablePorter_Handler,
		},
		{
			MethodName: "EnableContext",
			Handler:    _LibrarianPorterService_EnableContext_Handler,
		},
		{
			MethodName: "DisableContext",
			Handler:    _LibrarianPorterService_DisableContext_Handler,
		},
		{
			MethodName: "PullAccount",
			Handler:    _LibrarianPorterService_PullAccount_Handler,
		},
		{
			MethodName: "PullAppInfo",
			Handler:    _LibrarianPorterService_PullAppInfo_Handler,
		},
		{
			MethodName: "PullAccountAppInfoRelation",
			Handler:    _LibrarianPorterService_PullAccountAppInfoRelation_Handler,
		},
		{
			MethodName: "SearchAppInfo",
			Handler:    _LibrarianPorterService_SearchAppInfo_Handler,
		},
		{
			MethodName: "PullFeed",
			Handler:    _LibrarianPorterService_PullFeed_Handler,
		},
		{
			MethodName: "ExecFeedItemAction",
			Handler:    _LibrarianPorterService_ExecFeedItemAction_Handler,
		},
		{
			MethodName: "EnableFeedSetter",
			Handler:    _LibrarianPorterService_EnableFeedSetter_Handler,
		},
		{
			MethodName: "DisableFeedSetter",
			Handler:    _LibrarianPorterService_DisableFeedSetter_Handler,
		},
		{
			MethodName: "EnableFeedGetter",
			Handler:    _LibrarianPorterService_EnableFeedGetter_Handler,
		},
		{
			MethodName: "DisableFeedGetter",
			Handler:    _LibrarianPorterService_DisableFeedGetter_Handler,
		},
		{
			MethodName: "PushFeedItems",
			Handler:    _LibrarianPorterService_PushFeedItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "librarian/porter/v1/porter.proto",
}
