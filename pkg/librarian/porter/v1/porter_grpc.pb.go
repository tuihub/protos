// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: librarian/porter/v1/porter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LibrarianPorterService_GetPorterInformation_FullMethodName   = "/librarian.porter.v1.LibrarianPorterService/GetPorterInformation"
	LibrarianPorterService_EnablePorter_FullMethodName           = "/librarian.porter.v1.LibrarianPorterService/EnablePorter"
	LibrarianPorterService_PullAccount_FullMethodName            = "/librarian.porter.v1.LibrarianPorterService/PullAccount"
	LibrarianPorterService_PullApp_FullMethodName                = "/librarian.porter.v1.LibrarianPorterService/PullApp"
	LibrarianPorterService_PullAccountAppRelation_FullMethodName = "/librarian.porter.v1.LibrarianPorterService/PullAccountAppRelation"
	LibrarianPorterService_PullFeed_FullMethodName               = "/librarian.porter.v1.LibrarianPorterService/PullFeed"
	LibrarianPorterService_PushFeedItems_FullMethodName          = "/librarian.porter.v1.LibrarianPorterService/PushFeedItems"
)

// LibrarianPorterServiceClient is the client API for LibrarianPorterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibrarianPorterServiceClient interface {
	GetPorterInformation(ctx context.Context, in *GetPorterInformationRequest, opts ...grpc.CallOption) (*GetPorterInformationResponse, error)
	EnablePorter(ctx context.Context, in *EnablePorterRequest, opts ...grpc.CallOption) (*EnablePorterResponse, error)
	// `Tiphereth`
	PullAccount(ctx context.Context, in *PullAccountRequest, opts ...grpc.CallOption) (*PullAccountResponse, error)
	// `Gebura`
	PullApp(ctx context.Context, in *PullAppRequest, opts ...grpc.CallOption) (*PullAppResponse, error)
	// `Gebura`
	PullAccountAppRelation(ctx context.Context, in *PullAccountAppRelationRequest, opts ...grpc.CallOption) (*PullAccountAppRelationResponse, error)
	// `Yesod`
	PullFeed(ctx context.Context, in *PullFeedRequest, opts ...grpc.CallOption) (*PullFeedResponse, error)
	// `Yesod`
	PushFeedItems(ctx context.Context, in *PushFeedItemsRequest, opts ...grpc.CallOption) (*PushFeedItemsResponse, error)
}

type librarianPorterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibrarianPorterServiceClient(cc grpc.ClientConnInterface) LibrarianPorterServiceClient {
	return &librarianPorterServiceClient{cc}
}

func (c *librarianPorterServiceClient) GetPorterInformation(ctx context.Context, in *GetPorterInformationRequest, opts ...grpc.CallOption) (*GetPorterInformationResponse, error) {
	out := new(GetPorterInformationResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_GetPorterInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) EnablePorter(ctx context.Context, in *EnablePorterRequest, opts ...grpc.CallOption) (*EnablePorterResponse, error) {
	out := new(EnablePorterResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_EnablePorter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PullAccount(ctx context.Context, in *PullAccountRequest, opts ...grpc.CallOption) (*PullAccountResponse, error) {
	out := new(PullAccountResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_PullAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PullApp(ctx context.Context, in *PullAppRequest, opts ...grpc.CallOption) (*PullAppResponse, error) {
	out := new(PullAppResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_PullApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PullAccountAppRelation(ctx context.Context, in *PullAccountAppRelationRequest, opts ...grpc.CallOption) (*PullAccountAppRelationResponse, error) {
	out := new(PullAccountAppRelationResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_PullAccountAppRelation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PullFeed(ctx context.Context, in *PullFeedRequest, opts ...grpc.CallOption) (*PullFeedResponse, error) {
	out := new(PullFeedResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_PullFeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PushFeedItems(ctx context.Context, in *PushFeedItemsRequest, opts ...grpc.CallOption) (*PushFeedItemsResponse, error) {
	out := new(PushFeedItemsResponse)
	err := c.cc.Invoke(ctx, LibrarianPorterService_PushFeedItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibrarianPorterServiceServer is the server API for LibrarianPorterService service.
// All implementations must embed UnimplementedLibrarianPorterServiceServer
// for forward compatibility
type LibrarianPorterServiceServer interface {
	GetPorterInformation(context.Context, *GetPorterInformationRequest) (*GetPorterInformationResponse, error)
	EnablePorter(context.Context, *EnablePorterRequest) (*EnablePorterResponse, error)
	// `Tiphereth`
	PullAccount(context.Context, *PullAccountRequest) (*PullAccountResponse, error)
	// `Gebura`
	PullApp(context.Context, *PullAppRequest) (*PullAppResponse, error)
	// `Gebura`
	PullAccountAppRelation(context.Context, *PullAccountAppRelationRequest) (*PullAccountAppRelationResponse, error)
	// `Yesod`
	PullFeed(context.Context, *PullFeedRequest) (*PullFeedResponse, error)
	// `Yesod`
	PushFeedItems(context.Context, *PushFeedItemsRequest) (*PushFeedItemsResponse, error)
	mustEmbedUnimplementedLibrarianPorterServiceServer()
}

// UnimplementedLibrarianPorterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLibrarianPorterServiceServer struct {
}

func (UnimplementedLibrarianPorterServiceServer) GetPorterInformation(context.Context, *GetPorterInformationRequest) (*GetPorterInformationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPorterInformation not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) EnablePorter(context.Context, *EnablePorterRequest) (*EnablePorterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePorter not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PullAccount(context.Context, *PullAccountRequest) (*PullAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullAccount not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PullApp(context.Context, *PullAppRequest) (*PullAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullApp not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PullAccountAppRelation(context.Context, *PullAccountAppRelationRequest) (*PullAccountAppRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullAccountAppRelation not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PullFeed(context.Context, *PullFeedRequest) (*PullFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullFeed not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PushFeedItems(context.Context, *PushFeedItemsRequest) (*PushFeedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushFeedItems not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) mustEmbedUnimplementedLibrarianPorterServiceServer() {
}

// UnsafeLibrarianPorterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibrarianPorterServiceServer will
// result in compilation errors.
type UnsafeLibrarianPorterServiceServer interface {
	mustEmbedUnimplementedLibrarianPorterServiceServer()
}

func RegisterLibrarianPorterServiceServer(s grpc.ServiceRegistrar, srv LibrarianPorterServiceServer) {
	s.RegisterService(&LibrarianPorterService_ServiceDesc, srv)
}

func _LibrarianPorterService_GetPorterInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPorterInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).GetPorterInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_GetPorterInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).GetPorterInformation(ctx, req.(*GetPorterInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_EnablePorter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePorterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).EnablePorter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_EnablePorter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).EnablePorter(ctx, req.(*EnablePorterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PullAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PullAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_PullAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PullAccount(ctx, req.(*PullAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PullApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PullApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_PullApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PullApp(ctx, req.(*PullAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PullAccountAppRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullAccountAppRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PullAccountAppRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_PullAccountAppRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PullAccountAppRelation(ctx, req.(*PullAccountAppRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PullFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PullFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_PullFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PullFeed(ctx, req.(*PullFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PushFeedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushFeedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PushFeedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LibrarianPorterService_PushFeedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PushFeedItems(ctx, req.(*PushFeedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LibrarianPorterService_ServiceDesc is the grpc.ServiceDesc for LibrarianPorterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibrarianPorterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "librarian.porter.v1.LibrarianPorterService",
	HandlerType: (*LibrarianPorterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPorterInformation",
			Handler:    _LibrarianPorterService_GetPorterInformation_Handler,
		},
		{
			MethodName: "EnablePorter",
			Handler:    _LibrarianPorterService_EnablePorter_Handler,
		},
		{
			MethodName: "PullAccount",
			Handler:    _LibrarianPorterService_PullAccount_Handler,
		},
		{
			MethodName: "PullApp",
			Handler:    _LibrarianPorterService_PullApp_Handler,
		},
		{
			MethodName: "PullAccountAppRelation",
			Handler:    _LibrarianPorterService_PullAccountAppRelation_Handler,
		},
		{
			MethodName: "PullFeed",
			Handler:    _LibrarianPorterService_PullFeed_Handler,
		},
		{
			MethodName: "PushFeedItems",
			Handler:    _LibrarianPorterService_PushFeedItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "librarian/porter/v1/porter.proto",
}
