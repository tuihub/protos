// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: librarian/porter/v1/porter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LibrarianPorterServiceClient is the client API for LibrarianPorterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibrarianPorterServiceClient interface {
	PullFeed(ctx context.Context, in *PullFeedRequest, opts ...grpc.CallOption) (*PullFeedResponse, error)
	PullDB(ctx context.Context, in *PullDBRequest, opts ...grpc.CallOption) (*PullDBResponse, error)
	PullWiki(ctx context.Context, in *PullWikiRequest, opts ...grpc.CallOption) (*PullWikiResponse, error)
	PullData(ctx context.Context, in *PullDataRequest, opts ...grpc.CallOption) (LibrarianPorterService_PullDataClient, error)
	PushData(ctx context.Context, opts ...grpc.CallOption) (LibrarianPorterService_PushDataClient, error)
}

type librarianPorterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibrarianPorterServiceClient(cc grpc.ClientConnInterface) LibrarianPorterServiceClient {
	return &librarianPorterServiceClient{cc}
}

func (c *librarianPorterServiceClient) PullFeed(ctx context.Context, in *PullFeedRequest, opts ...grpc.CallOption) (*PullFeedResponse, error) {
	out := new(PullFeedResponse)
	err := c.cc.Invoke(ctx, "/librarian.porter.v1.LibrarianPorterService/PullFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PullDB(ctx context.Context, in *PullDBRequest, opts ...grpc.CallOption) (*PullDBResponse, error) {
	out := new(PullDBResponse)
	err := c.cc.Invoke(ctx, "/librarian.porter.v1.LibrarianPorterService/PullDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PullWiki(ctx context.Context, in *PullWikiRequest, opts ...grpc.CallOption) (*PullWikiResponse, error) {
	out := new(PullWikiResponse)
	err := c.cc.Invoke(ctx, "/librarian.porter.v1.LibrarianPorterService/PullWiki", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librarianPorterServiceClient) PullData(ctx context.Context, in *PullDataRequest, opts ...grpc.CallOption) (LibrarianPorterService_PullDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianPorterService_ServiceDesc.Streams[0], "/librarian.porter.v1.LibrarianPorterService/PullData", opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianPorterServicePullDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LibrarianPorterService_PullDataClient interface {
	Recv() (*PullDataResponse, error)
	grpc.ClientStream
}

type librarianPorterServicePullDataClient struct {
	grpc.ClientStream
}

func (x *librarianPorterServicePullDataClient) Recv() (*PullDataResponse, error) {
	m := new(PullDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *librarianPorterServiceClient) PushData(ctx context.Context, opts ...grpc.CallOption) (LibrarianPorterService_PushDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &LibrarianPorterService_ServiceDesc.Streams[1], "/librarian.porter.v1.LibrarianPorterService/PushData", opts...)
	if err != nil {
		return nil, err
	}
	x := &librarianPorterServicePushDataClient{stream}
	return x, nil
}

type LibrarianPorterService_PushDataClient interface {
	Send(*PushDataRequest) error
	CloseAndRecv() (*PushDataResponse, error)
	grpc.ClientStream
}

type librarianPorterServicePushDataClient struct {
	grpc.ClientStream
}

func (x *librarianPorterServicePushDataClient) Send(m *PushDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *librarianPorterServicePushDataClient) CloseAndRecv() (*PushDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PushDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LibrarianPorterServiceServer is the server API for LibrarianPorterService service.
// All implementations should embed UnimplementedLibrarianPorterServiceServer
// for forward compatibility
type LibrarianPorterServiceServer interface {
	PullFeed(context.Context, *PullFeedRequest) (*PullFeedResponse, error)
	PullDB(context.Context, *PullDBRequest) (*PullDBResponse, error)
	PullWiki(context.Context, *PullWikiRequest) (*PullWikiResponse, error)
	PullData(*PullDataRequest, LibrarianPorterService_PullDataServer) error
	PushData(LibrarianPorterService_PushDataServer) error
}

// UnimplementedLibrarianPorterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLibrarianPorterServiceServer struct {
}

func (UnimplementedLibrarianPorterServiceServer) PullFeed(context.Context, *PullFeedRequest) (*PullFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullFeed not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PullDB(context.Context, *PullDBRequest) (*PullDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullDB not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PullWiki(context.Context, *PullWikiRequest) (*PullWikiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullWiki not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PullData(*PullDataRequest, LibrarianPorterService_PullDataServer) error {
	return status.Errorf(codes.Unimplemented, "method PullData not implemented")
}
func (UnimplementedLibrarianPorterServiceServer) PushData(LibrarianPorterService_PushDataServer) error {
	return status.Errorf(codes.Unimplemented, "method PushData not implemented")
}

// UnsafeLibrarianPorterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibrarianPorterServiceServer will
// result in compilation errors.
type UnsafeLibrarianPorterServiceServer interface {
	mustEmbedUnimplementedLibrarianPorterServiceServer()
}

func RegisterLibrarianPorterServiceServer(s grpc.ServiceRegistrar, srv LibrarianPorterServiceServer) {
	s.RegisterService(&LibrarianPorterService_ServiceDesc, srv)
}

func _LibrarianPorterService_PullFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PullFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.porter.v1.LibrarianPorterService/PullFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PullFeed(ctx, req.(*PullFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PullDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PullDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.porter.v1.LibrarianPorterService/PullDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PullDB(ctx, req.(*PullDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PullWiki_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullWikiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrarianPorterServiceServer).PullWiki(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarian.porter.v1.LibrarianPorterService/PullWiki",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrarianPorterServiceServer).PullWiki(ctx, req.(*PullWikiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LibrarianPorterService_PullData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LibrarianPorterServiceServer).PullData(m, &librarianPorterServicePullDataServer{stream})
}

type LibrarianPorterService_PullDataServer interface {
	Send(*PullDataResponse) error
	grpc.ServerStream
}

type librarianPorterServicePullDataServer struct {
	grpc.ServerStream
}

func (x *librarianPorterServicePullDataServer) Send(m *PullDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LibrarianPorterService_PushData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LibrarianPorterServiceServer).PushData(&librarianPorterServicePushDataServer{stream})
}

type LibrarianPorterService_PushDataServer interface {
	SendAndClose(*PushDataResponse) error
	Recv() (*PushDataRequest, error)
	grpc.ServerStream
}

type librarianPorterServicePushDataServer struct {
	grpc.ServerStream
}

func (x *librarianPorterServicePushDataServer) SendAndClose(m *PushDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *librarianPorterServicePushDataServer) Recv() (*PushDataRequest, error) {
	m := new(PushDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LibrarianPorterService_ServiceDesc is the grpc.ServiceDesc for LibrarianPorterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LibrarianPorterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "librarian.porter.v1.LibrarianPorterService",
	HandlerType: (*LibrarianPorterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullFeed",
			Handler:    _LibrarianPorterService_PullFeed_Handler,
		},
		{
			MethodName: "PullDB",
			Handler:    _LibrarianPorterService_PullDB_Handler,
		},
		{
			MethodName: "PullWiki",
			Handler:    _LibrarianPorterService_PullWiki_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullData",
			Handler:       _LibrarianPorterService_PullData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushData",
			Handler:       _LibrarianPorterService_PushData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "librarian/porter/v1/porter.proto",
}
