// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: librarian/sentinel/v1/sephirah_sentinel_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/tuihub/protos/pkg/librarian/sentinel/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LibrarianSephirahSentinelServiceName is the fully-qualified name of the
	// LibrarianSephirahSentinelService service.
	LibrarianSephirahSentinelServiceName = "librarian.sentinel.v1.LibrarianSephirahSentinelService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LibrarianSephirahSentinelServiceRefreshTokenProcedure is the fully-qualified name of the
	// LibrarianSephirahSentinelService's RefreshToken RPC.
	LibrarianSephirahSentinelServiceRefreshTokenProcedure = "/librarian.sentinel.v1.LibrarianSephirahSentinelService/RefreshToken"
	// LibrarianSephirahSentinelServiceHeartbeatProcedure is the fully-qualified name of the
	// LibrarianSephirahSentinelService's Heartbeat RPC.
	LibrarianSephirahSentinelServiceHeartbeatProcedure = "/librarian.sentinel.v1.LibrarianSephirahSentinelService/Heartbeat"
	// LibrarianSephirahSentinelServiceReportSentinelInformationProcedure is the fully-qualified name of
	// the LibrarianSephirahSentinelService's ReportSentinelInformation RPC.
	LibrarianSephirahSentinelServiceReportSentinelInformationProcedure = "/librarian.sentinel.v1.LibrarianSephirahSentinelService/ReportSentinelInformation"
	// LibrarianSephirahSentinelServiceReportAppBinariesProcedure is the fully-qualified name of the
	// LibrarianSephirahSentinelService's ReportAppBinaries RPC.
	LibrarianSephirahSentinelServiceReportAppBinariesProcedure = "/librarian.sentinel.v1.LibrarianSephirahSentinelService/ReportAppBinaries"
)

// LibrarianSephirahSentinelServiceClient is a client for the
// librarian.sentinel.v1.LibrarianSephirahSentinelService service.
type LibrarianSephirahSentinelServiceClient interface {
	// `Tiphereth` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	// `Tiphereth`
	Heartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error)
	// `Gebura`
	ReportSentinelInformation(context.Context, *connect.Request[v1.ReportSentinelInformationRequest]) (*connect.Response[v1.ReportSentinelInformationResponse], error)
	// `Gebura`
	// Full update, changes are handled by librarian
	ReportAppBinaries(context.Context, *connect.Request[v1.ReportAppBinariesRequest]) (*connect.Response[v1.ReportAppBinariesResponse], error)
}

// NewLibrarianSephirahSentinelServiceClient constructs a client for the
// librarian.sentinel.v1.LibrarianSephirahSentinelService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLibrarianSephirahSentinelServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LibrarianSephirahSentinelServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	librarianSephirahSentinelServiceMethods := v1.File_librarian_sentinel_v1_sephirah_sentinel_service_proto.Services().ByName("LibrarianSephirahSentinelService").Methods()
	return &librarianSephirahSentinelServiceClient{
		refreshToken: connect.NewClient[v1.RefreshTokenRequest, v1.RefreshTokenResponse](
			httpClient,
			baseURL+LibrarianSephirahSentinelServiceRefreshTokenProcedure,
			connect.WithSchema(librarianSephirahSentinelServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		heartbeat: connect.NewClient[v1.HeartbeatRequest, v1.HeartbeatResponse](
			httpClient,
			baseURL+LibrarianSephirahSentinelServiceHeartbeatProcedure,
			connect.WithSchema(librarianSephirahSentinelServiceMethods.ByName("Heartbeat")),
			connect.WithClientOptions(opts...),
		),
		reportSentinelInformation: connect.NewClient[v1.ReportSentinelInformationRequest, v1.ReportSentinelInformationResponse](
			httpClient,
			baseURL+LibrarianSephirahSentinelServiceReportSentinelInformationProcedure,
			connect.WithSchema(librarianSephirahSentinelServiceMethods.ByName("ReportSentinelInformation")),
			connect.WithClientOptions(opts...),
		),
		reportAppBinaries: connect.NewClient[v1.ReportAppBinariesRequest, v1.ReportAppBinariesResponse](
			httpClient,
			baseURL+LibrarianSephirahSentinelServiceReportAppBinariesProcedure,
			connect.WithSchema(librarianSephirahSentinelServiceMethods.ByName("ReportAppBinaries")),
			connect.WithClientOptions(opts...),
		),
	}
}

// librarianSephirahSentinelServiceClient implements LibrarianSephirahSentinelServiceClient.
type librarianSephirahSentinelServiceClient struct {
	refreshToken              *connect.Client[v1.RefreshTokenRequest, v1.RefreshTokenResponse]
	heartbeat                 *connect.Client[v1.HeartbeatRequest, v1.HeartbeatResponse]
	reportSentinelInformation *connect.Client[v1.ReportSentinelInformationRequest, v1.ReportSentinelInformationResponse]
	reportAppBinaries         *connect.Client[v1.ReportAppBinariesRequest, v1.ReportAppBinariesResponse]
}

// RefreshToken calls librarian.sentinel.v1.LibrarianSephirahSentinelService.RefreshToken.
func (c *librarianSephirahSentinelServiceClient) RefreshToken(ctx context.Context, req *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// Heartbeat calls librarian.sentinel.v1.LibrarianSephirahSentinelService.Heartbeat.
func (c *librarianSephirahSentinelServiceClient) Heartbeat(ctx context.Context, req *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error) {
	return c.heartbeat.CallUnary(ctx, req)
}

// ReportSentinelInformation calls
// librarian.sentinel.v1.LibrarianSephirahSentinelService.ReportSentinelInformation.
func (c *librarianSephirahSentinelServiceClient) ReportSentinelInformation(ctx context.Context, req *connect.Request[v1.ReportSentinelInformationRequest]) (*connect.Response[v1.ReportSentinelInformationResponse], error) {
	return c.reportSentinelInformation.CallUnary(ctx, req)
}

// ReportAppBinaries calls librarian.sentinel.v1.LibrarianSephirahSentinelService.ReportAppBinaries.
func (c *librarianSephirahSentinelServiceClient) ReportAppBinaries(ctx context.Context, req *connect.Request[v1.ReportAppBinariesRequest]) (*connect.Response[v1.ReportAppBinariesResponse], error) {
	return c.reportAppBinaries.CallUnary(ctx, req)
}

// LibrarianSephirahSentinelServiceHandler is an implementation of the
// librarian.sentinel.v1.LibrarianSephirahSentinelService service.
type LibrarianSephirahSentinelServiceHandler interface {
	// `Tiphereth` Use valid refresh_token and get two new token, a refresh_token can only be used once
	RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error)
	// `Tiphereth`
	Heartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error)
	// `Gebura`
	ReportSentinelInformation(context.Context, *connect.Request[v1.ReportSentinelInformationRequest]) (*connect.Response[v1.ReportSentinelInformationResponse], error)
	// `Gebura`
	// Full update, changes are handled by librarian
	ReportAppBinaries(context.Context, *connect.Request[v1.ReportAppBinariesRequest]) (*connect.Response[v1.ReportAppBinariesResponse], error)
}

// NewLibrarianSephirahSentinelServiceHandler builds an HTTP handler from the service
// implementation. It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLibrarianSephirahSentinelServiceHandler(svc LibrarianSephirahSentinelServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	librarianSephirahSentinelServiceMethods := v1.File_librarian_sentinel_v1_sephirah_sentinel_service_proto.Services().ByName("LibrarianSephirahSentinelService").Methods()
	librarianSephirahSentinelServiceRefreshTokenHandler := connect.NewUnaryHandler(
		LibrarianSephirahSentinelServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(librarianSephirahSentinelServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahSentinelServiceHeartbeatHandler := connect.NewUnaryHandler(
		LibrarianSephirahSentinelServiceHeartbeatProcedure,
		svc.Heartbeat,
		connect.WithSchema(librarianSephirahSentinelServiceMethods.ByName("Heartbeat")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahSentinelServiceReportSentinelInformationHandler := connect.NewUnaryHandler(
		LibrarianSephirahSentinelServiceReportSentinelInformationProcedure,
		svc.ReportSentinelInformation,
		connect.WithSchema(librarianSephirahSentinelServiceMethods.ByName("ReportSentinelInformation")),
		connect.WithHandlerOptions(opts...),
	)
	librarianSephirahSentinelServiceReportAppBinariesHandler := connect.NewUnaryHandler(
		LibrarianSephirahSentinelServiceReportAppBinariesProcedure,
		svc.ReportAppBinaries,
		connect.WithSchema(librarianSephirahSentinelServiceMethods.ByName("ReportAppBinaries")),
		connect.WithHandlerOptions(opts...),
	)
	return "/librarian.sentinel.v1.LibrarianSephirahSentinelService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LibrarianSephirahSentinelServiceRefreshTokenProcedure:
			librarianSephirahSentinelServiceRefreshTokenHandler.ServeHTTP(w, r)
		case LibrarianSephirahSentinelServiceHeartbeatProcedure:
			librarianSephirahSentinelServiceHeartbeatHandler.ServeHTTP(w, r)
		case LibrarianSephirahSentinelServiceReportSentinelInformationProcedure:
			librarianSephirahSentinelServiceReportSentinelInformationHandler.ServeHTTP(w, r)
		case LibrarianSephirahSentinelServiceReportAppBinariesProcedure:
			librarianSephirahSentinelServiceReportAppBinariesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLibrarianSephirahSentinelServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLibrarianSephirahSentinelServiceHandler struct{}

func (UnimplementedLibrarianSephirahSentinelServiceHandler) RefreshToken(context.Context, *connect.Request[v1.RefreshTokenRequest]) (*connect.Response[v1.RefreshTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sentinel.v1.LibrarianSephirahSentinelService.RefreshToken is not implemented"))
}

func (UnimplementedLibrarianSephirahSentinelServiceHandler) Heartbeat(context.Context, *connect.Request[v1.HeartbeatRequest]) (*connect.Response[v1.HeartbeatResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sentinel.v1.LibrarianSephirahSentinelService.Heartbeat is not implemented"))
}

func (UnimplementedLibrarianSephirahSentinelServiceHandler) ReportSentinelInformation(context.Context, *connect.Request[v1.ReportSentinelInformationRequest]) (*connect.Response[v1.ReportSentinelInformationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sentinel.v1.LibrarianSephirahSentinelService.ReportSentinelInformation is not implemented"))
}

func (UnimplementedLibrarianSephirahSentinelServiceHandler) ReportAppBinaries(context.Context, *connect.Request[v1.ReportAppBinariesRequest]) (*connect.Response[v1.ReportAppBinariesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("librarian.sentinel.v1.LibrarianSephirahSentinelService.ReportAppBinaries is not implemented"))
}
