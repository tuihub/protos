syntax = "proto3";

package librarian.porter.v1;

import "librarian/v1/common.proto";
import "librarian/v1/wellknown.proto";

option csharp_namespace = "TuiHub.Protos.Librarian.Porter.V1";
option go_package = "github.com/tuihub/protos/pkg/librarian/porter/v1;v1";

service LibrarianPorterService {
  rpc GetPorterInformation(GetPorterInformationRequest) returns (GetPorterInformationResponse);
  rpc EnablePorter(EnablePorterRequest) returns (EnablePorterResponse);

  // `Tiphereth`
  rpc PullAccount(PullAccountRequest) returns (PullAccountResponse);

  // `Gebura`
  rpc PullAppInfo(PullAppInfoRequest) returns (PullAppInfoResponse);
  // `Gebura`
  rpc PullAccountAppInfoRelation(PullAccountAppInfoRelationRequest) returns (PullAccountAppInfoRelationResponse);
  // `Gebura`
  rpc SearchAppInfo(SearchAppInfoRequest) returns (SearchAppInfoResponse);

  // `Yesod`
  rpc PullFeed(PullFeedRequest) returns (PullFeedResponse);
  // `Yesod`
  rpc PushFeedItems(PushFeedItemsRequest) returns (PushFeedItemsResponse);
  // `Yesod`
  rpc ExecFeedItemAction(ExecFeedItemActionRequest) returns (ExecFeedItemActionResponse);
}

message GetPorterInformationRequest {}
message GetPorterInformationResponse {
  // Human-readable name. no format limit.
  string name = 1;
  // Version of the porter. no format limit.
  string version = 2;
  // Global identifier. Same global name means same project. no format limit.
  // e.g. use project url "github.com/tuihub/porter-steam".
  string global_name = 3;
  PorterFeatureSummary feature_summary = 4;
}

message PorterFeatureSummary {
  repeated librarian.v1.FeatureFlag account_platforms = 1;
  repeated librarian.v1.FeatureFlag app_info_sources = 2;
  repeated librarian.v1.FeatureFlag feed_sources = 3;
  repeated librarian.v1.FeatureFlag notify_destinations = 4;
  repeated librarian.v1.FeatureFlag feed_item_actions = 5;
}

message EnablePorterRequest {
  // Identifier of sephirah. can be randomly generated.
  // porter can only be enabled by one sephirah.
  // redundancy requests from enabler must return success.
  int64 sephirah_id = 1;
  // Used to perform reverse call.
  // If not needed, porter should ignore it.
  // If needed, porter should refresh token before response to verify reverse call is available.
  // Enabler can send empty token as default, and resend request with token if needed.
  optional string refresh_token = 2;
}
message EnablePorterResponse {}

message PullAccountRequest {
  librarian.v1.AccountID account_id = 1;
}
message PullAccountResponse {
  librarian.v1.Account account = 1;
}

message PullAppInfoRequest {
  librarian.v1.AppInfoID app_info_id = 1;
}

message PullAppInfoResponse {
  librarian.v1.AppInfo app_info = 1;
}

message PullAccountAppInfoRelationRequest {
  librarian.v1.AccountAppRelationType relation_type = 1;
  librarian.v1.AccountID account_id = 2;
}

message PullAccountAppInfoRelationResponse {
  repeated librarian.v1.AppInfo app_infos = 1;
}

message SearchAppInfoRequest {
  string name = 1;
}

message SearchAppInfoResponse {
  repeated librarian.v1.AppInfo app_infos = 1;
}

message PullFeedRequest {
  // WellKnownFeedSource
  string source = 1;
  string channel_id = 2;
}

message PullFeedResponse {
  optional librarian.v1.Feed data = 1;
}

message PushFeedItemsRequest {
  // WellKnownNotifyDestination
  string destination = 1;
  string channel_id = 2;
  repeated librarian.v1.FeedItem items = 3;
  string token = 4;
}

message PushFeedItemsResponse {}

message ExecFeedItemActionRequest {
  // WellKnownFeedItemAction
  librarian.v1.FeatureRequest action = 1;
  librarian.v1.FeedItem item = 3;
}

message ExecFeedItemActionResponse {
  // Return the result of the action.
  // Leave empty if item should be filtered out.
  optional librarian.v1.FeedItem item = 1;
}
