syntax = "proto3";

package librarian.porter.v1;

import "google/protobuf/duration.proto";
import "librarian/v1/common.proto";

option csharp_namespace = "TuiHub.Protos.Librarian.Porter.V1";
option go_package = "github.com/tuihub/protos/pkg/librarian/porter/v1;v1";

// Definition of service feature flags, use original name rather than enum value.
// Set correct feature flags in server metadata to let caller know what functions are available.
enum FeatureFlag {
  FEATURE_FLAG_UNSPECIFIED = 0;
  // If set, operations pull from steam store are available.
  FEATURE_FLAG_SOURCE_STEAM = 1;
  // If set, operations pull from telegram are available.
  FEATURE_FLAG_SOURCE_TELEGRAM = 2;
  // If set, default storage bucket are available.
  FEATURE_FLAG_DEFAULT_DATA_STORAGE = 3;
}

/*
   * The main role of Porter is to encapsulate input&output operations.
   * In Porter's model:
   * - The data interface is divided into four types: feed, db, wiki, and data.
   Any input and output can be assigned to a specific type.
   * 1. Feed is the most structured type and basically refers to the RSS 2.0
   * 2. DB can be structured but the content requires additional processing
   * 3. Wiki cannot be structured
   * 4. Data can represent the binary and metadata of specific files
*/
service LibrarianPorterService {
  // `Feed`
  rpc PullFeed(PullFeedRequest) returns (PullFeedResponse);
  // `Feed`
  rpc PushFeedItems(PushFeedItemsRequest) returns (PushFeedItemsResponse);

  // `DB`
  rpc PullDB(PullDBRequest) returns (PullDBResponse);
  // `DB`
  rpc PullAccount(PullAccountRequest) returns (PullAccountResponse);
  // `DB`
  rpc PullApp(PullAppRequest) returns (PullAppResponse);
  // `DB`
  rpc PullAccountAppRelation(PullAccountAppRelationRequest) returns (PullAccountAppRelationResponse);

  // `Wiki`
  rpc PullWiki(PullWikiRequest) returns (PullWikiResponse);

  // `Data` Pull data binary
  rpc PullData(PullDataRequest) returns (stream PullDataResponse);
  // `Data` Push data binary
  rpc PushData(stream PushDataRequest) returns (PushDataResponse);
  // `Data` Generate http GET url
  rpc PresignedPullData(PresignedPullDataRequest) returns (PresignedPullDataResponse);
}

message PullFeedRequest {
  FeedSource source = 1;
  string channel_id = 2;
}

message PullFeedResponse {
  optional librarian.v1.Feed data = 1;
}

message PushFeedItemsRequest {
  FeedDestination destination = 1;
  string channel_id = 2;
  repeated librarian.v1.FeedItem items = 3;
  string token = 4;
}

message PushFeedItemsResponse {}

message PullDBRequest {
  DBSource source = 1;
  string content_id = 2;
}
message PullDBResponse {
  map<string, string> data = 1;
}

message PullWikiRequest {
  WikiSource source = 1;
  string content_id = 2;
}
message PullWikiResponse {
  string data = 1;
}

message PullDataRequest {
  DataSource source = 1;
  string content_id = 2;
}
message PullDataResponse {
  bytes data = 1;
}

message PullAccountRequest {
  librarian.v1.AccountID account_id = 1;
}

message PullAccountResponse {
  librarian.v1.Account account = 1;
}

message PullAppRequest {
  librarian.v1.AppID app_id = 1;
}

message PullAppResponse {
  librarian.v1.App app = 1;
}

message PullAccountAppRelationRequest {
  AccountAppRelationType relation_type = 1;
  librarian.v1.AccountID account_id = 2;
}

message PullAccountAppRelationResponse {
  repeated librarian.v1.App app_list = 1;
}

message PushDataRequest {
  message DataMeta {
    DataSource source = 1;
    string content_id = 2;
  }
  oneof content {
    DataMeta metadata = 1;
    bytes data = 2;
  }
}
message PushDataResponse {}

message PresignedPullDataRequest {
  DataSource source = 1;
  string content_id = 2;
  google.protobuf.Duration expire_time = 3;
}

message PresignedPullDataResponse {
  string pull_url = 1;
}

enum AccountAppRelationType {
  ACCOUNT_APP_RELATION_TYPE_UNSPECIFIED = 0;
  ACCOUNT_APP_RELATION_TYPE_OWN = 1;
}

enum FeedSource {
  FEED_SOURCE_UNSPECIFIED = 0;
  FEED_SOURCE_COMMON = 1;
}

enum FeedDestination {
  FEED_DESTINATION_UNSPECIFIED = 0;
  FEED_DESTINATION_TELEGRAM = 1;
}

enum DBSource {
  DB_SOURCE_UNSPECIFIED = 0;
}

enum WikiSource {
  WIKI_SOURCE_UNSPECIFIED = 0;
}

enum DataSource {
  DATA_SOURCE_UNSPECIFIED = 0;
  DATA_SOURCE_INTERNAL_DEFAULT = 1;
}
