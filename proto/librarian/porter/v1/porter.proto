syntax = "proto3";

package librarian.porter.v1;

import "librarian/v1/common.proto";
import "librarian/v1/wellknown.proto";

option csharp_namespace = "TuiHub.Protos.Librarian.Porter.V1";
option go_package = "github.com/tuihub/protos/pkg/librarian/porter/v1;v1";

service LibrarianPorterService {
  rpc GetPorterInformation(GetPorterInformationRequest) returns (GetPorterInformationResponse);
  // Used to enable porter and heartbeat.
  rpc EnablePorter(EnablePorterRequest) returns (EnablePorterResponse);

  rpc EnableContext(EnableContextRequest) returns (EnableContextResponse);
  rpc DisableContext(DisableContextRequest) returns (DisableContextResponse);

  // `Tiphereth`
  rpc PullAccount(PullAccountRequest) returns (PullAccountResponse);

  // `Gebura`
  rpc PullAppInfo(PullAppInfoRequest) returns (PullAppInfoResponse);
  // `Gebura`
  rpc PullAccountAppInfoRelation(PullAccountAppInfoRelationRequest) returns (PullAccountAppInfoRelationResponse);
  // `Gebura`
  rpc SearchAppInfo(SearchAppInfoRequest) returns (SearchAppInfoResponse);

  // `Yesod`
  rpc PullFeed(PullFeedRequest) returns (PullFeedResponse);
  // `Yesod`
  rpc ExecFeedItemAction(ExecFeedItemActionRequest) returns (ExecFeedItemActionResponse);

  // `Yesod` Enabled Setter can add items to feed through `LibrarianSephirahService.PUpsertFeed`
  // without extra permissions.
  rpc EnableFeedSetter(EnableFeedSetterRequest) returns (EnableFeedSetterResponse);
  // `Yesod`
  rpc DisableFeedSetter(DisableFeedSetterRequest) returns (DisableFeedSetterResponse);
  // `Yesod` Enabled Getter can get items from feed through `LibrarianSephirahService.PGetFeed`
  // without extra permissions.
  rpc EnableFeedGetter(EnableFeedGetterRequest) returns (EnableFeedGetterResponse);
  // `Yesod`
  rpc DisableFeedGetter(DisableFeedGetterRequest) returns (DisableFeedGetterResponse);

  // `Netzach`
  rpc PushFeedItems(PushFeedItemsRequest) returns (PushFeedItemsResponse);
}

message GetPorterInformationRequest {}
message GetPorterInformationResponse {
  librarian.v1.PorterBinarySummary binary_summary = 1;
  // Global identifier. Same global name means same project. no format limit.
  // e.g. use project url "github.com/tuihub/porter-steam".
  string global_name = 2;
  // Region is used to group porters,
  // same porter in same region can be randomly selected.
  // Leave empty to use default region.
  string region = 3;
  // Supported features.
  librarian.v1.FeatureSummary feature_summary = 4;
  // JSON schema for `FeatureRequest.context_json`.
  // Leave empty if not needed.
  // If needed, all feature requests should deliver `context_json`.
  // Can be used to configure third-party token, etc.
  optional string context_json_schema = 5;
}

message EnablePorterRequest {
  // Identifier of sephirah. can be randomly generated.
  // porter can only be enabled by one sephirah.
  // redundancy requests from enabler must return success.
  int64 sephirah_id = 1;
  // Used to perform reverse call.
  // If not needed, porter should ignore it.
  // If needed, porter should refresh token before response to verify reverse call is available.
  // Enabler can send empty token as default, and resend request with token if needed.
  optional string refresh_token = 2;
}
message EnablePorterResponse {
  // Human-readable status message.
  string status_message = 1;
  // If true, enabler should resend request with `refresh_token`.
  bool need_refresh_token = 2;
  PorterEnablesSummary enables_summary = 3;
}

message PorterEnablesSummary {
  // `EnableContextRequest.context_id`
  repeated librarian.v1.InternalID context_ids = 1;
  // `EnableFeedSetterRequest.setter_id`
  repeated librarian.v1.InternalID feed_setter_ids = 2;
  // `EnableFeedGetterRequest.getter_id`
  repeated librarian.v1.InternalID feed_getter_ids = 3;
}

message EnableContextRequest {
  // Identifier of context.
  // New context can replace old context with same id.
  librarian.v1.InternalID context_id = 1;
  string context_json = 2;
}
message EnableContextResponse {}

message DisableContextRequest {
  librarian.v1.InternalID context_id = 1;
}
message DisableContextResponse {}

message PullAccountRequest {
  librarian.v1.AccountID account_id = 1;
}
message PullAccountResponse {
  librarian.v1.Account account = 1;
}

message PullAppInfoRequest {
  librarian.v1.AppInfoID app_info_id = 1;
}

message PullAppInfoResponse {
  librarian.v1.AppInfo app_info = 1;
}

message PullAccountAppInfoRelationRequest {
  librarian.v1.AccountAppRelationType relation_type = 1;
  librarian.v1.AccountID account_id = 2;
}

message PullAccountAppInfoRelationResponse {
  repeated librarian.v1.AppInfo app_infos = 1;
}

message SearchAppInfoRequest {
  string name = 1;
}

message SearchAppInfoResponse {
  repeated librarian.v1.AppInfo app_infos = 1;
}

message PullFeedRequest {
  // `PorterFeatureSummary.feed_sources`
  librarian.v1.FeatureRequest source = 1;
}

message PullFeedResponse {
  optional librarian.v1.Feed data = 1;
}

message PushFeedItemsRequest {
  // `PorterFeatureSummary.notify_destinations`
  librarian.v1.FeatureRequest destination = 1;
  repeated librarian.v1.FeedItem items = 2;
}

message PushFeedItemsResponse {}

message ExecFeedItemActionRequest {
  // `PorterFeatureSummary.feed_item_actions`
  librarian.v1.FeatureRequest action = 1;
  librarian.v1.FeedItem item = 3;
}

message ExecFeedItemActionResponse {
  // Return the result of the action.
  // Leave empty if item should be filtered out.
  optional librarian.v1.FeedItem item = 1;
}

message EnableFeedSetterRequest {
  librarian.v1.InternalID setter_id = 1;
  // `PorterFeatureSummary.feed_setters`
  librarian.v1.FeatureRequest setter = 2;
  librarian.v1.InternalID feed_id = 3;
}

message EnableFeedSetterResponse {}

message DisableFeedSetterRequest {
  librarian.v1.InternalID setter_id = 1;
}

message DisableFeedSetterResponse {}

message EnableFeedGetterRequest {
  librarian.v1.InternalID getter_id = 1;
  // `PorterFeatureSummary.feed_getters`
  librarian.v1.FeatureRequest getter = 2;
  librarian.v1.InternalID feed_id = 3;
}

message EnableFeedGetterResponse {}

message DisableFeedGetterRequest {
  librarian.v1.InternalID getter_id = 1;
}

message DisableFeedGetterResponse {}
