syntax = "proto3";

package librarian.sentinel.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "TuiHub.Protos.Librarian.Sentinel.V1";
option go_package = "github.com/tuihub/protos/pkg/librarian/sentinel/v1;v1";

service LibrarianSephirahSentinelService {
  // `Tiphereth` Use valid refresh_token and get two new token, a refresh_token can only be used once
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);

  // `Tiphereth`
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);

  // `Gebura`
  rpc ReportSentinelInformation(ReportSentinelInformationRequest) returns (ReportSentinelInformationResponse);
  // `Gebura`
  // Full update, changes are handled by librarian
  rpc ReportAppBinaries(ReportAppBinariesRequest) returns (ReportAppBinariesResponse);
}

message RefreshTokenRequest {}
message RefreshTokenResponse {
  string access_token = 1;
  string refresh_token = 2;
}

message HeartbeatRequest {
  // instance_id is used to identify the client instance, should be randomly generated by client on startup
  int64 instance_id = 1;
  google.protobuf.Timestamp client_time = 2;
  google.protobuf.Duration heartbeat_interval = 3;
  google.protobuf.Duration commit_snapshot_interval = 4;
}

message HeartbeatResponse {}

message ReportSentinelInformationRequest {
  string url = 1;
  repeated string url_alternatives = 2;
  // valid when need_token is true
  string get_token_path = 3;
  string download_file_base_path = 4;
  repeated SentinelLibrary libraries = 5;
}
message ReportSentinelInformationResponse {}

message ReportAppBinariesRequest {
  repeated SentinelLibraryAppBinary app_binaries = 1;
  // Each library has multiple snapshots, and only one of them is the active snapshot
  // Use this field to create a new snapshot,
  // the new snapshot must be newer than exists,
  // the new snapshot will not be active until committed
  // Leave empty to update current active snapshot
  optional google.protobuf.Timestamp snapshot_time = 2;
  // If true, the new snapshot will be set as active
  optional bool commit_snapshot = 3;
}
message ReportAppBinariesResponse {
  // If true, the new snapshot is set as active
  optional bool commit_snapshot_success = 1;
}

message SentinelLibrary {
  int64 id = 1;
  string download_base_path = 2;
}

message SentinelLibraryAppBinary {
  int64 sentinel_library_id = 1;
  string sentinel_generated_id = 2;
  int64 size_bytes = 3;
  bool need_token = 4;
  repeated SentinelLibraryAppBinaryFile files = 5;

  string name = 10;
  string version = 11;
  string developer = 12;
  string publisher = 13;
}

message SentinelLibraryAppBinaryFile {
  string name = 1;
  int64 size_bytes = 2;
  bytes sha256 = 3;
  // should be path-joined to download_path when need_token is false
  string server_file_path = 4;

  optional string chunks_info = 10;
}
