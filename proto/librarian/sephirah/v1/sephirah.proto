syntax = "proto3";

package librarian.sephirah.v1;

import "google/protobuf/timestamp.proto";
import "librarian/sephirah/v1/binah.proto";
import "librarian/sephirah/v1/chesed.proto";
import "librarian/sephirah/v1/gebura.proto";
import "librarian/sephirah/v1/netzach.proto";
import "librarian/sephirah/v1/tiphereth.proto";
import "librarian/sephirah/v1/yesod.proto";

option csharp_namespace = "TuiHub.Protos.Librarian.Sephirah.V1";
option go_package = "github.com/tuihub/protos/pkg/librarian/sephirah/v1;v1";

/*
 * Sephirah contains the core logic and currently divided into the following modules:
 * 1. `Tiphereth` handles account data and provides permission verification
 * 2. `Gebura` handles application data
 * 3. `Binah` handles file transfer
 * 4. `Yesod` handles feed data
 * 5. `Netzach` handles notifications
 */
service LibrarianSephirahService {
  // Allow anonymous call, use accessToken to get complete information
  rpc GetServerInformation(GetServerInformationRequest) returns (GetServerInformationResponse);
  // `Tiphereth` `Normal` Login via password and get two token
  rpc GetToken(GetTokenRequest) returns (GetTokenResponse);
  // `Tiphereth` `Normal` `Sentinel` `Porter` Use valid refresh_token and get two new token, a refresh_token can only be used once
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
  // `Tiphereth` `Porter` Get access_token of another user with allowed privilege
  rpc GainUserPrivilege(GainUserPrivilegeRequest) returns (GainUserPrivilegeResponse);

  // `Tiphereth` `Normal` Client should register device after the first login
  // and store the device_id locally.
  // The server could add extra limits to non-registered device
  rpc RegisterDevice(RegisterDeviceRequest) returns (RegisterDeviceResponse);
  // `Tiphereth` `Normal`
  rpc ListRegisteredDevices(ListRegisteredDevicesRequest) returns (ListRegisteredDevicesResponse);
  // `Tiphereth` `Normal`
  rpc ListUserSessions(ListUserSessionsRequest) returns (ListUserSessionsResponse);
  // `Tiphereth` `Normal` delete session will revoke refresh_token immediately.
  // NOTE: This can also be used to log out at server side.
  // NOTE2: Delete session will not affect device registration.
  rpc DeleteUserSession(DeleteUserSessionRequest) returns (DeleteUserSessionResponse);

  // `Tiphereth` `Admin` `Normal limited`
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  // `Tiphereth` `Admin` `Normal limited`
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  // `Tiphereth` `Admin` `Normal limited`
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  // `Tiphereth` `Admin` `Normal limited`
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);

  // `Tiphereth` `Normal` Bind third-party account to current user.
  // Create (account)<-[Equal]->(current user)
  rpc LinkAccount(LinkAccountRequest) returns (LinkAccountResponse);
  // `Tiphereth` `Normal` Unbind third-party account from current user.
  // Delete (account)<-[Equal]->(current user)
  rpc UnLinkAccount(UnLinkAccountRequest) returns (UnLinkAccountResponse);
  // `Tiphereth` `Normal` List third-party account binded to current user.
  // Match ()<-[Equal]->(current user)
  rpc ListLinkAccounts(ListLinkAccountsRequest) returns (ListLinkAccountsResponse);

  // `Tiphereth` `Normal`
  rpc ListPorters(ListPortersRequest) returns (ListPortersResponse);
  // `Tiphereth` `Admin`
  rpc UpdatePorterStatus(UpdatePorterStatusRequest) returns (UpdatePorterStatusResponse);
  // `Tiphereth` `Normal only` Set porter privilege, default none privilege.
  rpc UpdatePorterPrivilege(UpdatePorterPrivilegeRequest) returns (UpdatePorterPrivilegeResponse);

  // `Binah` `Admin`
  rpc SetFileCapacity(SetFileCapacityRequest) returns (SetFileCapacityResponse);
  // `Binah` `Admin` `Normal limited`
  rpc GetFileCapacity(GetFileCapacityRequest) returns (GetFileCapacityResponse);
  // `Binah` `upload_token`
  rpc UploadFile(stream UploadFileRequest) returns (stream UploadFileResponse);
  // `Binah` `download_token`
  rpc DownloadFile(stream DownloadFileRequest) returns (stream DownloadFileResponse);
  // `Binah` `upload_token`
  // Maximum 256M
  // Server must send response at least once a minute to keepalive.
  // Client should ignore in_process response and wait for success or error response.
  rpc SimpleUploadFile(stream SimpleUploadFileRequest) returns (stream SimpleUploadFileResponse);
  // `Binah` `download_token`
  // Server will not check the receiving state
  rpc SimpleDownloadFile(SimpleDownloadFileRequest) returns (stream SimpleDownloadFileResponse);
  // `Binah` `upload_token`
  // Upload file through http url
  rpc PresignedUploadFile(PresignedUploadFileRequest) returns (PresignedUploadFileResponse);
  // `Binah` `upload_token`
  // Report file transfer status. Mainly used to trigger server post-process immediately
  rpc PresignedUploadFileStatus(PresignedUploadFileStatusRequest) returns (PresignedUploadFileStatusResponse);
  // `Binah` `download_token`
  // Download file through http url
  rpc PresignedDownloadFile(PresignedDownloadFileRequest) returns (PresignedDownloadFileResponse);

  // `Chesed` `Normal`
  rpc UploadImage(UploadImageRequest) returns (UploadImageResponse);
  // `Chesed` `Normal`
  rpc UpdateImage(UpdateImageRequest) returns (UpdateImageResponse);
  // `Chesed` `Normal`
  rpc ListImages(ListImagesRequest) returns (ListImagesResponse);
  // `Chesed` `Normal`
  rpc SearchImages(SearchImagesRequest) returns (SearchImagesResponse);
  // `Chesed` `Normal`
  rpc GetImage(GetImageRequest) returns (GetImageResponse);
  // `Chesed` `Normal`
  rpc DownloadImage(DownloadImageRequest) returns (DownloadImageResponse);

  // `Gebura` `Admin`
  rpc CreateAppInfo(CreateAppInfoRequest) returns (CreateAppInfoResponse);
  // `Gebura` `Admin`
  rpc UpdateAppInfo(UpdateAppInfoRequest) returns (UpdateAppInfoResponse);
  // `Gebura` `Admin` Used to manage app info
  rpc ListAppInfos(ListAppInfosRequest) returns (ListAppInfosResponse);
  // `Gebura` `Admin` Merge two app infos
  rpc MergeAppInfos(MergeAppInfosRequest) returns (MergeAppInfosResponse);
  // `Gebura` `Admin` Pick one app info out from merged
  rpc PickAppInfo(PickAppInfoRequest) returns (PickAppInfoResponse);

  // `Gebura` `Normal` Asynchronous update app infos.
  // Request on INTERNAL app info applies to all bound external app infos.
  // Create an INTERNAL app info when requested external app info does not exist
  // Server should implement a sync rate limit to prevent abuse,
  // when rate limit reached, return without real sync.
  rpc SyncAppInfos(SyncAppInfosRequest) returns (SyncAppInfosResponse);
  // `Gebura` `Normal` Asynchronously update app infos associated with an account.
  // Create an INTERNAL app info when associated external app info does not exist.
  // Server should implement a sync rate limit to prevent abuse,
  // when rate limit reached, return without real sync.
  rpc SyncAccountAppInfos(SyncAccountAppInfosRequest) returns (SyncAccountAppInfosResponse);
  // `Gebura` `Normal` Search app infos that already exist in server
  rpc SearchAppInfos(SearchAppInfosRequest) returns (SearchAppInfosResponse);
  // `Gebura` `Normal` Search new app infos from external
  rpc SearchNewAppInfos(SearchNewAppInfosRequest) returns (SearchNewAppInfosResponse);
  // `Gebura` `Normal` Flattened app info, data priority is 1.INTERNAL, 2.STEAM.
  // e.g. `id` will always from INTERNAL, `description` may from STEAM if it is empty in INTERNAL
  rpc GetAppInfo(GetAppInfoRequest) returns (GetAppInfoResponse);
  // `Gebura` `Normal` Original bound apps info of required app
  rpc GetBoundAppInfos(GetBoundAppInfosRequest) returns (GetBoundAppInfosResponse);
  // `Gebura` `Normal`
  rpc PurchaseAppInfo(PurchaseAppInfoRequest) returns (PurchaseAppInfoResponse);
  // `Gebura` `Normal`
  // Default get user purchased apps
  // Use `source` to get purchase info from bound account
  // only support steam
  rpc GetPurchasedAppInfos(GetPurchasedAppInfosRequest) returns (GetPurchasedAppInfosResponse);

  // `Gebura` `Normal`
  rpc CreateApp(CreateAppRequest) returns (CreateAppResponse);
  // `Gebura` `Normal`
  rpc UpdateApp(UpdateAppRequest) returns (UpdateAppResponse);
  // `Gebura` `Normal`
  rpc ListApps(ListAppsRequest) returns (ListAppsResponse);
  // `Gebura` `Normal`
  rpc AssignApp(AssignAppRequest) returns (AssignAppResponse);
  // `Gebura` `Normal`
  rpc UnAssignApp(UnAssignAppRequest) returns (UnAssignAppResponse);

  // `Gebura` `Sentinel`
  // Full update, changes are handled by librarian
  rpc ReportAppBinaries(ReportAppBinariesRequest) returns (ReportAppBinariesResponse);
  // `Gebura` `Normal`
  rpc DownloadAppBinary(DownloadAppBinaryRequest) returns (DownloadAppBinaryResponse);

  // `Gebura` `Normal`
  rpc CreateAppInst(CreateAppInstRequest) returns (CreateAppInstResponse);
  // `Gebura` `Normal`
  rpc UpdateAppInst(UpdateAppInstRequest) returns (UpdateAppInstResponse);
  // `Gebura` `Normal`
  rpc ListAppInsts(ListAppInstsRequest) returns (ListAppInstsResponse);

  // `Gebura` `Normal`
  rpc AddAppInstRunTime(AddAppInstRunTimeRequest) returns (AddAppInstRunTimeResponse);
  // `Gebura` `Normal` Only support AGGREGATION_TYPE_OVERALL
  rpc SumAppInstRunTime(SumAppInstRunTimeRequest) returns (SumAppInstRunTimeResponse);

  // `Gebura` `Normal`
  rpc UploadAppSaveFile(UploadAppSaveFileRequest) returns (UploadAppSaveFileResponse);
  // `Gebura` `Normal`
  rpc DownloadAppSaveFile(DownloadAppSaveFileRequest) returns (DownloadAppSaveFileResponse);
  // `Gebura` `Normal`
  rpc ListAppSaveFiles(ListAppSaveFilesRequest) returns (ListAppSaveFilesResponse);
  // `Gebura` `Normal`
  rpc RemoveAppSaveFile(RemoveAppSaveFileRequest) returns (RemoveAppSaveFileResponse);
  // `Gebura` `Normal`
  rpc PinAppSaveFile(PinAppSaveFileRequest) returns (PinAppSaveFileResponse);
  // `Gebura` `Normal`
  rpc UnpinAppSaveFile(UnpinAppSaveFileRequest) returns (UnpinAppSaveFileResponse);
  // `Gebura` `Normal`
  rpc SetAppSaveFileCapacity(SetAppSaveFileCapacityRequest) returns (SetAppSaveFileCapacityResponse);
  // `Gebura` `Normal`
  rpc GetAppSaveFileCapacity(GetAppSaveFileCapacityRequest) returns (GetAppSaveFileCapacityResponse);

  // `Gebura` `Normal`
  rpc ListAppCategories(ListAppCategoriesRequest) returns (ListAppCategoriesResponse);
  // `Gebura` `Normal`
  rpc CreateAppCategory(CreateAppCategoryRequest) returns (CreateAppCategoryResponse);
  // `Gebura` `Normal`
  rpc UpdateAppCategory(UpdateAppCategoryRequest) returns (UpdateAppCategoryResponse);
  // `Gebura` `Normal`
  rpc RemoveAppCategory(RemoveAppCategoryRequest) returns (RemoveAppCategoryResponse);

  // `Netzach` `Normal`
  rpc CreateNotifyTarget(CreateNotifyTargetRequest) returns (CreateNotifyTargetResponse);
  // `Netzach` `Normal`
  rpc UpdateNotifyTarget(UpdateNotifyTargetRequest) returns (UpdateNotifyTargetResponse);
  // `Netzach` `Normal`
  rpc ListNotifyTargets(ListNotifyTargetsRequest) returns (ListNotifyTargetsResponse);
  // `Netzach` `Normal`
  rpc CreateNotifyFlow(CreateNotifyFlowRequest) returns (CreateNotifyFlowResponse);
  // `Netzach` `Normal`
  rpc UpdateNotifyFlow(UpdateNotifyFlowRequest) returns (UpdateNotifyFlowResponse);
  // `Netzach` `Normal`
  rpc ListNotifyFlows(ListNotifyFlowsRequest) returns (ListNotifyFlowsResponse);

  // `Yesod` `Normal`
  rpc CreateFeedConfig(CreateFeedConfigRequest) returns (CreateFeedConfigResponse);
  // `Yesod` `Normal`
  rpc UpdateFeedConfig(UpdateFeedConfigRequest) returns (UpdateFeedConfigResponse);
  // `Yesod` `Normal`
  rpc ListFeedConfigs(ListFeedConfigsRequest) returns (ListFeedConfigsResponse);

  // `Yesod` `Normal`
  rpc ListFeedCategories(ListFeedCategoriesRequest) returns (ListFeedCategoriesResponse);
  // `Yesod` `Normal`
  rpc ListFeedPlatforms(ListFeedPlatformsRequest) returns (ListFeedPlatformsResponse);
  // `Yesod` `Normal`
  rpc ListFeedItems(ListFeedItemsRequest) returns (ListFeedItemsResponse);
  // `Yesod` `Normal`
  rpc GroupFeedItems(GroupFeedItemsRequest) returns (GroupFeedItemsResponse);
  // `Yesod` `Normal`
  rpc GetFeedItem(GetFeedItemRequest) returns (GetFeedItemResponse);
  // `Yesod` `Normal`
  rpc GetBatchFeedItems(GetBatchFeedItemsRequest) returns (GetBatchFeedItemsResponse);
  // `Yesod` `Normal`
  rpc ReadFeedItem(ReadFeedItemRequest) returns (ReadFeedItemResponse);

  // `Yesod` `Normal`
  rpc CreateFeedItemCollection(CreateFeedItemCollectionRequest) returns (CreateFeedItemCollectionResponse);
  // `Yesod` `Normal`
  rpc UpdateFeedItemCollection(UpdateFeedItemCollectionRequest) returns (UpdateFeedItemCollectionResponse);
  // `Yesod` `Normal`
  rpc ListFeedItemCollections(ListFeedItemCollectionsRequest) returns (ListFeedItemCollectionsResponse);
  // `Yesod` `Normal`
  rpc AddFeedItemToCollection(AddFeedItemToCollectionRequest) returns (AddFeedItemToCollectionResponse);
  // `Yesod` `Normal`
  rpc RemoveFeedItemFromCollection(RemoveFeedItemFromCollectionRequest) returns (RemoveFeedItemFromCollectionResponse);
  // `Yesod` `Normal`
  rpc ListCollectionItems(ListCollectionItemsRequest) returns (ListCollectionItemsResponse);
}

message GetServerInformationRequest {}
message GetServerInformationResponse {
  // For manual inspection only, the client may display but should not parse the response.
  ServerBinarySummary server_binary_summary = 1;
  // For manual inspection only, the client may display but should not parse the response.
  ServerProtocolSummary protocol_summary = 2;
  // The time that server received the request,
  // note that there is a transmission delay between server and client.
  google.protobuf.Timestamp current_time = 3;
  // Valid when accessToken is provided.
  optional ServerFeatureSummary feature_summary = 4;
  // For showing to user, customizable by server owner.
  ServerInstanceSummary server_instance_summary = 5;
}

message ServerBinarySummary {
  // Server source code address.
  // *Should* be a valid http address.
  string source_code_address = 1;
  // Binary build version.
  // The content *should* be a semantic version string similar to the one generated by `git describe`,
  // but rely on the actual implementation of the server.
  string build_version = 2;
  // Binary build date.
  // The content *should* be a date format that is human-readable.
  string build_date = 3;
}

message ServerProtocolSummary {
  // Protocol version used by server.
  // The content *must* be a semantic version string generated by `git describe`,
  // and if the server is built for production, it *must* be a valid version tag.
  string version = 1;
}

message ServerFeatureSummary {
  repeated string supported_account_platforms = 1;
  repeated string supported_app_info_sources = 2;
  repeated string supported_feed_sources = 3;
  repeated string supported_notify_destinations = 4;
}

message ServerInstanceSummary {
  string name = 1;
  string description = 2;
  string website_url = 3;
  string logo_url = 4;
  string background_url = 5;
}
