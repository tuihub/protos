syntax = "proto3";

package librarian.sephirah.v1;

import "google/protobuf/timestamp.proto";
import "librarian/sephirah/v1/binah.proto";
import "librarian/sephirah/v1/chesed.proto";
import "librarian/sephirah/v1/gebura.proto";
import "librarian/sephirah/v1/netzach.proto";
import "librarian/sephirah/v1/tiphereth.proto";
import "librarian/sephirah/v1/yesod.proto";

option csharp_namespace = "TuiHub.Protos.Librarian.Sephirah.V1";
option go_package = "github.com/tuihub/protos/pkg/librarian/sephirah/v1;v1";

/*
 * Sephirah contains the core logic and currently divided into the following modules:
 * 1. `Tiphereth` handles account data and provides permission verification
 * 2. `Gebura` handles application data
 * 3. `Binah` handles file transfer
 * 4. `Yesod` handles feed data
 * 5. `Netzach` handles notifications
 */
service LibrarianSephirahService {
  // For manual inspection only, the client may display but should not parse the response.
  rpc GetServerInformation(GetServerInformationRequest) returns (GetServerInformationResponse);
  // `Tiphereth` `Normal` Login via password and get two token
  rpc GetToken(GetTokenRequest) returns (GetTokenResponse);
  // `Tiphereth` `Normal` `Sentinel` Use valid refresh_token and get two new token, a refresh_token can only be used once
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
  // `Tiphereth` `Admin` Generate token for given user
  rpc GenerateToken(GenerateTokenRequest) returns (GenerateTokenResponse);

  // `Tiphereth` `Admin` `Normal limited`
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  // `Tiphereth` `Admin` `Normal limited`
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  // `Tiphereth` `Admin` `Normal limited`
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  // `Tiphereth` `Admin` `Normal limited`
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);

  // `Tiphereth` `Normal` Bind third-party account to current user.
  // Create (account)<-[Equal]->(current user)
  rpc LinkAccount(LinkAccountRequest) returns (LinkAccountResponse);
  // `Tiphereth` `Normal` Unbind third-party account from current user.
  // Delete (account)<-[Equal]->(current user)
  rpc UnLinkAccount(UnLinkAccountRequest) returns (UnLinkAccountResponse);
  // `Tiphereth` `Normal` List third-party account binded to current user.
  // Match ()<-[Equal]->(current user)
  rpc ListLinkAccounts(ListLinkAccountsRequest) returns (ListLinkAccountsResponse);

  // `Binah` `upload_token`
  rpc UploadFile(stream UploadFileRequest) returns (stream UploadFileResponse);
  // `Binah` `download_token`
  rpc DownloadFile(stream DownloadFileRequest) returns (stream DownloadFileResponse);
  // `Binah` `upload_token`
  // Maximum 256M
  // Server must send response at least once a minute to keepalive.
  // Client should ignore in_process response and wait for success or error response.
  rpc SimpleUploadFile(stream SimpleUploadFileRequest) returns (stream SimpleUploadFileResponse);
  // `Binah` `download_token`
  // Server will not check the
  rpc SimpleDownloadFile(SimpleDownloadFileRequest) returns (stream SimpleDownloadFileResponse);
  // `Binah` `download_token`
  // Download file through http url
  rpc PresignedDownloadFile(PresignedDownloadFileRequest) returns (PresignedDownloadFileResponse);

  // `Chesed` `Normal`
  rpc UploadImage(UploadImageRequest) returns (UploadImageResponse);
  // `Chesed` `Normal`
  rpc UpdateImage(UpdateImageRequest) returns (UpdateImageResponse);
  // `Chesed` `Normal`
  rpc ListImages(ListImagesRequest) returns (ListImagesResponse);
  // `Chesed` `Normal`
  rpc SearchImages(SearchImagesRequest) returns (SearchImagesResponse);
  // `Chesed` `Normal`
  rpc GetImage(GetImageRequest) returns (GetImageResponse);
  // `Chesed` `Normal`
  rpc DownloadImage(DownloadImageRequest) returns (DownloadImageResponse);

  // `Gebura` `Admin`
  rpc CreateApp(CreateAppRequest) returns (CreateAppResponse);
  // `Gebura` `Admin`
  rpc UpdateApp(UpdateAppRequest) returns (UpdateAppResponse);
  // `Gebura` `Admin` Used to manage apps
  rpc ListApps(ListAppsRequest) returns (ListAppsResponse);
  // `Gebura` `Admin` Submit an asynchronous update request
  rpc RefreshApp(RefreshAppRequest) returns (RefreshAppResponse);
  // `Gebura` `Admin` Merge two apps
  rpc MergeApps(MergeAppsRequest) returns (MergeAppsResponse);
  // `Gebura` `Admin` Pick one app out from merged
  rpc PickApp(PickAppRequest) returns (PickAppResponse);

  // `Gebura` `Normal`
  rpc SearchApps(SearchAppsRequest) returns (SearchAppsResponse);
  // `Gebura` `Normal` Get full information of required app
  rpc GetBindApps(GetBindAppsRequest) returns (GetBindAppsResponse);
  // `Gebura` `Normal`
  rpc PurchaseApp(PurchaseAppRequest) returns (PurchaseAppResponse);
  // `Gebura` `Normal`
  rpc GetPurchasedApps(GetPurchasedAppsRequest) returns (GetPurchasedAppsResponse);

  // `Gebura` `Normal`
  rpc CreateAppPackage(CreateAppPackageRequest) returns (CreateAppPackageResponse);
  // `Gebura` `Normal`
  rpc UpdateAppPackage(UpdateAppPackageRequest) returns (UpdateAppPackageResponse);
  // `Gebura` `Normal`
  rpc ListAppPackages(ListAppPackagesRequest) returns (ListAppPackagesResponse);
  // `Gebura` `Normal`
  rpc AssignAppPackage(AssignAppPackageRequest) returns (AssignAppPackageResponse);
  // `Gebura` `Normal`
  rpc UnAssignAppPackage(UnAssignAppPackageRequest) returns (UnAssignAppPackageResponse);
  // `Gebura` `Sentinel`
  rpc ReportAppPackages(stream ReportAppPackagesRequest) returns (stream ReportAppPackagesResponse);

  // `Gebura` `Normal`
  rpc AddAppPackageRunTime(AddAppPackageRunTimeRequest) return (AddAppPackageRunTimeResponse);
  // `Gebura` `Normal`
  rpc GetAppPackageRunTime(GetAppPackageRunTimeRequest) return (GetAppPackageRunTimeResponse);

  // `Gebura` `Normal`
  rpc UploadGameSaveFile(UploadGameSaveFileRequest) returns (UploadGameSaveFileResponse);
  // `Gebura` `Normal`
  rpc DownloadGameSaveFile(DownloadGameSaveFileRequest) returns (DownloadGameSaveFileResponse);
  // `Gebura` `Normal`
  rpc ListGameSaveFile(ListGameSaveFileRequest) returns (ListGameSaveFileResponse);

  // `Netzach` `Normal`
  rpc CreateNotifyTarget(CreateNotifyTargetRequest) returns (CreateNotifyTargetResponse);
  // `Netzach` `Normal`
  rpc UpdateNotifyTarget(UpdateNotifyTargetRequest) returns (UpdateNotifyTargetResponse);
  // `Netzach` `Normal`
  rpc ListNotifyTargets(ListNotifyTargetsRequest) returns (ListNotifyTargetsResponse);
  // `Netzach` `Normal`
  rpc CreateNotifyFlow(CreateNotifyFlowRequest) returns (CreateNotifyFlowResponse);
  // `Netzach` `Normal`
  rpc UpdateNotifyFlow(UpdateNotifyFlowRequest) returns (UpdateNotifyFlowResponse);
  // `Netzach` `Normal`
  rpc ListNotifyFlows(ListNotifyFlowsRequest) returns (ListNotifyFlowsResponse);

  // `Yesod` `Normal`
  rpc CreateFeedConfig(CreateFeedConfigRequest) returns (CreateFeedConfigResponse);
  // `Yesod` `Normal`
  rpc UpdateFeedConfig(UpdateFeedConfigRequest) returns (UpdateFeedConfigResponse);
  // `Yesod` `Normal`
  rpc ListFeedConfigs(ListFeedConfigsRequest) returns (ListFeedConfigsResponse);
  // `Yesod` `Normal`
  rpc ListFeedItems(ListFeedItemsRequest) returns (ListFeedItemsResponse);
  // `Yesod` `Normal`
  rpc GroupFeedItems(GroupFeedItemsRequest) returns (GroupFeedItemsResponse);
  // `Yesod` `Normal`
  rpc GetFeedItem(GetFeedItemRequest) returns (GetFeedItemResponse);
  // `Yesod` `Normal`
  rpc GetBatchFeedItems(GetBatchFeedItemsRequest) returns (GetBatchFeedItemsResponse);
}

message GetServerInformationRequest {}
message GetServerInformationResponse {
  ServerBinarySummary server_binary_summary = 1;
  ServerProtocolSummary protocol_summary = 2;
  // The time server received the request,
  // note that there is a transmission delay between server and client.
  google.protobuf.Timestamp current_time = 3;
}

message ServerBinarySummary {
  // Server source code address.
  // *Should* be a valid http address.
  string source_code_address = 1;
  // Binary build version.
  // The content *should* be a semantic version string similar to the one generated by `git describe`,
  // but rely on the actual implementation of the server.
  string build_version = 2;
  // Binary build date.
  // The content *should* be a date format that is human-readable.
  string build_date = 3;
}

message ServerProtocolSummary {
  // Protocol version used by server.
  // The content *must* be a semantic version string generated by `git describe`,
  // and if the server is built for production, it *must* be a valid version tag.
  string version = 1;
}
