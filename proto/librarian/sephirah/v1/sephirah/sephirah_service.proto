syntax = "proto3";

package librarian.sephirah.v1.sephirah;

import "google/protobuf/timestamp.proto";
import "librarian/sephirah/v1/sephirah/base.proto";
import "librarian/sephirah/v1/sephirah/binah.proto";
import "librarian/sephirah/v1/sephirah/chesed.proto";
import "librarian/sephirah/v1/sephirah/gebura.proto";
import "librarian/sephirah/v1/sephirah/netzach.proto";
import "librarian/sephirah/v1/sephirah/tiphereth.proto";
import "librarian/sephirah/v1/sephirah/yesod.proto";

option csharp_namespace = "TuiHub.Protos.Librarian.Sephirah.V1";
option go_package = "github.com/tuihub/protos/pkg/librarian/sephirah/v1;v1";

/*
 * Sephirah contains the core logic and currently divided into the following modules:
 * 1. `Tiphereth` handles account data and provides permission verification
 * 2. `Gebura` handles application data
 * 3. `Binah` handles file transfer
 * 4. `Yesod` handles feed data
 * 5. `Netzach` handles notifications
 */
service LibrarianSephirahService {
  // Allow anonymous call, use accessToken to get complete information
  rpc GetServerInformation(GetServerInformationRequest) returns (GetServerInformationResponse);
  // `Normal` Client can use this to subscribe to server events.
  //
  // Server should send `SERVER_EVENT_LISTENER_CONNECTED` event immediately if the connection is valid.
  // Otherwise, client should treat the connection as failed.
  //
  // Server can close the stream at any time, client should reconnect if needed **with backoff**.
  // Only used to improve real-time experience, no guarantee of delivery.
  rpc ListenServerEvent(ListenServerEventRequest) returns (stream ListenServerEventResponse);

  // `Tiphereth` `Normal` Login via password and get two token
  rpc GetToken(GetTokenRequest) returns (GetTokenResponse);
  // `Tiphereth` `Normal` `Porter` Use valid refresh_token and get two new token, a refresh_token can only be used once
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
  // `Tiphereth` `Porter` Obtain access_token of a specific user after user authorization.
  // This token can be used to perform actions on behalf of the user.
  rpc AcquireUserToken(AcquireUserTokenRequest) returns (AcquireUserTokenResponse);

  // `Tiphereth`
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  // `Tiphereth` Self register as a new normal user
  rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse);
  // `Tiphereth` `Normal` Update self user info
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  // `Tiphereth` `Normal` Client should register device after the first login
  // and store the device_id locally.
  // The server could add extra limits to non-registered device
  rpc RegisterDevice(RegisterDeviceRequest) returns (RegisterDeviceResponse);
  // `Tiphereth` `Normal`
  rpc ListRegisteredDevices(ListRegisteredDevicesRequest) returns (ListRegisteredDevicesResponse);
  // `Tiphereth` `Normal`
  rpc ListUserSessions(ListUserSessionsRequest) returns (ListUserSessionsResponse);
  // `Tiphereth` `Normal` delete session will revoke refresh_token immediately.
  // NOTE: This can also be used to log out at server side.
  // NOTE2: Delete session will not affect device registration.
  rpc DeleteUserSession(DeleteUserSessionRequest) returns (DeleteUserSessionResponse);

  // `Tiphereth` `Normal` Bind third-party account to current user.
  rpc LinkAccount(LinkAccountRequest) returns (LinkAccountResponse);
  // `Tiphereth` `Normal` Unbind third-party account from current user.
  rpc UnLinkAccount(UnLinkAccountRequest) returns (UnLinkAccountResponse);
  // `Tiphereth` `Normal` List third-party account binded to current user.
  rpc ListLinkAccounts(ListLinkAccountsRequest) returns (ListLinkAccountsResponse);

  // `Tiphereth` `Normal`
  rpc ListPorterDigests(ListPorterDigestsRequest) returns (ListPorterDigestsResponse);
  // `Tiphereth` `Normal`
  rpc CreatePorterContext(CreatePorterContextRequest) returns (CreatePorterContextResponse);
  // `Tiphereth` `Normal`
  rpc ListPorterContexts(ListPorterContextsRequest) returns (ListPorterContextsResponse);
  // `Tiphereth` `Normal` Set porter context.
  rpc UpdatePorterContext(UpdatePorterContextRequest) returns (UpdatePorterContextResponse);

  // `Binah` `Normal`
  rpc GetStorageCapacityUsage(GetStorageCapacityUsageRequest) returns (GetStorageCapacityUsageResponse);
  // `Binah` `upload_token`
  rpc UploadFile(stream UploadFileRequest) returns (stream UploadFileResponse);
  // `Binah` `download_token`
  rpc DownloadFile(stream DownloadFileRequest) returns (stream DownloadFileResponse);
  // `Binah` `upload_token`
  // Maximum 256M
  // Server must send response at least once a minute to keepalive.
  // Client should ignore in_process response and wait for success or error response.
  rpc SimpleUploadFile(stream SimpleUploadFileRequest) returns (stream SimpleUploadFileResponse);
  // `Binah` `download_token`
  // Server will not check the receiving state
  rpc SimpleDownloadFile(SimpleDownloadFileRequest) returns (stream SimpleDownloadFileResponse);
  // `Binah` `upload_token`
  // Upload file through http url
  rpc PresignedUploadFile(PresignedUploadFileRequest) returns (PresignedUploadFileResponse);
  // `Binah` `upload_token`
  // Report file transfer status. Mainly used to trigger server post-process immediately
  rpc PresignedUploadFileStatus(PresignedUploadFileStatusRequest) returns (PresignedUploadFileStatusResponse);
  // `Binah` `download_token`
  // Download file through http url
  rpc PresignedDownloadFile(PresignedDownloadFileRequest) returns (PresignedDownloadFileResponse);

  // `Chesed` `Normal`
  rpc UploadImage(UploadImageRequest) returns (UploadImageResponse);
  // `Chesed` `Normal`
  rpc UpdateImage(UpdateImageRequest) returns (UpdateImageResponse);
  // `Chesed` `Normal`
  rpc ListImages(ListImagesRequest) returns (ListImagesResponse);
  // `Chesed` `Normal`
  rpc SearchImages(SearchImagesRequest) returns (SearchImagesResponse);
  // `Chesed` `Normal`
  rpc GetImage(GetImageRequest) returns (GetImageResponse);
  // `Chesed` `Normal`
  rpc DownloadImage(DownloadImageRequest) returns (DownloadImageResponse);

  // `Gebura` `Normal`
  rpc SearchStoreApps(SearchStoreAppsRequest) returns (SearchStoreAppsResponse);
  // `Gebura` `Normal`
  rpc GetStoreAppSummary(GetStoreAppSummaryRequest) returns (GetStoreAppSummaryResponse);
  // `Gebura` `Normal`
  rpc AcquireStoreApp(AcquireStoreAppRequest) returns (AcquireStoreAppResponse);

  // `Gebura` `Normal`
  rpc ListStoreAppBinaries(ListStoreAppBinariesRequest) returns (ListStoreAppBinariesResponse);
  // `Gebura` `Normal`
  rpc ListStoreAppBinaryFiles(ListStoreAppBinaryFilesRequest) returns (ListStoreAppBinaryFilesResponse);
  // `Gebura` `Normal`
  rpc DownloadStoreAppBinary(DownloadStoreAppBinaryRequest) returns (DownloadStoreAppBinaryResponse);

  // `Gebura` `Normal`
  rpc ListStoreAppSaveFiles(ListStoreAppSaveFilesRequest) returns (ListStoreAppSaveFilesResponse);
  // `Gebura` `Normal`
  rpc DownloadStoreAppSaveFile(DownloadStoreAppSaveFileRequest) returns (DownloadStoreAppSaveFileResponse);

  // `Gebura` `Normal` Search app infos
  rpc SearchAppInfos(SearchAppInfosRequest) returns (SearchAppInfosResponse);
  // `Gebura` `Normal`
  rpc CreateApp(CreateAppRequest) returns (CreateAppResponse);
  // `Gebura` `Normal`
  rpc UpdateApp(UpdateAppRequest) returns (UpdateAppResponse);
  // `Gebura` `Normal`
  rpc ListApps(ListAppsRequest) returns (ListAppsResponse);

  // `Gebura` `Normal`
  rpc BatchCreateAppRunTime(BatchCreateAppRunTimeRequest) returns (BatchCreateAppRunTimeResponse);
  // `Gebura` `Normal`
  rpc SumAppRunTime(SumAppRunTimeRequest) returns (SumAppRunTimeResponse);
  // `Gebura` `Normal`
  rpc ListAppRunTimes(ListAppRunTimesRequest) returns (ListAppRunTimesResponse);
  // `Gebura` `Normal`
  rpc DeleteAppRunTime(DeleteAppRunTimeRequest) returns (DeleteAppRunTimeResponse);

  // `Gebura` `Normal`
  rpc UploadAppSaveFile(UploadAppSaveFileRequest) returns (UploadAppSaveFileResponse);
  // `Gebura` `Normal`
  rpc DownloadAppSaveFile(DownloadAppSaveFileRequest) returns (DownloadAppSaveFileResponse);
  // `Gebura` `Normal`
  rpc ListAppSaveFiles(ListAppSaveFilesRequest) returns (ListAppSaveFilesResponse);
  // `Gebura` `Normal`
  rpc DeleteAppSaveFile(DeleteAppSaveFileRequest) returns (DeleteAppSaveFileResponse);
  // `Gebura` `Normal`
  rpc PinAppSaveFile(PinAppSaveFileRequest) returns (PinAppSaveFileResponse);
  // `Gebura` `Normal`
  rpc UnpinAppSaveFile(UnpinAppSaveFileRequest) returns (UnpinAppSaveFileResponse);
  // `Gebura` `Normal`
  rpc GetAppSaveFileCapacity(GetAppSaveFileCapacityRequest) returns (GetAppSaveFileCapacityResponse);
  // `Gebura` `Normal`
  rpc SetAppSaveFileCapacity(SetAppSaveFileCapacityRequest) returns (SetAppSaveFileCapacityResponse);

  // `Gebura` `Normal`
  rpc ListAppCategories(ListAppCategoriesRequest) returns (ListAppCategoriesResponse);
  // `Gebura` `Normal`
  rpc CreateAppCategory(CreateAppCategoryRequest) returns (CreateAppCategoryResponse);
  // `Gebura` `Normal`
  rpc UpdateAppCategory(UpdateAppCategoryRequest) returns (UpdateAppCategoryResponse);
  // `Gebura` `Normal`
  rpc DeleteAppCategory(DeleteAppCategoryRequest) returns (DeleteAppCategoryResponse);

  // `Netzach` `Normal`
  rpc CreateNotifyTarget(CreateNotifyTargetRequest) returns (CreateNotifyTargetResponse);
  // `Netzach` `Normal`
  rpc UpdateNotifyTarget(UpdateNotifyTargetRequest) returns (UpdateNotifyTargetResponse);
  // `Netzach` `Normal`
  rpc ListNotifyTargets(ListNotifyTargetsRequest) returns (ListNotifyTargetsResponse);
  // `Netzach` `Normal`
  rpc CreateNotifyFlow(CreateNotifyFlowRequest) returns (CreateNotifyFlowResponse);
  // `Netzach` `Normal`
  rpc UpdateNotifyFlow(UpdateNotifyFlowRequest) returns (UpdateNotifyFlowResponse);
  // `Netzach` `Normal`
  rpc ListNotifyFlows(ListNotifyFlowsRequest) returns (ListNotifyFlowsResponse);

  // `Netzach` `Porter`
  rpc PorterGetNotifyTargetItems(PorterGetNotifyTargetItemsRequest) returns (PorterGetNotifyTargetItemsResponse);

  // `Netzach` `Admin` `Normal limited`
  rpc ListSystemNotifications(ListSystemNotificationsRequest) returns (ListSystemNotificationsResponse);
  // `Netzach` `Normal`
  rpc UpdateSystemNotification(UpdateSystemNotificationRequest) returns (UpdateSystemNotificationResponse);

  // `Yesod` `Normal`
  rpc CreateFeedConfig(CreateFeedConfigRequest) returns (CreateFeedConfigResponse);
  // `Yesod` `Normal`
  rpc UpdateFeedConfig(UpdateFeedConfigRequest) returns (UpdateFeedConfigResponse);
  // `Yesod` `Normal`
  rpc ListFeedConfigs(ListFeedConfigsRequest) returns (ListFeedConfigsResponse);

  // `Yesod` `Normal`
  rpc CreateFeedActionSet(CreateFeedActionSetRequest) returns (CreateFeedActionSetResponse);
  // `Yesod` `Normal`
  rpc UpdateFeedActionSet(UpdateFeedActionSetRequest) returns (UpdateFeedActionSetResponse);
  // `Yesod` `Normal`
  rpc ListFeedActionSets(ListFeedActionSetsRequest) returns (ListFeedActionSetsResponse);

  // `Yesod` `Normal`
  rpc ListFeedCategories(ListFeedCategoriesRequest) returns (ListFeedCategoriesResponse);
  // `Yesod` `Normal`
  rpc ListFeedPlatforms(ListFeedPlatformsRequest) returns (ListFeedPlatformsResponse);
  // `Yesod` `Normal`
  rpc ListFeedItems(ListFeedItemsRequest) returns (ListFeedItemsResponse);
  // `Yesod` `Normal`
  rpc GetFeedItem(GetFeedItemRequest) returns (GetFeedItemResponse);
  // `Yesod` `Normal`
  rpc GetBatchFeedItems(GetBatchFeedItemsRequest) returns (GetBatchFeedItemsResponse);
  // `Yesod` `Normal`
  rpc ReadFeedItem(ReadFeedItemRequest) returns (ReadFeedItemResponse);

  // `Yesod` `Normal`
  rpc CreateFeedItemCollection(CreateFeedItemCollectionRequest) returns (CreateFeedItemCollectionResponse);
  // `Yesod` `Normal`
  rpc UpdateFeedItemCollection(UpdateFeedItemCollectionRequest) returns (UpdateFeedItemCollectionResponse);
  // `Yesod` `Normal`
  rpc ListFeedItemCollections(ListFeedItemCollectionsRequest) returns (ListFeedItemCollectionsResponse);
  // `Yesod` `Normal`
  rpc AddFeedItemToCollection(AddFeedItemToCollectionRequest) returns (AddFeedItemToCollectionResponse);
  // `Yesod` `Normal`
  rpc RemoveFeedItemFromCollection(RemoveFeedItemFromCollectionRequest) returns (RemoveFeedItemFromCollectionResponse);
  // `Yesod` `Normal`
  rpc ListFeedItemsInCollection(ListFeedItemsInCollectionRequest) returns (ListFeedItemsInCollectionResponse);

  // `Yesod` `Porter`
  rpc PUpsertFeed(PUpsertFeedRequest) returns (PUpsertFeedResponse);
  // `Yesod` `Porter`
  rpc PGetFeed(PGetFeedRequest) returns (PGetFeedResponse);
}

message ListenServerEventRequest {}

message ListenServerEventResponse {
  ServerEvent event = 1;
  google.protobuf.Timestamp occur_time = 2;
  // Specific event payload, see `ServerEvent` for details.
  string payload = 3;
}

enum ServerEvent {
  SERVER_EVENT_UNSPECIFIED = 0;
  // New event listener connected, no payload.
  SERVER_EVENT_LISTENER_CONNECTED = 1;
  // `Netzach` New server notification created, no payload.
  SERVER_EVENT_SYSTEM_NOTIFICATION_UPDATED = 2;
}
