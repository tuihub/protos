syntax = "proto3";

package librarian.sephirah.v1.angela;

import "librarian/sephirah/v1/angela/binah.proto";
import "librarian/sephirah/v1/angela/gebura.proto";
import "librarian/sephirah/v1/angela/tiphereth.proto";
import "librarian/sephirah/v1/sephirah/base.proto";
import "librarian/v1/wellknown.proto";

option csharp_namespace = "TuiHub.Protos.Librarian.Sephirah.V1";
option go_package = "github.com/tuihub/protos/pkg/librarian/sephirah/v1;v1";

/*
 * Angela provides the admin control interface
 */
service LibrarianAngelaService {
  // Allow anonymous call, use accessToken to get complete information
  rpc GetServerInformation(GetServerInformationRequest) returns (GetServerInformationResponse);

  rpc GetServerConfig(GetServerConfigRequest) returns (GetServerConfigResponse);
  rpc UpdateServerConfig(UpdateServerConfigRequest) returns (UpdateServerConfigResponse);

  // `Tiphereth` Login via password and get two token
  rpc GetToken(GetTokenRequest) returns (GetTokenResponse);
  // `Tiphereth` Use valid refresh_token and get two new token, a refresh_token can only be used once
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);

  // `Tiphereth`
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  // `Tiphereth`
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  // `Tiphereth`
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);

  // `Tiphereth`
  rpc ListPorters(ListPortersRequest) returns (ListPortersResponse);
  // `Tiphereth`
  rpc UpdatePorterStatus(UpdatePorterStatusRequest) returns (UpdatePorterStatusResponse);
  // `Tiphereth` Delete porter, only when porter is disabled
  rpc DeletePorter(DeletePorterRequest) returns (DeletePorterResponse);

  // `Tiphereth`
  rpc CreateSentinel(CreateSentinelRequest) returns (CreateSentinelResponse);
  // `Tiphereth`
  rpc GetSentinelToken(GetSentinelTokenRequest) returns (GetSentinelTokenResponse);
  // `Tiphereth`
  rpc UpdateSentinel(UpdateSentinelRequest) returns (UpdateSentinelResponse);
  // `Tiphereth`
  rpc ListSentinels(ListSentinelsRequest) returns (ListSentinelsResponse);
  // `Tiphereth`
  rpc DeleteSentinel(DeleteSentinelRequest) returns (DeleteSentinelResponse);

  // `Binah`
  rpc ListStorageCapacityUsage(ListStorageCapacityUsageRequest) returns (ListStorageCapacityUsageResponse);
  // `Binah` `upload_token`
  // Maximum 256M
  // Server must send response at least once a minute to keepalive.
  // Client should ignore in_process response and wait for success or error response.
  rpc SimpleUploadFile(stream SimpleUploadFileRequest) returns (stream SimpleUploadFileResponse);
  // `Binah` `download_token`
  // Server will not check the receiving state
  rpc SimpleDownloadFile(SimpleDownloadFileRequest) returns (stream SimpleDownloadFileResponse);
  // `Binah` `upload_token`
  // Upload file through http url
  rpc PresignedUploadFile(PresignedUploadFileRequest) returns (PresignedUploadFileResponse);
  // `Binah` `upload_token`
  // Report file transfer status. Mainly used to trigger server post-process immediately
  rpc PresignedUploadFileStatus(PresignedUploadFileStatusRequest) returns (PresignedUploadFileStatusResponse);
  // `Binah` `download_token`
  // Download file through http url
  rpc PresignedDownloadFile(PresignedDownloadFileRequest) returns (PresignedDownloadFileResponse);

  // `Gebura`
  rpc SearchAppInfos(SearchAppInfosRequest) returns (SearchAppInfosResponse);
  // `Gebura`
  rpc CreateStoreApp(CreateStoreAppRequest) returns (CreateStoreAppResponse);
  // `Gebura`
  rpc UpdateStoreApp(UpdateStoreAppRequest) returns (UpdateStoreAppResponse);
  // `Gebura`
  rpc ListStoreApps(ListStoreAppsRequest) returns (ListStoreAppsResponse);

  // `Gebura`
  rpc ListStoreAppBinaries(ListStoreAppBinariesRequest) returns (ListStoreAppBinariesResponse);
  // `Gebura`
  rpc UpdateStoreAppBinary(UpdateStoreAppBinaryRequest) returns (UpdateStoreAppBinaryResponse);
  // `Gebura`
  rpc ListStoreAppBinaryFiles(ListStoreAppBinaryFilesRequest) returns (ListStoreAppBinaryFilesResponse);

  // `Gebura`
  rpc CreateStoreAppSaveFile(CreateStoreAppSaveFileRequest) returns (CreateStoreAppSaveFileResponse);
  // `Gebura`
  rpc UpdateStoreAppSaveFile(UpdateStoreAppSaveFileRequest) returns (UpdateStoreAppSaveFileResponse);
  // `Gebura`
  rpc UploadStoreAppSaveFile(UploadStoreAppSaveFileRequest) returns (UploadStoreAppSaveFileResponse);
  // `Gebura`
  rpc ListStoreAppSaveFiles(ListStoreAppSaveFilesRequest) returns (ListStoreAppSaveFilesResponse);
  // `Gebura`
  rpc DeleteStoreAppSaveFile(DeleteStoreAppSaveFileRequest) returns (DeleteStoreAppSaveFileResponse);
}

message GetServerInformationRequest {
  optional bool with_status_report = 1;
}
message GetServerInformationResponse {
  sephirah.ServerInformation server_information = 1;
}

message GetServerConfigRequest {}
message GetServerConfigResponse {
  repeated ServerConfigSection sections = 1;
}

message UpdateServerConfigRequest {
  repeated ServerConfigItem items = 1;
}
message UpdateServerConfigResponse {}

message ServerConfigSection {
  string id = 1;
  librarian.v1.I18NString name = 2;
  librarian.v1.I18NString description = 3;
  repeated ServerConfigItem items = 4;
}

message ServerConfigItem {
  // id must be unique in sections
  string id = 1;
  librarian.v1.I18NString name = 2;
  librarian.v1.I18NString description = 3;
  string default_value = 4;
  string current_value = 5;
}

message ServerConfigItemUpdate {
  string id = 1;
  string value = 2;
}
