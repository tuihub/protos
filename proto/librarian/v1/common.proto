syntax = "proto3";

package librarian.v1;

import "buf/validate/validate.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "TuiHub.Protos.Librarian.V1";
option go_package = "github.com/tuihub/protos/pkg/librarian/v1;v1";

message PagingRequest {
  // start from 1, not 0
  int64 page_num = 1 [(buf.validate.field).int64.gt = 0];
  int64 page_size = 2 [(buf.validate.field).int64.gt = 0];
}

message PagingResponse {
  int64 total_size = 1 [(buf.validate.field).int64.gte = 0];
}

// half-open e.g.
// {
//   start_time: "2023.01.01 00:00",
//   duration: "1d"
// }
// means the whole day of 2023.1.1;
// or [2023.01.01 00:00 , 2023.01.02 00:00)
message TimeRange {
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Duration duration = 2 [(buf.validate.field).duration.gte = {seconds: 0}];
}

// Should be used in request messages
message TimeAggregation {
  enum AggregationType {
    AGGREGATION_TYPE_UNSPECIFIED = 0;
    AGGREGATION_TYPE_OVERALL = 1;
    AGGREGATION_TYPE_YEAR = 2;
    AGGREGATION_TYPE_MONTH = 3;
    AGGREGATION_TYPE_DAY = 4;
  }
  AggregationType aggregation_type = 1;
  // The `TimeRange` should be adjusted on the server side to align with the nearest boundary when aggregating.
  // e.g. the request TimeRange is 2023.2.13 9:26 ~ 2023.3.14 17:21.
  // For aggregating by year, rounded to 2023.1.1 00:00 ~ 2024.1.1 00:00.
  // For aggregating by month, rounded to 2023.2.1 00:00 ~ 2023.4.1 00:00.
  // For aggregating by day, rounded to 2023.2.13 00:00 ~ 2023.3.15 00:00.
  TimeRange time_range = 2;
}

// A globally unique identifier generated by `Searcher`
message InternalID {
  int64 id = 1;
}

message Account {
  InternalID id = 1;
  // WellKnownPlatform
  string platform = 2;
  string platform_account_id = 3;
  string name = 4;
  string profile_url = 5;
  string avatar_url = 6;
  google.protobuf.Timestamp latest_update_time = 7;
}

message AccountID {
  // WellKnownAccountPlatform
  string platform = 1;
  string platform_account_id = 2;
}

enum AccountAppRelationType {
  ACCOUNT_APP_RELATION_TYPE_UNSPECIFIED = 0;
  ACCOUNT_APP_RELATION_TYPE_OWN = 1;
}

message AppInfo {
  InternalID id = 1;
  // ignore `source` and `source_app_id` when `internal` is true
  bool internal = 2;
  // WellKnownAppSource
  string source = 3;
  string source_app_id = 4;
  optional string source_url = 5;

  optional AppInfoDetails details = 6;

  string name = 7;
  AppType type = 8;
  string short_description = 9;
  string icon_image_url = 10;
  // must be horizontal, usually 16:9
  string background_image_url = 11;
  // must be vertical, usually 3:4
  string cover_image_url = 12;
  repeated string tags = 13;
  repeated string alt_names = 14;
}

// Mixed info of bound apps
message AppInfoMixed {
  // internal app id
  InternalID id = 1;

  optional AppInfoDetails details = 6;

  string name = 7;
  AppType type = 8;
  string short_description = 9;
  string icon_image_url = 10;
  // must be horizontal, usually 16:9
  string background_image_url = 11;
  // must be vertical, usually 3:4
  string cover_image_url = 12;
  repeated string tags = 13;
  repeated string alt_names = 14;
}

message AppInfoID {
  bool internal = 1;
  // WellKnownAppSource
  string source = 2;
  string source_app_id = 3;
}

message AppInfoDetails {
  string description = 1;
  string release_date = 2;
  string developer = 3;
  string publisher = 4;
  string version = 5;
  repeated string image_urls = 6;
}

enum AppType {
  APP_TYPE_UNSPECIFIED = 0;
  APP_TYPE_GAME = 1;
}

message Feed {
  InternalID id = 1;
  // `standard field`
  string title = 2;
  // `standard field`
  string link = 3;
  // `standard field`
  string description = 4;
  // `standard field`
  repeated FeedItem items = 5;

  // `standard field`
  string language = 6;
  // `standard field`
  FeedImage image = 7;
  // `standard field`
  repeated FeedPerson authors = 8;
}

message FeedItem {
  InternalID id = 1;
  // `standard field`
  string title = 2;
  // `standard field`
  repeated FeedPerson authors = 3;
  // `standard field`
  string description = 4;
  // `standard field`
  string content = 5;
  // `standard field`
  string guid = 6;
  // `standard field`. e.g. https://github.com/TuiHub/Librarian/releases.atom
  string link = 7;
  // `standard field`
  FeedImage image = 8;
  // `standard field`
  string published = 9;
  // must valid when send to client.
  // if server failed to generate, fallback to server time.
  optional google.protobuf.Timestamp published_parsed = 10;
  // `standard field`
  string updated = 11;
  optional google.protobuf.Timestamp updated_parsed = 12;
  // `standard field`
  repeated FeedEnclosure enclosures = 13;
  // hostname of `link`. e.g. github.com
  string publish_platform = 14;
  // recorded read times
  int64 read_count = 15;
}

// Person is an individual specified in a feed
// (e.g. an author)
message FeedPerson {
  // `standard field`
  string name = 1;
  // `standard field`
  string email = 2;
}

// Image is an image that is the artwork for a given
// feed or item.
message FeedImage {
  // `standard field`
  string url = 1;
  // `standard field`
  string title = 2;
}

// Enclosure is a file associated with a given Item.
message FeedEnclosure {
  // `standard field`
  string url = 1;
  // `standard field`
  string length = 2;
  // `standard field`
  string type = 3;
}
