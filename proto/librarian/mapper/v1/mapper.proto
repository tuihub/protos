syntax = "proto3";

package librarian.mapper.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "TuiHub.Protos.Librarian.Mapper.V1";
option go_package = "github.com/tuihub/librarian/mapper;v1";

/*
 * The main role of Mapper is to encapsulate graph operations.
 * In Mapper's model:
 * 1. Each vertex is uniquely determined by `vid` and can only have one `VERTEX_TYPE_type`
 * 2. Each edge is uniquely determined by `src_vid`, `dst_vid` and `EDGE_TYPE_type`.
 *    In other words, all edges are directed and edges can be repeated by type difference
 * 3. Mapper knows the rules for each type of edge and
 *    will prevent illegal edges from being created
 * 4. Mapper is not good at handling delete operations, try to avoid delete operations
 */
service LibrarianMapperService {
  rpc InsertVertex(InsertVertexRequest) returns (InsertVertexResponse);
  rpc DeleteVertex(DeleteVertexRequest) returns (DeleteVertexResponse);
  rpc UpdateVertex(UpdateVertexRequest) returns (UpdateVertexResponse);

  rpc InsertEdge(InsertEdgeRequest) returns (InsertEdgeResponse);
  rpc DeleteEdge(DeleteEdgeRequest) returns (DeleteEdgeResponse);
  rpc UpdateEdge(UpdateEdgeRequest) returns (UpdateEdgeResponse);

  // Search vertexs from a given start vertex
  rpc GoFromVertex(GoFromVertexRequest) returns (GoFromVertexResponse);
  // Get vertexs in the connected subgraph of the `Equal` type edge where the given vertex is located
  rpc FetchEqualVertex(FetchEqualVertexRequest) returns (FetchEqualVertexResponse);
  // Get vertexs connected to the connected subgraph of the `Equal` type edge where the given vertex is located
  rpc FetchEqualVertexNeighbor(FetchEqualVertexNeighborRequest) returns (FetchEqualVertexNeighborResponse);
  // Find path between two given vertexs
  rpc FindPath(FindPathRequest) returns (FindPathResponse);
}

message InsertVertexRequest {
  repeated Vertex vertex_list = 1;
}

message InsertVertexResponse {}

message DeleteVertexRequest {
  repeated int64 vid_list = 1;
}

message DeleteVertexResponse {}

message UpdateVertexRequest {
  repeated Vertex vertex_list = 1;
}

message UpdateVertexResponse {}

message InsertEdgeRequest {
  repeated Edge edge_list = 1;
}

message InsertEdgeResponse {}

message DeleteEdgeRequest {
  repeated Edge edge_list = 2;
}

message DeleteEdgeResponse {}

message UpdateEdgeRequest {
  repeated Edge edge_list = 3;
}

message UpdateEdgeResponse {}

message GoFromVertexRequest {
  int64 src_vid = 1;
  repeated EdgeType edge_type_filter = 2;
  EdgeDirection edge_direction = 3;
  int64 min_step = 4;
  int64 max_step = 5;

  int64 limit = 14;
  int64 offset = 15;
}

message GoFromVertexResponse {
  repeated Vertex vertex_list = 1;
}

message FetchEqualVertexRequest {
  int64 src_vid = 1;
}

message FetchEqualVertexResponse {
  repeated Vertex vertex_list = 1;
}

message FetchEqualVertexNeighborRequest {
  int64 src_vid = 1;
  repeated EdgeType edge_type_filter = 2;
  EdgeDirection edge_direction = 3;
}

message FetchEqualVertexNeighborResponse {
  repeated Edge edge_list = 1;
}

message FindPathRequest {
  repeated int64 src_vid = 1;
  repeated int64 dst_vid = 2;
  repeated EdgeType edge_type_filter = 3;
  EdgeDirection edge_direction = 4;
  int64 max_step = 5;
}

message FindPathResponse {
  message SinglePath {
    // Path from edge_list[0].src_vid to edge_list[-1].dst_vid
    // If reverse edge is allowed, begin vid may not be src_vid but dst_vid, the end vid is the same
    repeated Edge edge_list = 3;
  }
  repeated SinglePath path_list = 1;
}

message Vertex {
  int64 vid = 1;
  VertexType type = 2;
  optional VertexProp prop = 3;
}

message VertexProp {
  VertexCommonProp common = 1;
  map<string, int64> additional = 2;
}

message VertexCommonProp {
  optional google.protobuf.Timestamp occur_time = 1 [(gogoproto.stdtime) = true];
  optional google.protobuf.Timestamp create_time = 2 [(gogoproto.stdtime) = true];
  optional google.protobuf.Timestamp update_time = 3 [(gogoproto.stdtime) = true];
}

message Edge {
  int64 src_vid = 1;
  int64 dst_vid = 2;
  EdgeType type = 3;
  optional EdgeProp prop = 4;
}

message EdgeProp {
  EdgeCommonProp common = 1;
  map<string, int64> additional = 2;
}

message EdgeCommonProp {
  optional google.protobuf.Timestamp occur_time = 1 [(gogoproto.stdtime) = true];
  optional google.protobuf.Timestamp create_time = 2 [(gogoproto.stdtime) = true];
  optional google.protobuf.Timestamp update_time = 3 [(gogoproto.stdtime) = true];
  optional int64 rank = 4;
}

enum VertexType {
  VERTEX_TYPE_UNSPECIFIED = 0;
  VERTEX_TYPE_ABSTRACT = 1;
  VERTEX_TYPE_ENTITY = 2;
  VERTEX_TYPE_MESSAGE = 3;
  VERTEX_TYPE_OBJECT = 4;
}

enum EdgeType {
  EDGE_TYPE_UNSPECIFIED = 0;
  EDGE_TYPE_GENERAL = 1;
  EDGE_TYPE_EQUAL = 2;
  EDGE_TYPE_CREATE = 3;
  EDGE_TYPE_ENJOY = 4;
  EDGE_TYPE_MENTION = 5;
  EDGE_TYPE_DERIVE = 6;
  EDGE_TYPE_CONTROL = 7;
  EDGE_TYPE_FOLLOW = 8;
}

enum EdgeDirection {
  EDGE_DIRECTION_UNSPECIFIED = 0;
  EDGE_DIRECTION_OUT = 1;
  EDGE_DIRECTION_IN = 2;
  EDGE_DIRECTION_BOTH = 3;
}
